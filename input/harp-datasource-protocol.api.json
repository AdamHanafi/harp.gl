{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.8.10",
    "schemaVersion": 1003,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "@here/harp-datasource-protocol!",
  "docComment": "/**\n * Components used for the decoding and styling of data that is used by the Datasources.\n *\n * @remarks\n *\n * The DataSource Protocol package contains components used for the decoding and styling of data that is used by the Datasources. This code is shared between the ui-thread and the web-workers which are used to parallelise the decoding of the data. This module contains interfaces for choosing techniques form the techniques catalog that are applied via the {@link Theme} files to draw geometries on the map canvas.\n *\n * @packageDocumentation\n */\n",
  "name": "@here/harp-datasource-protocol",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@here/harp-datasource-protocol!",
      "name": "",
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!addBuffersToTransferList:function(1)",
          "docComment": "/**\n * Add all the buffers of the technique to the transfer list.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function addBuffersToTransferList(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": ", transferList: "
            },
            {
              "kind": "Reference",
              "text": "ArrayBuffer",
              "canonicalReference": "!ArrayBuffer:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "transferList",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "name": "addBuffersToTransferList"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!AmbientLight:interface",
          "docComment": "/**\n * Light type: ambient.\n *\n * @remarks\n *\n * @defaultSnippets [ { \"label\": \"New Ambient Light\", \"description\": \"Adds a new Ambient Light\", \"body\": { \"type\": \"ambient\", \"name\": \"${1:ambient light}\", \"color\": \"#${2:fff}\", \"intensity\": \"^${3:1}\" } } ]\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AmbientLight extends "
            },
            {
              "kind": "Reference",
              "text": "BaseLight",
              "canonicalReference": "@here/harp-datasource-protocol!BaseLight:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "AmbientLight",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!AmbientLight#color:member",
              "docComment": "/**\n * @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!AmbientLight#intensity:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "intensity?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "intensity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!AmbientLight#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "\"ambient\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!Attachment:interface",
          "docComment": "/**\n * Attachments together with [[Geometry]] define the meshes and the objects of a [[Scene]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Attachment "
            }
          ],
          "releaseTag": "Public",
          "name": "Attachment",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Attachment#edgeIndex:member",
              "docComment": "/**\n * Optional additional buffer index used to create an edge object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "edgeIndex?: "
                },
                {
                  "kind": "Reference",
                  "text": "BufferAttribute",
                  "canonicalReference": "@here/harp-datasource-protocol!BufferAttribute:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "edgeIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Attachment#groups:member",
              "docComment": "/**\n * The draw [[Group]]]s of this [[Attachment]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "groups: "
                },
                {
                  "kind": "Reference",
                  "text": "Group",
                  "canonicalReference": "@here/harp-datasource-protocol!Group:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "groups",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Attachment#index:member",
              "docComment": "/**\n * The index [[BufferAttribute]]. If not provided the index buffer of the [[Geometry]] will be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "index?: "
                },
                {
                  "kind": "Reference",
                  "text": "BufferAttribute",
                  "canonicalReference": "@here/harp-datasource-protocol!BufferAttribute:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "index",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Attachment#name:member",
              "docComment": "/**\n * The name of this [[Attachment]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Attachment#uuid:member",
              "docComment": "/**\n * The unique uuid of this [[Attachment]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "uuid?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "uuid",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!Attr_2:type",
          "docComment": "/**\n * The attributes of a technique.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Attr<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [P in keyof T]?: T[P] | "
            },
            {
              "kind": "Reference",
              "text": "JsonExpr",
              "canonicalReference": "@here/harp-datasource-protocol!JsonExpr:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Attr_2",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!AttributeMap:type",
          "docComment": "/**\n * Attributes corresponding to some decoded geometry. It may be either a map of multiple attributes or just a number with the geometry's feature id.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AttributeMap = "
            },
            {
              "kind": "Content",
              "text": "{} | number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AttributeMap",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!BaseLight:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BaseLight "
            }
          ],
          "releaseTag": "Public",
          "name": "BaseLight",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BaseLight#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BaseLight#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!BaseStyle:type",
          "docComment": "/**\n * The object that defines what way an item of a [[DataSource]] should be decoded to assemble a tile. [[Style]] is describing which features are shown on a map and in what way they are being shown.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type BaseStyle<Technique, Params> = "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<Params> & {\n    description?: string;\n    styleSet?: string;\n    category?: string | "
            },
            {
              "kind": "Reference",
              "text": "JsonExpr",
              "canonicalReference": "@here/harp-datasource-protocol!JsonExpr:type"
            },
            {
              "kind": "Content",
              "text": ";\n    technique: Technique;\n    renderOrder?: number | "
            },
            {
              "kind": "Reference",
              "text": "JsonExpr",
              "canonicalReference": "@here/harp-datasource-protocol!JsonExpr:type"
            },
            {
              "kind": "Content",
              "text": ";\n    minZoomLevel?: number | "
            },
            {
              "kind": "Reference",
              "text": "JsonExpr",
              "canonicalReference": "@here/harp-datasource-protocol!JsonExpr:type"
            },
            {
              "kind": "Content",
              "text": ";\n    maxZoomLevel?: number | "
            },
            {
              "kind": "Reference",
              "text": "JsonExpr",
              "canonicalReference": "@here/harp-datasource-protocol!JsonExpr:type"
            },
            {
              "kind": "Content",
              "text": ";\n    transient?: boolean;\n    debug?: boolean;\n    metricUnit?: \"Meter\" | \"Pixel\";\n    labelProperty?: string;\n    attr?: "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<Params>;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "BaseStyle",
          "typeParameters": [
            {
              "typeParameterName": "Technique",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Params",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 13
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams:interface",
          "docComment": "/**\n * Common attributes or all [[Technique]]s.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BaseTechniqueParams "
            }
          ],
          "releaseTag": "Public",
          "name": "BaseTechniqueParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams#category:member",
              "docComment": "/**\n * The category of this technique.\n *\n * The category is used in conjunction with [[Theme.priorities]] to assign render orders to the objects created by this [[Style]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "category?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "category",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams#enabled:member",
              "docComment": "/**\n * Runtime filtering of techniques.\n *\n * Use with `['dynamic-properties']` operator for dynamic feature highlight, highlighig etc.\n *\n * @see Picking example - [[PickingExample]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enabled?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams#fadeFar:member",
              "docComment": "/**\n * Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero opacity and stops fading out. An undefined value disables fading.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fadeFar?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fadeFar",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams#fadeNear:member",
              "docComment": "/**\n * Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start fading out (opacity decreases).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fadeNear?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fadeNear",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams#id:member",
              "docComment": "/**\n * The name used to identify materials created from this technique.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams#kind:member",
              "docComment": "/**\n * Specified kind of geometry. One kind is set as default in the technique, and can be overridden in the style.\n *\n * @deprecated\n *\n * Use [[enabled]] with expressions based on `['dynamic-properties']` operator.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "kind?: "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryKind",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryKind:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryKindSet",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryKindSet:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "kind",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams#renderOrder:member",
              "docComment": "/**\n * The render order of the objects created using this technique.\n *\n * If not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing values according to style position in file.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderOrder?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderOrder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams#transient:member",
              "docComment": "/**\n * Optional. If `true`, no IDs will be saved for the geometry this technique creates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transient?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "transient",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-datasource-protocol!baseTechniqueParamsDescriptor:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "baseTechniqueParamsDescriptor: "
            },
            {
              "kind": "Reference",
              "text": "TechniqueDescriptor",
              "canonicalReference": "@here/harp-datasource-protocol!TechniqueDescriptor:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "BaseTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "baseTechniqueParamsDescriptor",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!BaseValueDefinition:interface",
          "docComment": "/**\n * Value definition commons.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BaseValueDefinition "
            }
          ],
          "releaseTag": "Public",
          "name": "BaseValueDefinition",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BaseValueDefinition#description:member",
              "docComment": "/**\n * The description of the definition.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "description?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "description",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BaseValueDefinition#type:member",
              "docComment": "/**\n * The type of the definition.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!BasicExtrudedLineStyle:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type BasicExtrudedLineStyle = "
            },
            {
              "kind": "Reference",
              "text": "BaseStyle",
              "canonicalReference": "@here/harp-datasource-protocol!BaseStyle:type"
            },
            {
              "kind": "Content",
              "text": "<\"extruded-line\", "
            },
            {
              "kind": "Reference",
              "text": "BasicExtrudedLineTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!BasicExtrudedLineTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "BasicExtrudedLineStyle",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!BasicExtrudedLineTechnique:interface",
          "docComment": "/**\n * Runtime representation of [[BasicExtrudedLineStyle]] as parsed by [[StyleSetEvaluator]]. For technique parameters see [[BasicExtrudedLineTechniqueParams]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BasicExtrudedLineTechnique extends "
            },
            {
              "kind": "Reference",
              "text": "MakeTechniqueAttrs",
              "canonicalReference": "@here/harp-datasource-protocol!MakeTechniqueAttrs:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "BasicExtrudedLineTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!BasicExtrudedLineTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "BasicExtrudedLineTechnique",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BasicExtrudedLineTechnique#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "\"extruded-line\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!BasicExtrudedLineTechniqueParams:interface",
          "docComment": "/**\n * Declares a a geometry as a basic extruded line.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BasicExtrudedLineTechniqueParams extends "
            },
            {
              "kind": "Reference",
              "text": "BaseTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "PolygonalTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!PolygonalTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BasicExtrudedLineTechniqueParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BasicExtrudedLineTechniqueParams#caps:member",
              "docComment": "/**\n * Style of both end caps. Possible values: `\"None\"`, `\"Circle\"`. A value of undefined maps to `\"Circle\"`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "caps?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<\"None\" | \"Circle\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "caps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BasicExtrudedLineTechniqueParams#color:member",
              "docComment": "/**\n * Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleColor",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleColor:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BasicExtrudedLineTechniqueParams#lineWidth:member",
              "docComment": "/**\n * Width of line in meters for different zoom levels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineWidth: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lineWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BasicExtrudedLineTechniqueParams#opacity:member",
              "docComment": "/**\n * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally opaque.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "opacity?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "opacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BasicExtrudedLineTechniqueParams#shading:member",
              "docComment": "/**\n * A value determining the shading technique. Valid values are \"Basic\" and \"Standard\". Default is \"Basic\".\n *\n * `\"basic\"` : Simple shading, faster to render. Only simple color and opacity are effective. `\"standard\"`: Elaborate shading, with metalness, and roughness.\n *\n * TODO: is this TechniqueParams or Style prop ?\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shading?: "
                },
                {
                  "kind": "Content",
                  "text": "\"basic\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shading",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BasicExtrudedLineTechniqueParams#transparent:member",
              "docComment": "/**\n * Set to `true` if line should appear transparent. Rendering transparent lines may come with a slight performance impact.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transparent?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "transparent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BasicExtrudedLineTechniqueParams#wireframe:member",
              "docComment": "/**\n * A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wireframe?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "wireframe",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!BinaryOp:type",
          "docComment": "/**\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type BinaryOp = "
            },
            {
              "kind": "Reference",
              "text": "RelationalOp",
              "canonicalReference": "@here/harp-datasource-protocol!RelationalOp:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "EqualityOp",
              "canonicalReference": "@here/harp-datasource-protocol!EqualityOp:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "BinaryOp",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-datasource-protocol!BooleanLiteralExpr:class",
          "docComment": "/**\n * Boolean literal expression.  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BooleanLiteralExpr extends "
            },
            {
              "kind": "Reference",
              "text": "LiteralExpr",
              "canonicalReference": "@here/harp-datasource-protocol!LiteralExpr:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BooleanLiteralExpr",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-datasource-protocol!BooleanLiteralExpr:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `BooleanLiteralExpr` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(value: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!BooleanLiteralExpr#accept:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accept<Result, Context>(visitor: "
                },
                {
                  "kind": "Reference",
                  "text": "ExprVisitor",
                  "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor:interface"
                },
                {
                  "kind": "Content",
                  "text": "<Result, Context>"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "visitor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Result",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "Context",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "accept"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!BooleanLiteralExpr#value:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly value: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!BoxedAnyDefinition:interface",
          "docComment": "/**\n * Boxed definition without type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BoxedAnyDefinition extends "
            },
            {
              "kind": "Reference",
              "text": "BaseValueDefinition",
              "canonicalReference": "@here/harp-datasource-protocol!BaseValueDefinition:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BoxedAnyDefinition",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BoxedAnyDefinition#value:member",
              "docComment": "/**\n * The value of the definition.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value: "
                },
                {
                  "kind": "Reference",
                  "text": "LiteralValue",
                  "canonicalReference": "@here/harp-datasource-protocol!LiteralValue:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "JsonExpr",
                  "canonicalReference": "@here/harp-datasource-protocol!JsonExpr:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!BoxedBooleanDefinition:interface",
          "docComment": "/**\n * A boxed boolean value definition.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BoxedBooleanDefinition extends "
            },
            {
              "kind": "Reference",
              "text": "BaseValueDefinition",
              "canonicalReference": "@here/harp-datasource-protocol!BaseValueDefinition:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BoxedBooleanDefinition",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BoxedBooleanDefinition#type:member",
              "docComment": "/**\n * The type of the definition.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "\"boolean\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BoxedBooleanDefinition#value:member",
              "docComment": "/**\n * The value of the definition.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!BoxedColorDefinition:interface",
          "docComment": "/**\n * A boxed color value definition.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BoxedColorDefinition extends "
            },
            {
              "kind": "Reference",
              "text": "BaseValueDefinition",
              "canonicalReference": "@here/harp-datasource-protocol!BaseValueDefinition:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BoxedColorDefinition",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BoxedColorDefinition#type:member",
              "docComment": "/**\n * The type of the definition.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "\"color\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BoxedColorDefinition#value:member",
              "docComment": "/**\n * The value of the definition.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!BoxedDefinition:type",
          "docComment": "/**\n * A boxed value definition.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type BoxedDefinition = "
            },
            {
              "kind": "Reference",
              "text": "BoxedAnyDefinition",
              "canonicalReference": "@here/harp-datasource-protocol!BoxedAnyDefinition:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BoxedBooleanDefinition",
              "canonicalReference": "@here/harp-datasource-protocol!BoxedBooleanDefinition:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BoxedNumericDefinition",
              "canonicalReference": "@here/harp-datasource-protocol!BoxedNumericDefinition:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BoxedStringDefinition",
              "canonicalReference": "@here/harp-datasource-protocol!BoxedStringDefinition:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BoxedColorDefinition",
              "canonicalReference": "@here/harp-datasource-protocol!BoxedColorDefinition:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BoxedSelectorDefinition",
              "canonicalReference": "@here/harp-datasource-protocol!BoxedSelectorDefinition:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "BoxedDefinition",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!BoxedNumericDefinition:interface",
          "docComment": "/**\n * A boxed numerical value definition.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BoxedNumericDefinition extends "
            },
            {
              "kind": "Reference",
              "text": "BaseValueDefinition",
              "canonicalReference": "@here/harp-datasource-protocol!BaseValueDefinition:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BoxedNumericDefinition",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BoxedNumericDefinition#type:member",
              "docComment": "/**\n * The type of the definition.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "\"number\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BoxedNumericDefinition#value:member",
              "docComment": "/**\n * The value of the definition.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!BoxedSelectorDefinition:interface",
          "docComment": "/**\n * A boxed selector value definition.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BoxedSelectorDefinition extends "
            },
            {
              "kind": "Reference",
              "text": "BaseValueDefinition",
              "canonicalReference": "@here/harp-datasource-protocol!BaseValueDefinition:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BoxedSelectorDefinition",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BoxedSelectorDefinition#type:member",
              "docComment": "/**\n * The type of the definition.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "\"selector\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BoxedSelectorDefinition#value:member",
              "docComment": "/**\n * The value of the definition.\n *\n * See [[BaseStyle.when]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "JsonExpr",
                  "canonicalReference": "@here/harp-datasource-protocol!JsonExpr:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!BoxedStringDefinition:interface",
          "docComment": "/**\n * A boxed string value definition.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BoxedStringDefinition extends "
            },
            {
              "kind": "Reference",
              "text": "BaseValueDefinition",
              "canonicalReference": "@here/harp-datasource-protocol!BaseValueDefinition:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BoxedStringDefinition",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BoxedStringDefinition#type:member",
              "docComment": "/**\n * The type of the definition.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "\"string\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BoxedStringDefinition#value:member",
              "docComment": "/**\n * The value of the definition.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!BufferAttribute:interface",
          "docComment": "/**\n * Structured clone compliant WebGL buffer and its metadata.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BufferAttribute "
            }
          ],
          "releaseTag": "Public",
          "name": "BufferAttribute",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BufferAttribute#buffer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "buffer: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayBufferLike",
                  "canonicalReference": "!ArrayBufferLike:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "buffer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BufferAttribute#itemCount:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "itemCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "itemCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BufferAttribute#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BufferAttribute#normalized:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "normalized?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "normalized",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!BufferAttribute#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Reference",
                  "text": "BufferElementType",
                  "canonicalReference": "@here/harp-datasource-protocol!BufferElementType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!BufferElementType:type",
          "docComment": "/**\n * The data stored in Buffers' elements can be of the following elementary types: float, signed or unsigned integers (8-bit, 16-bit or 32-bit long).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type BufferElementType = "
            },
            {
              "kind": "Content",
              "text": "\"float\" | \"uint8\" | \"uint16\" | \"uint32\" | \"int8\" | \"int16\" | \"int32\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "BufferElementType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-datasource-protocol!CallExpr:class",
          "docComment": "/**\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class CallExpr extends "
            },
            {
              "kind": "Reference",
              "text": "Expr",
              "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CallExpr",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-datasource-protocol!CallExpr:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `CallExpr` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(op: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", args: "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "op",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!CallExpr#accept:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accept<Result, Context>(visitor: "
                },
                {
                  "kind": "Reference",
                  "text": "ExprVisitor",
                  "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor:interface"
                },
                {
                  "kind": "Content",
                  "text": "<Result, Context>"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "visitor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Result",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "Context",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "accept"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!CallExpr#args:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly args: "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "args",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!CallExpr#children:member",
              "docComment": "/**\n * Returns the child nodes of this [[Expr]].\n *\n * @deprecated\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get children(): "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "children",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!CallExpr#descriptor:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "descriptor?: "
                },
                {
                  "kind": "Reference",
                  "text": "OperatorDescriptor",
                  "canonicalReference": "@here/harp-datasource-protocol!OperatorDescriptor:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "descriptor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!CallExpr#exprIsDynamic:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected exprIsDynamic(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "exprIsDynamic"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!CallExpr#op:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly op: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "op",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-datasource-protocol!CaseExpr:class",
          "docComment": "/**\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class CaseExpr extends "
            },
            {
              "kind": "Reference",
              "text": "Expr",
              "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CaseExpr",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-datasource-protocol!CaseExpr:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `CaseExpr` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(branches: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<["
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": "]>"
                },
                {
                  "kind": "Content",
                  "text": ", fallback: "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "branches",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "fallback",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!CaseExpr#accept:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accept<Result, Context>(visitor: "
                },
                {
                  "kind": "Reference",
                  "text": "ExprVisitor",
                  "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor:interface"
                },
                {
                  "kind": "Content",
                  "text": "<Result, Context>"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "visitor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Result",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "Context",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "accept"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!CaseExpr#branches:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly branches: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<["
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": "]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "branches",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!CaseExpr#exprIsDynamic:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected exprIsDynamic(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "exprIsDynamic"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!CaseExpr#fallback:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly fallback: "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fallback",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!CirclesStyle:type",
          "docComment": "/**\n * Render feature as set of circles rendered in screen space.\n *\n * @see [[PointTechniqueParams]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CirclesStyle = "
            },
            {
              "kind": "Reference",
              "text": "BaseStyle",
              "canonicalReference": "@here/harp-datasource-protocol!BaseStyle:type"
            },
            {
              "kind": "Content",
              "text": "<\"circles\", "
            },
            {
              "kind": "Reference",
              "text": "PointTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!PointTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CirclesStyle",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!CirclesTechnique:interface",
          "docComment": "/**\n * Runtime representation of [[CirclesStyle]] as parsed by [[StyleSetEvaluator]]. For technique parameters see [[PointTechniqueParams]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CirclesTechnique extends "
            },
            {
              "kind": "Reference",
              "text": "MakeTechniqueAttrs",
              "canonicalReference": "@here/harp-datasource-protocol!MakeTechniqueAttrs:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PointTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!PointTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "CirclesTechnique",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!CirclesTechnique#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "\"circles\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-datasource-protocol!circlesTechniquePropTypes:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "circlesTechniquePropTypes: "
            },
            {
              "kind": "Reference",
              "text": "TechniqueDescriptor",
              "canonicalReference": "@here/harp-datasource-protocol!TechniqueDescriptor:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CirclesTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!CirclesTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "circlesTechniquePropTypes",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@here/harp-datasource-protocol!ColorUtils:namespace",
          "docComment": "/**\n * Utilities to convert RGBA colors encoded in custom number (hex) format to THREE.Color objects.\n *\n * The functions provided allows for conversion from and to our custom number based color format, which contains transparency, red, green and blue color channels in a way that each channel occupies 8 bits of resulting number (color format 0xTTRRGGBB). In order to preserve compatibility with THREE.Color class and its hexadecimal color representation, we do not store __alpha__ channel in encoded color's number, but replace it with __transparency__ channel, which is simply opposite to alpha: ```transparency = 0xFF - alpha``` Such channel value is stored on the oldest bits (octet) in the integral color (numeric) value, so it is fully compatible with THREE.Color numerical representation (@see [[THREE.Color.getHex]], [[THREE.Color.setHex]]). See also [[getHexFromRgba]] and [[getRgbaFromHex]] for more info about conversion.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace ColorUtils "
            }
          ],
          "releaseTag": "Public",
          "name": "ColorUtils",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-datasource-protocol!ColorUtils.getAlphaFromHex:function(1)",
              "docComment": "/**\n * Retrieves alpha color channel from hex encoded color value.\n *\n * @see getHexFromRgba.\n *\n * @param hex - The number encoded color value (representable as 0xRRGGBB or 0xTTRRGGBB in hex).\n *\n * @returns The floating point alpha component in <0, 1> range.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getAlphaFromHex(hex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hex",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getAlphaFromHex"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-datasource-protocol!ColorUtils.getHexFromHsl:function(1)",
              "docComment": "/**\n * Encode and convert HSL value to number coded color format (0xRRGGBB).\n *\n * @see getHexFromRgb.\n *\n * @param h - Hue component value between 0 and 1.\n *\n * @param s - Saturation value between 0 and 1.\n *\n * @param l - Lightness channel between 0 and 1.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getHexFromHsl(h: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", s: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", l: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "h",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "s",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "l",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "getHexFromHsl"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-datasource-protocol!ColorUtils.getHexFromRgb:function(1)",
              "docComment": "/**\n * Encodes RGB all color channels in single number with format 0xRRGGBB.\n *\n * All input channels should be in <0, 1> range (inclusively). See also [[getHexFromRgba]] for more information about [[THREE.Color]] compatibility.\n *\n * @note This method is fully compatible with THREE.js color encoding, so you may pass this value directly to THREE.Color c-tor.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getHexFromRgb(r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "getHexFromRgb"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-datasource-protocol!ColorUtils.getHexFromRgba:function(1)",
              "docComment": "/**\n * Encodes RGBA channels in custom number coded format (represented in hex as 0xTTRRGGBB).\n *\n * We do not use direct alpha channel mapping to hex in order to preserve compatibility with THREE.js color format (0xRRGGBB). This is done by encoding transparency (255 - alpha) instead of alpha on the oldest bits, shifted by [[SHIFT_TRANSPARENCY]]. This way simple 0xRRGGBB color is equal to 0x00RRGGBB without transparency and color defining transparency (alpha < 255) is always recognizable by the oldest bit set:\n * ```typescript\n * (color >> SHIFT_TRANSPARENCY) !== 0.\n * ```\n *\n * @note All input components are floating points in <0, 1> range (inclusively).  @note Although method encodes transparency channel in single number value, it is still compatible with THREE.js number based color coding (0xRRGGBB), so you may pass this value to [[THREE.Color]] c-tor, but keep in mind that transparency will be silently ignored.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getHexFromRgba(r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", g: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "g",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "getHexFromRgba"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-datasource-protocol!ColorUtils.getRgbaFromHex:function(1)",
              "docComment": "/**\n * Retrieve RGBA channels separately from number encoded custom color format.\n *\n * Provides an easy way for channels extraction (r, g, b, a) from custom number coded color format.\n *\n * @see getHexFromRgba.\n *\n * @param hex - The number encoded color value (0xRRGGBB or 0xTTRRGGBB in hex).\n *\n * @returns r, g, b, a channels in simple object, where each channel value is saved as floating point from 0 to 1 inclusively.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getRgbaFromHex(hex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", target?: "
                },
                {
                  "kind": "Reference",
                  "text": "RGBA",
                  "canonicalReference": "@here/harp-datasource-protocol!RGBA:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "RGBA",
                  "canonicalReference": "@here/harp-datasource-protocol!RGBA:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hex",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getRgbaFromHex"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-datasource-protocol!ColorUtils.hasAlphaInHex:function(1)",
              "docComment": "/**\n * Determines if number encoded color contains alpha (opacity) defined and different then 255.\n *\n * @param hex - The number encoded color (0xRRGGBB or 0xTTRRGGBB in hex).\n *\n * @returns True if color has transparency defined.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function hasAlphaInHex(hex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hex",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "hasAlphaInHex"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-datasource-protocol!ColorUtils.removeAlphaFromHex:function(1)",
              "docComment": "/**\n * Remove transparency info from the number coded color, makes it compatible with external libs.\n *\n * @see getAlphaFromHex.\n *\n * @param hex - The number encoded color value (representable as 0xRRGGBB or 0xTTRRGGBB in hex).\n *\n * @returns number coded color value representable as 0xRRGGBB in hex.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function removeAlphaFromHex(hex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hex",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "removeAlphaFromHex"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!composeTechniqueTextureName:function(1)",
          "docComment": "/**\n * Compose full texture name for given image name with technique specified. Some techniques allows to add prefix/postfix to icons names specified, this function uses technique information to create fully qualified texture name.\n *\n * @param imageName - base name of the marker icon.\n *\n * @param technique - the technique describing POI or line marker.\n *\n * @returns fully qualified texture name for loading from atlas (without extension).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function composeTechniqueTextureName(imageName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", technique: "
            },
            {
              "kind": "Reference",
              "text": "PoiTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!PoiTechnique:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "LineMarkerTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!LineMarkerTechnique:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "imageName",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            }
          ],
          "name": "composeTechniqueTextureName"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!CubemapSky:interface",
          "docComment": "/**\n * Interface that defines a cubemap sky.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CubemapSky "
            }
          ],
          "releaseTag": "Public",
          "name": "CubemapSky",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!CubemapSky#negativeX:member",
              "docComment": "/**\n * Negative X cube map face.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "negativeX: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "negativeX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!CubemapSky#negativeY:member",
              "docComment": "/**\n * Negative Y cube map face.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "negativeY: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "negativeY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!CubemapSky#negativeZ:member",
              "docComment": "/**\n * Negative Z cube map face.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "negativeZ: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "negativeZ",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!CubemapSky#positiveX:member",
              "docComment": "/**\n * Positive X cube map face.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positiveX: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "positiveX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!CubemapSky#positiveY:member",
              "docComment": "/**\n * Positive Y cube map face.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positiveY: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "positiveY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!CubemapSky#positiveZ:member",
              "docComment": "/**\n * Positive Z cube map face.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positiveZ: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "positiveZ",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!CubemapSky#type:member",
              "docComment": "/**\n * Sky type.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "\"cubemap\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!DataTextureProperties:interface",
          "docComment": "/**\n * Properties of a DataTexture (https://threejs.org/docs/#api/en/textures/DataTexture).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DataTextureProperties "
            }
          ],
          "releaseTag": "Public",
          "name": "DataTextureProperties",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!DataTextureProperties#format:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "format?: "
                },
                {
                  "kind": "Reference",
                  "text": "PixelFormat",
                  "canonicalReference": "@here/harp-datasource-protocol!PixelFormat:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "format",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!DataTextureProperties#height:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!DataTextureProperties#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureDataType",
                  "canonicalReference": "@here/harp-datasource-protocol!TextureDataType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!DataTextureProperties#width:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!DecodedTile:interface",
          "docComment": "/**\n * This object has geometry data in the form of geometries buffers ready to be used by WebGL. These geometries are not `three.js` objects. They are pure data stored as `ArrayBuffer`s and metadata describing these buffers.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DecodedTile "
            }
          ],
          "releaseTag": "Public",
          "name": "DecodedTile",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!DecodedTile#boundingBox:member",
              "docComment": "/**\n * The default bounding box in [[Tile]] is based on the geo box of the tile. For data-sources that have 3d data this is not sufficient so the data-source can provide a more accurate bounding box once the data is decoded.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "boundingBox?: "
                },
                {
                  "kind": "Reference",
                  "text": "OrientedBox3",
                  "canonicalReference": "@here/harp-geoutils!OrientedBox3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "boundingBox",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!DecodedTile#copyrightHolderIds:member",
              "docComment": "/**\n * Tile data Copyright holder identifiers.\n *\n * `id`s should be unique. It is recommended to build them from unique identifiers like registered domain names.\n *\n * @see [[CopyrightInfo]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyrightHolderIds?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "copyrightHolderIds",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!DecodedTile#decodeTime:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "decodeTime?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "decodeTime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!DecodedTile#geometries:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "geometries: "
                },
                {
                  "kind": "Reference",
                  "text": "Geometry",
                  "canonicalReference": "@here/harp-datasource-protocol!Geometry:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "geometries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!DecodedTile#maxGeometryHeight:member",
              "docComment": "/**\n * Data sources not defining a bounding box may define alternatively a maximum geometry height in meters. The bounding box of the resulting tile will be extended to encompass this height.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxGeometryHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxGeometryHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!DecodedTile#pathGeometries:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pathGeometries?: "
                },
                {
                  "kind": "Reference",
                  "text": "PathGeometry",
                  "canonicalReference": "@here/harp-datasource-protocol!PathGeometry:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "pathGeometries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!DecodedTile#poiGeometries:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "poiGeometries?: "
                },
                {
                  "kind": "Reference",
                  "text": "PoiGeometry",
                  "canonicalReference": "@here/harp-datasource-protocol!PoiGeometry:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "poiGeometries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!DecodedTile#techniques:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "techniques: "
                },
                {
                  "kind": "Reference",
                  "text": "IndexedTechnique",
                  "canonicalReference": "@here/harp-datasource-protocol!IndexedTechnique:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "techniques",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!DecodedTile#textGeometries:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textGeometries?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextGeometry",
                  "canonicalReference": "@here/harp-datasource-protocol!TextGeometry:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textGeometries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!DecodedTile#textPathGeometries:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textPathGeometries?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextPathGeometry",
                  "canonicalReference": "@here/harp-datasource-protocol!TextPathGeometry:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textPathGeometries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!DecodedTile#tileInfo:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tileInfo?: "
                },
                {
                  "kind": "Reference",
                  "text": "TileInfo",
                  "canonicalReference": "@here/harp-datasource-protocol!TileInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tileInfo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!Definition:type",
          "docComment": "/**\n * Possible values for `definitions` element of [Theme].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Definition = "
            },
            {
              "kind": "Reference",
              "text": "LiteralValue",
              "canonicalReference": "@here/harp-datasource-protocol!LiteralValue:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "JsonExpr",
              "canonicalReference": "@here/harp-datasource-protocol!JsonExpr:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BoxedDefinition",
              "canonicalReference": "@here/harp-datasource-protocol!BoxedDefinition:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "StyleDeclaration",
              "canonicalReference": "@here/harp-datasource-protocol!StyleDeclaration:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Definition",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!Definitions:interface",
          "docComment": "/**\n * An array of [[Definition]]s.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Definitions "
            }
          ],
          "releaseTag": "Public",
          "name": "Definitions",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@here/harp-datasource-protocol!Definitions:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "Definition",
                  "canonicalReference": "@here/harp-datasource-protocol!Definition:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!DirectionalLight:interface",
          "docComment": "/**\n * Light type: directional.\n *\n * @remarks\n *\n * @defaultSnippets [ { \"label\": \"New Directional Light\", \"description\": \"Adds a new Directional Light\", \"body\": { \"type\": \"directional\", \"name\": \"${1:directional-light$:1}\", \"color\": \"#${2:fff}\", \"intensity\": \"^${3:1}\", \"direction\": { \"x\": \"^${4:1}\", \"y\": \"^${5:0}\", \"z\": \"^${6:0}\" } } } ]\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DirectionalLight extends "
            },
            {
              "kind": "Reference",
              "text": "BaseLight",
              "canonicalReference": "@here/harp-datasource-protocol!BaseLight:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "DirectionalLight",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!DirectionalLight#castShadow:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "castShadow?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "castShadow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!DirectionalLight#color:member",
              "docComment": "/**\n * @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!DirectionalLight#direction:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "direction: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "direction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!DirectionalLight#intensity:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "intensity: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "intensity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!DirectionalLight#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "\"directional\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type",
          "docComment": "/**\n * Decorate property type with possible dynamic variants.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DynamicProperty<T> = "
            },
            {
              "kind": "Content",
              "text": "T | "
            },
            {
              "kind": "Reference",
              "text": "JsonExpr",
              "canonicalReference": "@here/harp-datasource-protocol!JsonExpr:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "InterpolatedPropertyDefinition",
              "canonicalReference": "@here/harp-datasource-protocol!InterpolatedPropertyDefinition:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DynamicProperty",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-datasource-protocol!Env:class",
          "docComment": "/**\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Env "
            }
          ],
          "releaseTag": "Public",
          "name": "Env",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!Env.isEnv:member(1)",
              "docComment": "/**\n * Returns `true` if the given object is an instance of [[Env]].\n *\n * @param object - The object to test.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isEnv(object: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "object",
                  "canonicalReference": "@here/harp-datasource-protocol!~object"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "Env",
                  "canonicalReference": "@here/harp-datasource-protocol!Env:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isEnv"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!Env#lookup:member(1)",
              "docComment": "/**\n * Returns property in [[Env]] by name.\n *\n * @param name - Name of property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lookup(_name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Value",
                  "canonicalReference": "@here/harp-datasource-protocol!Value:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "_name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "lookup"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!Env#unmap:member(1)",
              "docComment": "/**\n * Return an object containing all properties of this environment. (Here: empty object).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unmap(): "
                },
                {
                  "kind": "Reference",
                  "text": "ValueMap",
                  "canonicalReference": "@here/harp-datasource-protocol!ValueMap:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "unmap"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!EqualityOp:type",
          "docComment": "/**\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EqualityOp = "
            },
            {
              "kind": "Content",
              "text": "\"~=\" | \"^=\" | \"$=\" | \"==\" | \"!=\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EqualityOp",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-datasource-protocol!Expr:class",
          "docComment": "/**\n * Abstract class defining a shape of a [[Theme]]'s expression\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class Expr "
            }
          ],
          "releaseTag": "Public",
          "name": "Expr",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!Expr#accept:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract accept<Result, Context>(visitor: "
                },
                {
                  "kind": "Reference",
                  "text": "ExprVisitor",
                  "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor:interface"
                },
                {
                  "kind": "Content",
                  "text": "<Result, Context>"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "visitor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Result",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "Context",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "accept"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!Expr#dependencies:member(1)",
              "docComment": "/**\n * Gets the dependencies of this [[Expr]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dependencies(): "
                },
                {
                  "kind": "Reference",
                  "text": "ExprDependencies",
                  "canonicalReference": "@here/harp-datasource-protocol!ExprDependencies:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "dependencies"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!Expr#evaluate:member(1)",
              "docComment": "/**\n * Evaluate an expression returning a [[Value]] object.\n *\n * @param env - The [[Env]] used to lookup symbols.\n *\n * @param scope - The evaluation scope. Defaults to [[ExprScope.Value]].\n *\n * @param cache - A cache of previously computed results.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "evaluate(env: "
                },
                {
                  "kind": "Reference",
                  "text": "Env",
                  "canonicalReference": "@here/harp-datasource-protocol!Env:class"
                },
                {
                  "kind": "Content",
                  "text": ", scope?: "
                },
                {
                  "kind": "Reference",
                  "text": "ExprScope",
                  "canonicalReference": "@here/harp-datasource-protocol!ExprScope:enum"
                },
                {
                  "kind": "Content",
                  "text": ", cache?: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Value",
                  "canonicalReference": "@here/harp-datasource-protocol!Value:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Value",
                  "canonicalReference": "@here/harp-datasource-protocol!Value:type"
                },
                {
                  "kind": "Content",
                  "text": " | never"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "env",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "scope",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "cache",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 11
                  }
                }
              ],
              "name": "evaluate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!Expr#exprIsDynamic:member(1)",
              "docComment": "/**\n * Update the dynamic state of this [[Expr]].\n *\n * [[exprIsDynamic]] must never be called directly.\n *\n * @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected abstract exprIsDynamic(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "exprIsDynamic"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!Expr.fromJSON:member(1)",
              "docComment": "/**\n * Parse expression in JSON form.\n *\n * If `definitions` are defined, then references (`['ref', name]`) are resolved.\n *\n * Pass `definitionExprCache` to reuse `Expr` instances created from definitions across many `fromJSON` calls.\n *\n * @param node - expression in JSON format to parse\n *\n * @param definitions - optional set of definitions needed definition resolved by `ref` operator\n *\n * @param definitionExprCache - optional cache of `Expr` instances derived from `definitions`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromJSON(node: "
                },
                {
                  "kind": "Reference",
                  "text": "JsonValue",
                  "canonicalReference": "@here/harp-datasource-protocol!JsonValue:type"
                },
                {
                  "kind": "Content",
                  "text": ", definitions?: "
                },
                {
                  "kind": "Reference",
                  "text": "Definitions",
                  "canonicalReference": "@here/harp-datasource-protocol!Definitions:interface"
                },
                {
                  "kind": "Content",
                  "text": ", definitionExprCache?: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "node",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "definitions",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "definitionExprCache",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  }
                }
              ],
              "name": "fromJSON"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!Expr#instantiate:member(1)",
              "docComment": "/**\n * Instantiates this [[Expr]] by resolving references to the `get` and `has` operator using the given instantiation context.\n *\n * @param context - The [[InstantationContext]] used to resolve names.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "instantiate(context: "
                },
                {
                  "kind": "Reference",
                  "text": "InstantiationContext",
                  "canonicalReference": "@here/harp-datasource-protocol!InstantiationContext:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "instantiate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!Expr#intern:member(1)",
              "docComment": "/**\n * Create a unique object that is structurally equivalent to this [[Expr]].\n *\n * @param pool - The [[ExprPool]] used to create a unique equivalent object of this [[Expr]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "intern(pool: "
                },
                {
                  "kind": "Reference",
                  "text": "ExprPool",
                  "canonicalReference": "@here/harp-datasource-protocol!ExprPool:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "pool",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "intern"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!Expr#isDynamic:member(1)",
              "docComment": "/**\n * Returns `true` if a dynamic execution context is required to evaluate this [[Expr]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isDynamic(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isDynamic"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!Expr.isExpr:member(1)",
              "docComment": "/**\n * Tests of given value is an [[Expr]].\n *\n * @param value - The object to test.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isExpr(value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "value",
                  "canonicalReference": "@here/harp-datasource-protocol!~value"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isExpr"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!Expr.parse:member(1)",
              "docComment": "/**\n * Creates an expression from the given `code`.\n *\n * @deprecated\n *\n * @param code - The code to parse.\n *\n * @returns The parsed [[Expr]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static parse(code: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": " | never"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "code",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "parse"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!Expr#toJSON:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toJSON(): "
                },
                {
                  "kind": "Reference",
                  "text": "JsonValue",
                  "canonicalReference": "@here/harp-datasource-protocol!JsonValue:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toJSON"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-datasource-protocol!ExprDependencies:class",
          "docComment": "/**\n * The dependencies of an [[Expr]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ExprDependencies "
            }
          ],
          "releaseTag": "Public",
          "name": "ExprDependencies",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!ExprDependencies#featureState:member",
              "docComment": "/**\n * `true` if the expression depends on the feature state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "featureState?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "featureState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!ExprDependencies#properties:member",
              "docComment": "/**\n * The properties needed to evaluate the [[Expr]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly properties: "
                },
                {
                  "kind": "Reference",
                  "text": "Set",
                  "canonicalReference": "!Set:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "properties",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!ExprDependencies#volatile:member",
              "docComment": "/**\n * `true` if this expression cannot be cached.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "volatile?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "volatile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@here/harp-datasource-protocol!ExprScope:enum",
          "docComment": "/**\n * The evaluation scope of an [[Expr]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ExprScope "
            }
          ],
          "releaseTag": "Public",
          "name": "ExprScope",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!ExprScope.Condition:member",
              "docComment": "/**\n * The scope of an [[Expr]] used in a [[Technique]] `when` condition.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Condition = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Condition",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!ExprScope.Dynamic:member",
              "docComment": "/**\n * The scope of an [[Expr]] used as dynamic property attribute value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Dynamic = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "Dynamic",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!ExprScope.Value:member",
              "docComment": "/**\n * The scope of an [[Expr]] used as value of an attribute.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Value = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Value",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ExprVisitor<Result, Context> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "Result",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Context",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ExprVisitor",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor#visitBooleanLiteralExpr:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visitBooleanLiteralExpr(expr: "
                },
                {
                  "kind": "Reference",
                  "text": "BooleanLiteralExpr",
                  "canonicalReference": "@here/harp-datasource-protocol!BooleanLiteralExpr:class"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expr",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "visitBooleanLiteralExpr"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor#visitCallExpr:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visitCallExpr(expr: "
                },
                {
                  "kind": "Reference",
                  "text": "CallExpr",
                  "canonicalReference": "@here/harp-datasource-protocol!CallExpr:class"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expr",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "visitCallExpr"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor#visitCaseExpr:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visitCaseExpr(expr: "
                },
                {
                  "kind": "Reference",
                  "text": "CaseExpr",
                  "canonicalReference": "@here/harp-datasource-protocol!CaseExpr:class"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expr",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "visitCaseExpr"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor#visitHasAttributeExpr:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visitHasAttributeExpr(expr: "
                },
                {
                  "kind": "Reference",
                  "text": "HasAttributeExpr",
                  "canonicalReference": "@here/harp-datasource-protocol!HasAttributeExpr:class"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expr",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "visitHasAttributeExpr"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor#visitInterpolateExpr:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visitInterpolateExpr(expr: "
                },
                {
                  "kind": "Reference",
                  "text": "InterpolateExpr",
                  "canonicalReference": "@here/harp-datasource-protocol!InterpolateExpr:class"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expr",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "visitInterpolateExpr"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor#visitMatchExpr:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visitMatchExpr(expr: "
                },
                {
                  "kind": "Reference",
                  "text": "MatchExpr",
                  "canonicalReference": "@here/harp-datasource-protocol!MatchExpr:class"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expr",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "visitMatchExpr"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor#visitNullLiteralExpr:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visitNullLiteralExpr(expr: "
                },
                {
                  "kind": "Reference",
                  "text": "NullLiteralExpr",
                  "canonicalReference": "@here/harp-datasource-protocol!NullLiteralExpr:class"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expr",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "visitNullLiteralExpr"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor#visitNumberLiteralExpr:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visitNumberLiteralExpr(expr: "
                },
                {
                  "kind": "Reference",
                  "text": "NumberLiteralExpr",
                  "canonicalReference": "@here/harp-datasource-protocol!NumberLiteralExpr:class"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expr",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "visitNumberLiteralExpr"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor#visitObjectLiteralExpr:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visitObjectLiteralExpr(expr: "
                },
                {
                  "kind": "Reference",
                  "text": "ObjectLiteralExpr",
                  "canonicalReference": "@here/harp-datasource-protocol!ObjectLiteralExpr:class"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expr",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "visitObjectLiteralExpr"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor#visitStepExpr:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visitStepExpr(expr: "
                },
                {
                  "kind": "Reference",
                  "text": "StepExpr",
                  "canonicalReference": "@here/harp-datasource-protocol!StepExpr:class"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expr",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "visitStepExpr"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor#visitStringLiteralExpr:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visitStringLiteralExpr(expr: "
                },
                {
                  "kind": "Reference",
                  "text": "StringLiteralExpr",
                  "canonicalReference": "@here/harp-datasource-protocol!StringLiteralExpr:class"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expr",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "visitStringLiteralExpr"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor#visitVarExpr:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visitVarExpr(expr: "
                },
                {
                  "kind": "Reference",
                  "text": "VarExpr",
                  "canonicalReference": "@here/harp-datasource-protocol!VarExpr:class"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expr",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "visitVarExpr"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonStyle:type",
          "docComment": "/**\n * Style used to draw a geometry as an extruded polygon, for example extruded buildings.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ExtrudedPolygonStyle = "
            },
            {
              "kind": "Reference",
              "text": "BaseStyle",
              "canonicalReference": "@here/harp-datasource-protocol!BaseStyle:type"
            },
            {
              "kind": "Content",
              "text": "<\"extruded-polygon\", "
            },
            {
              "kind": "Reference",
              "text": "ExtrudedPolygonTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ExtrudedPolygonStyle",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechnique:interface",
          "docComment": "/**\n * Runtime representation of [[ExtrudedPolygonStyle]] as parsed by [[StyleSetEvaluator]]. For technique parameters see [[ExtrudedPolygonTechniqueParams]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ExtrudedPolygonTechnique extends "
            },
            {
              "kind": "Reference",
              "text": "MakeTechniqueAttrs",
              "canonicalReference": "@here/harp-datasource-protocol!MakeTechniqueAttrs:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ExtrudedPolygonTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ExtrudedPolygonTechnique",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechnique#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "\"extruded-polygon\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechniqueParams:interface",
          "docComment": "/**\n * Technique used to draw a geometry as an extruded polygon, for example extruded buildings.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ExtrudedPolygonTechniqueParams extends "
            },
            {
              "kind": "Reference",
              "text": "StandardTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ExtrudedPolygonTechniqueParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechniqueParams#animateExtrusion:member",
              "docComment": "/**\n * Animate the extrusion of the buildings if set to `true`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "animateExtrusion?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "animateExtrusion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechniqueParams#animateExtrusionDuration:member",
              "docComment": "/**\n * Duration of the building's extrusion in milliseconds\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "animateExtrusionDuration?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "animateExtrusionDuration",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechniqueParams#boundaryWalls:member",
              "docComment": "/**\n * If `false`, wall geometry will not be added along the tile boundaries.  @default `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "boundaryWalls?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "boundaryWalls",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechniqueParams#constantHeight:member",
              "docComment": "/**\n * If `true`, the height of the extruded buildings will not be modified by the mercator projection distortion that happens around the poles.\n *\n * @default `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constantHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "constantHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechniqueParams#defaultColor:member",
              "docComment": "/**\n * Default color used if feature doesn't provide color attribute and [[MapEnv]] did not return it too.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleColor",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleColor:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechniqueParams#defaultHeight:member",
              "docComment": "/**\n * In some data sources, for example Tilezen, building extrusion information might be missing. This attribute allows to define a default height of an extruded polygon in the theme.\n *\n * @deprecated\n *\n * use [[height]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechniqueParams#enableDepthPrePass:member",
              "docComment": "/**\n * Control rendering of depth prepass before the actual geometry.\n *\n * Depth prepass is a method to render translucent meshes, hence only the visible front faces of a mesh are actually rendered, removing artifacts caused by blending with internal faces of the mesh. This method is used for drawing translucent buildings over map background.\n *\n * By default, each [[DataSource]] determines how/if enable the depth pre-pass. A value of `false` forcefully disables depth prepass.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enableDepthPrePass?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enableDepthPrePass",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechniqueParams#floorHeight:member",
              "docComment": "/**\n * Height of \"floor\" of extruded polygon in world units of extruded polygon.\n *\n * Usually, unique per feature, so defaults to `[\"number\", [\"get\", \"min_height\"], 0]`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "floorHeight?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "floorHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechniqueParams#footprint:member",
              "docComment": "/**\n * Renders the footprint lines if set to 'true'.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "footprint?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "footprint",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechniqueParams#height:member",
              "docComment": "/**\n * Height above ground in world units of extruded polygon.\n *\n * Usually, unique per feature, so defaults to `[\"get\", \"height\"]`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechniqueParams#lineColor:member",
              "docComment": "/**\n * Fill color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleColor",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleColor:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lineColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechniqueParams#lineColorMix:member",
              "docComment": "/**\n * Mix value between the lineColor(0.0) and the geometry's vertex colors(1.0).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineColorMix?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lineColorMix",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechniqueParams#lineFadeFar:member",
              "docComment": "/**\n * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become transparent. A value of <= 0.0 disables fading.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineFadeFar?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lineFadeFar",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechniqueParams#lineFadeNear:member",
              "docComment": "/**\n * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start fading out.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineFadeNear?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lineFadeNear",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechniqueParams#lineWidth:member",
              "docComment": "/**\n * Width of the lines. Currently limited to the [0, 1] range.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineWidth: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lineWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechniqueParams#maxSlope:member",
              "docComment": "/**\n * Set to a negative value to remove all the vertical lines, and to a value between 0.0 and 1.0 to modulate the amount of vertical lines rendered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxSlope?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxSlope",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!Feature:interface",
          "docComment": "/**\n * Represents \"Feature\" GeoJSON object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Feature "
            }
          ],
          "releaseTag": "Public",
          "name": "Feature",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Feature#bbox:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bbox?: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bbox",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Feature#geometry:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "geometry: "
                },
                {
                  "kind": "Reference",
                  "text": "FeatureGeometry",
                  "canonicalReference": "@here/harp-datasource-protocol!FeatureGeometry:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryCollection",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryCollection:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "geometry",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Feature#id:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Feature#properties:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "properties?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "properties",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Feature#title:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Feature#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "\"Feature\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!FeatureCollection:interface",
          "docComment": "/**\n * Represents \"FeatureCollection\" GeoJSON object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FeatureCollection "
            }
          ],
          "releaseTag": "Public",
          "name": "FeatureCollection",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!FeatureCollection#features:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "features: "
                },
                {
                  "kind": "Reference",
                  "text": "Feature",
                  "canonicalReference": "@here/harp-datasource-protocol!Feature:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "features",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!FeatureCollection#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "\"FeatureCollection\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!FeatureDetails:interface",
          "docComment": "/**\n * Feature details contains `feature.id`, `feature.properties.featureClass` which provides possibility to define style in theme for particular feature.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FeatureDetails "
            }
          ],
          "releaseTag": "Public",
          "name": "FeatureDetails",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!FeatureDetails#featureClass:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "featureClass?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "featureClass",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!FeatureDetails#featureId:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "featureId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "featureId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!FeatureGeometry:type",
          "docComment": "/**\n * Represents \"geometry\" property of \"Feature\" GeoJSON object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type FeatureGeometry = "
            },
            {
              "kind": "Reference",
              "text": "Point",
              "canonicalReference": "@here/harp-datasource-protocol!Point:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "MultiPoint",
              "canonicalReference": "@here/harp-datasource-protocol!MultiPoint:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "LineString",
              "canonicalReference": "@here/harp-datasource-protocol!LineString:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "MultiLineString",
              "canonicalReference": "@here/harp-datasource-protocol!MultiLineString:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Polygon",
              "canonicalReference": "@here/harp-datasource-protocol!Polygon:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "MultiPolygon",
              "canonicalReference": "@here/harp-datasource-protocol!MultiPolygon:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "FeatureGeometry",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!FillStyle:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type FillStyle = "
            },
            {
              "kind": "Reference",
              "text": "BaseStyle",
              "canonicalReference": "@here/harp-datasource-protocol!BaseStyle:type"
            },
            {
              "kind": "Content",
              "text": "<\"fill\", "
            },
            {
              "kind": "Reference",
              "text": "FillTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!FillTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "FillStyle",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!FillTechnique:interface",
          "docComment": "/**\n * Runtime representation of [[FillStyle]] as parsed by [[StyleSetEvaluator]]. For technique parameters see [[FillTechniqueParams]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FillTechnique extends "
            },
            {
              "kind": "Reference",
              "text": "MakeTechniqueAttrs",
              "canonicalReference": "@here/harp-datasource-protocol!MakeTechniqueAttrs:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FillTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!FillTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "FillTechnique",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!FillTechnique#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "\"fill\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!FillTechniqueParams:interface",
          "docComment": "/**\n * Technique used to draw filled polygons.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FillTechniqueParams extends "
            },
            {
              "kind": "Reference",
              "text": "BaseTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "PolygonalTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!PolygonalTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "FillTechniqueParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!FillTechniqueParams#color:member",
              "docComment": "/**\n * Fill color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleColor",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleColor:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!FillTechniqueParams#lineWidth:member",
              "docComment": "/**\n * Width of the lines. Currently limited to the [0, 1] range.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineWidth?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lineWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!FillTechniqueParams#opacity:member",
              "docComment": "/**\n * For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully opaque.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "opacity?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "opacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!FillTechniqueParams#transparent:member",
              "docComment": "/**\n * Set to `true` if line should appear transparent. Rendering transparent lines may come with a slight performance impact.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transparent?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "transparent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!FillTechniqueParams#wireframe:member",
              "docComment": "/**\n * A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wireframe?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "wireframe",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!Fog:interface",
          "docComment": "/**\n * Interface that defines the options to configure fog.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Fog "
            }
          ],
          "releaseTag": "Public",
          "name": "Fog",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Fog#color:member",
              "docComment": "/**\n * Fog's color.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Fog#startRatio:member",
              "docComment": "/**\n * Distance ratio to far plane at which the linear fog begins.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startRatio: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "startRatio",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!FontCatalogConfig:interface",
          "docComment": "/**\n * Fonts used for all text related rendering.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FontCatalogConfig "
            }
          ],
          "releaseTag": "Public",
          "name": "FontCatalogConfig",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!FontCatalogConfig#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!FontCatalogConfig#url:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!GeoJson:type",
          "docComment": "/**\n * Represents a GeoJSON object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type GeoJson = "
            },
            {
              "kind": "Reference",
              "text": "FeatureGeometry",
              "canonicalReference": "@here/harp-datasource-protocol!FeatureGeometry:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "GeometryCollection",
              "canonicalReference": "@here/harp-datasource-protocol!GeometryCollection:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Feature",
              "canonicalReference": "@here/harp-datasource-protocol!Feature:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "FeatureCollection",
              "canonicalReference": "@here/harp-datasource-protocol!FeatureCollection:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GeoJson",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!Geometry:interface",
          "docComment": "/**\n * Structured clone compliant version of a `three.js` geometry object, consisting of buffers with metadata for map features and objects for example roads, trees or parks.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Geometry "
            }
          ],
          "releaseTag": "Public",
          "name": "Geometry",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Geometry#attachments:member",
              "docComment": "/**\n * Optional [[Array]] of [[Attachment]]s.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "attachments?: "
                },
                {
                  "kind": "Reference",
                  "text": "Attachment",
                  "canonicalReference": "@here/harp-datasource-protocol!Attachment:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "attachments",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Geometry#edgeIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "edgeIndex?: "
                },
                {
                  "kind": "Reference",
                  "text": "BufferAttribute",
                  "canonicalReference": "@here/harp-datasource-protocol!BufferAttribute:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "edgeIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Geometry#featureStarts:member",
              "docComment": "/**\n * Optional sorted list of feature start indices. The indices point into the index attribute. Feature i starts at featureStarts[i] and ends at featureStarts[i+1]-1, except for the last feature, which ends at index[index.length-1].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "featureStarts?: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "featureStarts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Geometry#groups:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "groups: "
                },
                {
                  "kind": "Reference",
                  "text": "Group",
                  "canonicalReference": "@here/harp-datasource-protocol!Group:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "groups",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Geometry#index:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "index?: "
                },
                {
                  "kind": "Reference",
                  "text": "BufferAttribute",
                  "canonicalReference": "@here/harp-datasource-protocol!BufferAttribute:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "index",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Geometry#interleavedVertexAttributes:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interleavedVertexAttributes?: "
                },
                {
                  "kind": "Reference",
                  "text": "InterleavedBufferAttribute",
                  "canonicalReference": "@here/harp-datasource-protocol!InterleavedBufferAttribute:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "interleavedVertexAttributes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Geometry#objInfos:member",
              "docComment": "/**\n * Optional array of objects. It can be used to pass user data from the geometry to the mesh.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "objInfos?: "
                },
                {
                  "kind": "Reference",
                  "text": "AttributeMap",
                  "canonicalReference": "@here/harp-datasource-protocol!AttributeMap:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "objInfos",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Geometry#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryType",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Geometry#uuid:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "uuid?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "uuid",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Geometry#vertexAttributes:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "vertexAttributes?: "
                },
                {
                  "kind": "Reference",
                  "text": "BufferAttribute",
                  "canonicalReference": "@here/harp-datasource-protocol!BufferAttribute:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "vertexAttributes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!GeometryCollection:interface",
          "docComment": "/**\n * Represents \"GeometryCollection\" GeoJSON geometry object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GeometryCollection "
            }
          ],
          "releaseTag": "Public",
          "name": "GeometryCollection",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!GeometryCollection#geometries:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "geometries: "
                },
                {
                  "kind": "Reference",
                  "text": "FeatureGeometry",
                  "canonicalReference": "@here/harp-datasource-protocol!FeatureGeometry:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "geometries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!GeometryCollection#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "\"GeometryCollection\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!GeometryKind:type",
          "docComment": "/**\n * Geometry kind used for use by [[BaseTechniqueParams.kind]].\n *\n * @remarks\n *\n * The kind of geometry is used to group objects together, allowing the group to be hidden or displayed.\n *\n * Any string can be used to specify the kind of the technique in a style in the theme file. Is is suggested to specify multiple kinds for specific types of data. For a highway, the following list of kinds is suggested:\n * ```json\n *    [\"line\", \"road\", \"road:highway\"]\n * ```\n *\n * If it is a tunnel for a highway:\n * ```json\n *    [\"line\", \"road\", \"road:highway\", \"tunnel\", \"road:tunnel\", \"road:highway:tunnel\"]\n * ```\n *\n * If specified in this way, specific types of data (here: highway roads) can be enabled and/or disabled.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type GeometryKind = "
            },
            {
              "kind": "Content",
              "text": "string | "
            },
            {
              "kind": "Reference",
              "text": "StandardGeometryKind",
              "canonicalReference": "@here/harp-datasource-protocol!StandardGeometryKind:enum"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GeometryKind",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-datasource-protocol!GeometryKind:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "GeometryKind: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "StandardGeometryKind",
              "canonicalReference": "@here/harp-datasource-protocol!StandardGeometryKind:enum"
            }
          ],
          "releaseTag": "Public",
          "name": "GeometryKind",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-datasource-protocol!GeometryKindSet:class",
          "docComment": "/**\n * A set of [[GeometryKind]]s.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class GeometryKindSet extends "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "GeometryKindSet",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!GeometryKindSet#hasIntersection:member(1)",
              "docComment": "/**\n * Return `true` if the Set intersects Set 'set'.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasIntersection(set: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "set",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "hasIntersection"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!GeometryKindSet#hasOrIntersects:member(1)",
              "docComment": "/**\n * Return `true` if the Set either intersects Set 'set' (if set is a Set), of has element 'set' if set is not a Set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasOrIntersects(set: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "set",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "hasOrIntersects"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!GeometryKindSet#hasOrIntersectsArray:member(1)",
              "docComment": "/**\n * Return `true` if this set and the array of elements share at least a single element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasOrIntersectsArray(subset: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "subset",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "hasOrIntersectsArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!GeometryKindSet#isSuperset:member(1)",
              "docComment": "/**\n * Return `true` if the Set is a superset of the set 'subset'.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isSuperset(subset: "
                },
                {
                  "kind": "Reference",
                  "text": "Set",
                  "canonicalReference": "!Set:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "subset",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "isSuperset"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@here/harp-datasource-protocol!GeometryType:enum",
          "docComment": "/**\n * Geometry types supported by [[Geometry]] objects.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum GeometryType "
            }
          ],
          "releaseTag": "Public",
          "name": "GeometryType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!GeometryType.ExtrudedLine:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ExtrudedLine = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "releaseTag": "Public",
              "name": "ExtrudedLine",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!GeometryType.ExtrudedPolygon:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ExtrudedPolygon = "
                },
                {
                  "kind": "Content",
                  "text": "8"
                }
              ],
              "releaseTag": "Public",
              "name": "ExtrudedPolygon",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!GeometryType.Line:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Line = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "Line",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!GeometryType.Object3D:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Object3D = "
                },
                {
                  "kind": "Content",
                  "text": "9"
                }
              ],
              "releaseTag": "Public",
              "name": "Object3D",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!GeometryType.Other:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Other = "
                },
                {
                  "kind": "Content",
                  "text": "1000"
                }
              ],
              "releaseTag": "Public",
              "name": "Other",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!GeometryType.Point:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Point = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Point",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!GeometryType.Polygon:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Polygon = "
                },
                {
                  "kind": "Content",
                  "text": "7"
                }
              ],
              "releaseTag": "Public",
              "name": "Polygon",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!GeometryType.SolidLine:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SolidLine = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "SolidLine",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!GeometryType.Text:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Text = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Public",
              "name": "Text",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!GeometryType.TextPath:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TextPath = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "releaseTag": "Public",
              "name": "TextPath",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!GeometryType.Unspecified:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Unspecified = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Unspecified",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!getArrayConstructor:function(1)",
          "docComment": "/**\n * Returns an array with the data type specified as parameter.\n *\n * @param attr - specifies which type of data is being stored in the array\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getArrayConstructor(attr: "
            },
            {
              "kind": "Reference",
              "text": "BufferElementType",
              "canonicalReference": "@here/harp-datasource-protocol!BufferElementType:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Float32ArrayConstructor",
              "canonicalReference": "!Float32ArrayConstructor:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint8ArrayConstructor",
              "canonicalReference": "!Uint8ArrayConstructor:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint16ArrayConstructor",
              "canonicalReference": "!Uint16ArrayConstructor:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Uint32ArrayConstructor",
              "canonicalReference": "!Uint32ArrayConstructor:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Int8ArrayConstructor",
              "canonicalReference": "!Int8ArrayConstructor:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Int16ArrayConstructor",
              "canonicalReference": "!Int16ArrayConstructor:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Int32ArrayConstructor",
              "canonicalReference": "!Int32ArrayConstructor:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 16
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "attr",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "getArrayConstructor"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!getFeatureId:function(1)",
          "docComment": "/**\n * @returns Feature id from the provided attribute map.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getFeatureId(attributeMap: "
            },
            {
              "kind": "Reference",
              "text": "AttributeMap",
              "canonicalReference": "@here/harp-datasource-protocol!AttributeMap:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "attributeMap",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "name": "getFeatureId"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!getFeatureName:function(1)",
          "docComment": "/**\n * Determine the name of (OMV) feature. It implements the special handling required to determine the text content of a feature from its tags, which are passed in as the `env`.\n *\n * @param env - Environment containing the tags from the (OMV) feature.\n *\n * @param useAbbreviation - `true` to use the abbreviation if available.\n *\n * @param useIsoCode - `true` to use the tag \"iso_code\".\n *\n * @param languages - List of languages to use, for example: Specify \"en\" to use the tag \"name_en\" as the text of the string. Order reflects priority.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getFeatureName(env: "
            },
            {
              "kind": "Reference",
              "text": "Env",
              "canonicalReference": "@here/harp-datasource-protocol!Env:class"
            },
            {
              "kind": "Content",
              "text": ", basePropName: "
            },
            {
              "kind": "Content",
              "text": "string | undefined"
            },
            {
              "kind": "Content",
              "text": ", useAbbreviation?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", useIsoCode?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ", languages?: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "env",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "basePropName",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "useAbbreviation",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "useIsoCode",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "languages",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "name": "getFeatureName"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!getFeatureText:function(1)",
          "docComment": "/**\n * Determine the text string of the map feature. It implements the special handling required to determine the text content of a feature from its tags, which are passed in as the `env`.\n *\n * @param feature - Feature, including properties from the (OMV) feature.\n *\n * @param technique - technique defining how text should be created from feature\n *\n * @param languages - List of languages to use, for example: Specify \"en\" to use the tag \"name_en\" as the text of the string. Order reflects priority.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getFeatureText(context: "
            },
            {
              "kind": "Reference",
              "text": "Env",
              "canonicalReference": "@here/harp-datasource-protocol!Env:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "AttrEvaluationContext",
              "canonicalReference": "@here/harp-datasource-protocol!AttrEvaluationContext:interface"
            },
            {
              "kind": "Content",
              "text": ", technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": ", languages?: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "context",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "languages",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "name": "getFeatureText"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!getProjection:function(1)",
          "docComment": "/**\n * Returns the projection object specified in the parameter.\n *\n * @param projectionName - string describing projection to be used\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getProjection(projectionName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Projection",
              "canonicalReference": "@here/harp-geoutils!Projection:class"
            },
            {
              "kind": "Content",
              "text": " | never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "projectionName",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "getProjection"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!getProjectionName:function(1)",
          "docComment": "/**\n * String with the projection's name.\n *\n * @param projection - `Projection` object containing the name of the projection to retrieve\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getProjectionName(projection: "
            },
            {
              "kind": "Reference",
              "text": "Projection",
              "canonicalReference": "@here/harp-geoutils!Projection:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string | never"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "projection",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "getProjectionName"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!getPropertyValue:function(1)",
          "docComment": "/**\n * Get the value of the specified property in given `env`.\n *\n * @param property - Property of a technique.\n *\n * @param env - The [[Env]] used to evaluate the property\n *\n * @param cache - An optional expression cache.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getPropertyValue(property: "
            },
            {
              "kind": "Reference",
              "text": "Value",
              "canonicalReference": "@here/harp-datasource-protocol!Value:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", env: "
            },
            {
              "kind": "Reference",
              "text": "Env",
              "canonicalReference": "@here/harp-datasource-protocol!Env:class"
            },
            {
              "kind": "Content",
              "text": ", cache?: "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Expr",
              "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Value",
              "canonicalReference": "@here/harp-datasource-protocol!Value:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "property",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "env",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            },
            {
              "parameterName": "cache",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 12
              }
            }
          ],
          "name": "getPropertyValue"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!GradientSky:interface",
          "docComment": "/**\n * Interface that defines a procedural gradient sky.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GradientSky "
            }
          ],
          "releaseTag": "Public",
          "name": "GradientSky",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!GradientSky#bottomColor:member",
              "docComment": "/**\n * Color of bottom part of the gradient.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bottomColor: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bottomColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!GradientSky#groundColor:member",
              "docComment": "/**\n * Color of the ground plane.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "groundColor: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "groundColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!GradientSky#monomialPower:member",
              "docComment": "/**\n * Texture's gradient power.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "monomialPower?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "monomialPower",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!GradientSky#topColor:member",
              "docComment": "/**\n * Color of the upper part of the gradient.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "topColor: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "topColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!GradientSky#type:member",
              "docComment": "/**\n * Sky type.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "\"gradient\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!Group:interface",
          "docComment": "/**\n * Structured clone compliant WebGL group object and its metadata. Its purpose is to make working with groups of objects easier.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Group "
            }
          ],
          "releaseTag": "Public",
          "name": "Group",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Group#count:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "count: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "count",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Group#createdOffsets:member",
              "docComment": "/**\n * Contains tile offsets if its [[Geometry]] has been created.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createdOffsets?: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "createdOffsets",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Group#start:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "start: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "start",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Group#technique:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "technique: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "technique",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-datasource-protocol!HasAttributeExpr:class",
          "docComment": "/**\n * A has expression with an attribute, for example `has(ref)`.  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class HasAttributeExpr extends "
            },
            {
              "kind": "Reference",
              "text": "Expr",
              "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "HasAttributeExpr",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-datasource-protocol!HasAttributeExpr:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `HasAttributeExpr` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!HasAttributeExpr#accept:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accept<Result, Context>(visitor: "
                },
                {
                  "kind": "Reference",
                  "text": "ExprVisitor",
                  "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor:interface"
                },
                {
                  "kind": "Content",
                  "text": "<Result, Context>"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "visitor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Result",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "Context",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "accept"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!HasAttributeExpr#exprIsDynamic:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected exprIsDynamic(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "exprIsDynamic"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!HasAttributeExpr#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!HeightBasedColors:interface",
          "docComment": "/**\n * Interface containing the definition of different colors to be used at different heights with the [[TerrainTechnique]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HeightBasedColors "
            }
          ],
          "releaseTag": "Public",
          "name": "HeightBasedColors",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!HeightBasedColors#colorArray:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "colorArray: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "colorArray",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!HeightBasedColors#heightArray:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "heightArray: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "heightArray",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!IBloomEffect:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IBloomEffect "
            }
          ],
          "releaseTag": "Public",
          "name": "IBloomEffect",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!IBloomEffect#enabled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!IBloomEffect#radius:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "radius: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "radius",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!IBloomEffect#strength:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "strength: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "strength",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!IBloomEffect#threshold:member",
              "docComment": "/**\n * Pixel's brightness threshold between 0 and 1, from which the bloom should apply.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "threshold: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "threshold",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!ImageDefinition:interface",
          "docComment": "/**\n * Define an image (e.g. icon).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ImageDefinition "
            }
          ],
          "releaseTag": "Public",
          "name": "ImageDefinition",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ImageDefinition#atlas:member",
              "docComment": "/**\n * Url of JSON file containing the texture atlas\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "atlas?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "atlas",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ImageDefinition#preload:member",
              "docComment": "/**\n * `true` to start loading at init tile, `false` to lazily wait until required.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "preload: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "preload",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ImageDefinition#url:member",
              "docComment": "/**\n * Url to load content from.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!ImageDefinitions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ImageDefinitions "
            }
          ],
          "releaseTag": "Public",
          "name": "ImageDefinitions",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ImageDefinitions:index(1)",
              "docComment": "/**\n * Name of Image.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageDefinition",
                  "canonicalReference": "@here/harp-datasource-protocol!ImageDefinition:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!ImageTexture:interface",
          "docComment": "/**\n * Can be used to create a texture atlas.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ImageTexture "
            }
          ],
          "releaseTag": "Public",
          "name": "ImageTexture",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ImageTexture#flipH:member",
              "docComment": "/**\n * Defaults to false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flipH?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "flipH",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ImageTexture#flipV:member",
              "docComment": "/**\n * Defaults to false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flipV?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "flipV",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ImageTexture#height:member",
              "docComment": "/**\n * Specify sub-region: Defaults to 0, meaning height is taken from loaded image.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ImageTexture#image:member",
              "docComment": "/**\n * Name of ImageDefinition to use.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "image: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "image",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ImageTexture#name:member",
              "docComment": "/**\n * Name of ImageTexture. Used to reference texture in the styles.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ImageTexture#opacity:member",
              "docComment": "/**\n * Defaults to 1.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "opacity?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "opacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ImageTexture#origin:member",
              "docComment": "/**\n * Origin of image, defaults to \"topleft\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "origin?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "origin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ImageTexture#width:member",
              "docComment": "/**\n * Specify sub-region: Defaults to 0, meaning width is taken from loaded image.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ImageTexture#xOffset:member",
              "docComment": "/**\n * Specify sub-region: Defaults to 0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "xOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "xOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ImageTexture#yOffset:member",
              "docComment": "/**\n * Specify sub-region: Defaults to 0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "yOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "yOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!IndexedTechnique:type",
          "docComment": "/**\n * For efficiency, [[StyleSetEvaluator]] returns [[Techniques]] additional params as defined in [[IndexedTechniqueParams]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type IndexedTechnique = "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "IndexedTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!IndexedTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "IndexedTechnique",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!IndexedTechniqueParams:interface",
          "docComment": "/**\n * Additional params used for optimized usage of `Techniques`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IndexedTechniqueParams "
            }
          ],
          "releaseTag": "Public",
          "name": "IndexedTechniqueParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!IndexedTechniqueParams#_category:member",
              "docComment": "/**\n * The category used to assign render orders to objects created using this [[Technique]].  @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_category?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "_category",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!IndexedTechniqueParams#_index:member",
              "docComment": "/**\n * Optimization: Index into table in [[StyleSetEvaluator]] or in [[DecodedTile]].  @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "_index",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!IndexedTechniqueParams#_kindState:member",
              "docComment": "/**\n * Last computed state derived from [[Technique.kind]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_kindState?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "_kindState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!IndexedTechniqueParams#_secondaryCategory:member",
              "docComment": "/**\n * The category used to assign render orders to secondary objects created using this [[Technique]].  @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_secondaryCategory?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "_secondaryCategory",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!IndexedTechniqueParams#_styleSet:member",
              "docComment": "/**\n * The styleSet associated to this [[Technique]].  @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_styleSet?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "_styleSet",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!IndexedTechniqueParams#_styleSetIndex:member",
              "docComment": "/**\n * Optimization: Unique [[Technique]] index of [[Style]] from which technique was derived.  @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_styleSetIndex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "_styleSetIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!IndexedTechniqueParams#_usesFeatureState:member",
              "docComment": "/**\n * `true` if any of the properties of this technique needs to access the feature's state.\n *\n * @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_usesFeatureState?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "_usesFeatureState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!InterleavedBufferAttribute:interface",
          "docComment": "/**\n * Structured clone compliant WebGL interleaved buffer with its metadata attached.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InterleavedBufferAttribute "
            }
          ],
          "releaseTag": "Public",
          "name": "InterleavedBufferAttribute",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!InterleavedBufferAttribute#attributes:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "attributes: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<{\n        name: string;\n        itemSize: number;\n        offset: number;\n    }>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "attributes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!InterleavedBufferAttribute#buffer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "buffer: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayBufferLike",
                  "canonicalReference": "!ArrayBufferLike:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "buffer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!InterleavedBufferAttribute#stride:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stride: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stride",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!InterleavedBufferAttribute#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Reference",
                  "text": "BufferElementType",
                  "canonicalReference": "@here/harp-datasource-protocol!BufferElementType:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!InterpolatedPropertyDefinition:interface",
          "docComment": "/**\n * Interpolated property could have its value (some initial value should be provided) changed according to an interpolation type.\n *\n * Here is an example of an interpolated property from a map style: \"lineWidth\": { \"interpolation\": \"Linear\", \"zoomLevels\": [13, 14, 15], \"values\": [ 1.5, 1.2, 0.9] }\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InterpolatedPropertyDefinition<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "InterpolatedPropertyDefinition",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!InterpolatedPropertyDefinition#exponent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "exponent?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "exponent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!InterpolatedPropertyDefinition#interpolation:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interpolation?: "
                },
                {
                  "kind": "Content",
                  "text": "\"Discrete\" | \"Linear\" | \"Cubic\" | \"Exponential\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "interpolation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!InterpolatedPropertyDefinition#values:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "values: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "values",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!InterpolatedPropertyDefinition#zoomLevels:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "zoomLevels: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "zoomLevels",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!interpolatedPropertyDefinitionToJsonExpr:function(1)",
          "docComment": "/**\n * Converts an [[InterpolatedPropertyDefinition]] to a [[JsonExpr]].\n *\n * @param property - A valid [[InterpolatedPropertyDefinition]]\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function interpolatedPropertyDefinitionToJsonExpr(property: "
            },
            {
              "kind": "Reference",
              "text": "InterpolatedPropertyDefinition",
              "canonicalReference": "@here/harp-datasource-protocol!InterpolatedPropertyDefinition:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "JsonExpr",
              "canonicalReference": "@here/harp-datasource-protocol!JsonExpr:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "property",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "name": "interpolatedPropertyDefinitionToJsonExpr"
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-datasource-protocol!InterpolateExpr:class",
          "docComment": "/**\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class InterpolateExpr extends "
            },
            {
              "kind": "Reference",
              "text": "Expr",
              "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "InterpolateExpr",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-datasource-protocol!InterpolateExpr:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `InterpolateExpr` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(mode: "
                },
                {
                  "kind": "Reference",
                  "text": "InterpolateMode",
                  "canonicalReference": "@here/harp-datasource-protocol!InterpolateMode:type"
                },
                {
                  "kind": "Content",
                  "text": ", input: "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": ", stops: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<[number, "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": "]>"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mode",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "stops",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!InterpolateExpr#accept:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accept<Result, Context>(visitor: "
                },
                {
                  "kind": "Reference",
                  "text": "ExprVisitor",
                  "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor:interface"
                },
                {
                  "kind": "Content",
                  "text": "<Result, Context>"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "visitor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Result",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "Context",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "accept"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!InterpolateExpr#exprIsDynamic:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected exprIsDynamic(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "exprIsDynamic"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!InterpolateExpr#input:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly input: "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "input",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!InterpolateExpr#mode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly mode: "
                },
                {
                  "kind": "Reference",
                  "text": "InterpolateMode",
                  "canonicalReference": "@here/harp-datasource-protocol!InterpolateMode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!InterpolateExpr#stops:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly stops: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<[number, "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": "]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stops",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!InterpolateMode:type",
          "docComment": "/**\n * The type of the interpolation mode.  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type InterpolateMode = "
            },
            {
              "kind": "Content",
              "text": "[\"discrete\"] | [\"linear\"] | [\"cubic\"] | [\"exponential\", number]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "InterpolateMode",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@here/harp-datasource-protocol!InterpolationMode:enum",
          "docComment": "/**\n * Interpolation mode used when computing a [[InterpolatedProperty]] value for a given zoom level.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum InterpolationMode "
            }
          ],
          "releaseTag": "Public",
          "name": "InterpolationMode",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!InterpolationMode.Cubic:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Cubic = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "Cubic",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!InterpolationMode.Discrete:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Discrete = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Discrete",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!InterpolationMode.Exponential:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Exponential = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "Exponential",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!InterpolationMode.Linear:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Linear = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Linear",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!IOutlineEffect:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IOutlineEffect "
            }
          ],
          "releaseTag": "Public",
          "name": "IOutlineEffect",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!IOutlineEffect#color:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!IOutlineEffect#enabled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!IOutlineEffect#ghostExtrudedPolygons:member",
              "docComment": "/**\n * Make the extruded polygon disappear.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ghostExtrudedPolygons: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ghostExtrudedPolygons",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!IOutlineEffect#thickness:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "thickness: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "thickness",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isActualSelectorDefinition:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isActualSelectorDefinition(def: "
            },
            {
              "kind": "Reference",
              "text": "Definition",
              "canonicalReference": "@here/harp-datasource-protocol!Definition:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "def",
              "canonicalReference": "@here/harp-datasource-protocol!~def"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "Style",
              "canonicalReference": "@here/harp-datasource-protocol!Style:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "StyleSelector",
              "canonicalReference": "@here/harp-datasource-protocol!StyleSelector:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "def",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isActualSelectorDefinition"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isBasicExtrudedLineTechnique:function(1)",
          "docComment": "/**\n * Type guard to check if an object is an instance of [[BasicExtrudedLineTechnique]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isBasicExtrudedLineTechnique(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "technique",
              "canonicalReference": "@here/harp-datasource-protocol!~technique"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "BasicExtrudedLineTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!BasicExtrudedLineTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isBasicExtrudedLineTechnique"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isBoxedDefinition:function(1)",
          "docComment": "/**\n * Checks if the given definition implements the [[BoxedDefinition]] interface.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isBoxedDefinition(def: "
            },
            {
              "kind": "Reference",
              "text": "Definition",
              "canonicalReference": "@here/harp-datasource-protocol!Definition:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "def",
              "canonicalReference": "@here/harp-datasource-protocol!~def"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "BoxedDefinition",
              "canonicalReference": "@here/harp-datasource-protocol!BoxedDefinition:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "def",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isBoxedDefinition"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isCirclesTechnique:function(1)",
          "docComment": "/**\n * Type guard to check if an object is an instance of [[CirclesTechnique]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isCirclesTechnique(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "technique",
              "canonicalReference": "@here/harp-datasource-protocol!~technique"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "CirclesTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!CirclesTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isCirclesTechnique"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!ISepiaEffect:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISepiaEffect "
            }
          ],
          "releaseTag": "Public",
          "name": "ISepiaEffect",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ISepiaEffect#amount:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "amount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "amount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ISepiaEffect#enabled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isExtrudedLineTechnique:function(1)",
          "docComment": "/**\n * Type guard to check if an object is an instance of [[BasicExtrudedLineTechnique]] or [[StandardExtrudedLineTechnique]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isExtrudedLineTechnique(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "technique",
              "canonicalReference": "@here/harp-datasource-protocol!~technique"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "BasicExtrudedLineTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!BasicExtrudedLineTechnique:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "StandardExtrudedLineTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!StandardExtrudedLineTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isExtrudedLineTechnique"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isExtrudedPolygonTechnique:function(1)",
          "docComment": "/**\n * Type guard to check if an object is an instance of [[ExtrudedPolygonTechnique]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isExtrudedPolygonTechnique(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "technique",
              "canonicalReference": "@here/harp-datasource-protocol!~technique"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "ExtrudedPolygonTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isExtrudedPolygonTechnique"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isFillTechnique:function(1)",
          "docComment": "/**\n * Type guard to check if an object is an instance of [[FillTechnique]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isFillTechnique(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "technique",
              "canonicalReference": "@here/harp-datasource-protocol!~technique"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "FillTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!FillTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isFillTechnique"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isInterpolatedPropertyDefinition:function(1)",
          "docComment": "/**\n * Checks if a property is interpolated.\n *\n * @param p - property to be checked\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isInterpolatedPropertyDefinition<T>(p: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "p",
              "canonicalReference": "@here/harp-datasource-protocol!~p"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "InterpolatedPropertyDefinition",
              "canonicalReference": "@here/harp-datasource-protocol!InterpolatedPropertyDefinition:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "p",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "isInterpolatedPropertyDefinition"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isJsonExpr:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isJsonExpr(v: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "v",
              "canonicalReference": "@here/harp-datasource-protocol!~v"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "JsonExpr",
              "canonicalReference": "@here/harp-datasource-protocol!JsonExpr:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "v",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isJsonExpr"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isJsonExprReference:function(1)",
          "docComment": "/**\n * Checks if the given value is a reference to a definition.\n *\n * @param value - The value of a technique property.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isJsonExprReference(value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "@here/harp-datasource-protocol!~value"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "JsonExprReference",
              "canonicalReference": "@here/harp-datasource-protocol!JsonExprReference:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isJsonExprReference"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isLabelRejectionLineTechnique:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isLabelRejectionLineTechnique(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "technique",
              "canonicalReference": "@here/harp-datasource-protocol!~technique"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "LabelRejectionLineTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!LabelRejectionLineTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isLabelRejectionLineTechnique"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isLineMarkerTechnique:function(1)",
          "docComment": "/**\n * Type guard to check if an object is an instance of [[LineMarkerTechnique]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isLineMarkerTechnique(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "technique",
              "canonicalReference": "@here/harp-datasource-protocol!~technique"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "LineMarkerTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!LineMarkerTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isLineMarkerTechnique"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isLineTechnique:function(1)",
          "docComment": "/**\n * Type guard to check if an object is an instance of [[LineTechnique]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isLineTechnique(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "technique",
              "canonicalReference": "@here/harp-datasource-protocol!~technique"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "LineTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!LineTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isLineTechnique"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isLiteralDefinition:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isLiteralDefinition(def: "
            },
            {
              "kind": "Reference",
              "text": "Definition",
              "canonicalReference": "@here/harp-datasource-protocol!Definition:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "def",
              "canonicalReference": "@here/harp-datasource-protocol!~def"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "LiteralValue",
              "canonicalReference": "@here/harp-datasource-protocol!LiteralValue:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "def",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isLiteralDefinition"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isPoiTechnique:function(1)",
          "docComment": "/**\n * Type guard to check if an object is an instance of [[PoiTechnique]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isPoiTechnique(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "technique",
              "canonicalReference": "@here/harp-datasource-protocol!~technique"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "PoiTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!PoiTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isPoiTechnique"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isSegmentsTechnique:function(1)",
          "docComment": "/**\n * Type guard to check if an object is an instance of [[SegmentsTechnique]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isSegmentsTechnique(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "technique",
              "canonicalReference": "@here/harp-datasource-protocol!~technique"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "SegmentsTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!SegmentsTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isSegmentsTechnique"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isShaderTechnique:function(1)",
          "docComment": "/**\n * Type guard to check if an object is an instance of [[ShaderTechnique]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isShaderTechnique(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "technique",
              "canonicalReference": "@here/harp-datasource-protocol!~technique"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "ShaderTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!ShaderTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isShaderTechnique"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isSolidLineTechnique:function(1)",
          "docComment": "/**\n * Type guard to check if an object is an instance of [[SolidLineTechnique]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isSolidLineTechnique(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "technique",
              "canonicalReference": "@here/harp-datasource-protocol!~technique"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "SolidLineTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isSolidLineTechnique"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isSpecialDashesLineTechnique:function(1)",
          "docComment": "/**\n * Type guard to check if an object is an instance of [[SolidLineTechnique]] and is a kind that has special dashes.  @note Lines with special dashes need line caps to render properly.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isSpecialDashesLineTechnique(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "technique",
              "canonicalReference": "@here/harp-datasource-protocol!~technique"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "SolidLineTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isSpecialDashesLineTechnique"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isSquaresTechnique:function(1)",
          "docComment": "/**\n * Type guard to check if an object is an instance of [[SquaresTechnique]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isSquaresTechnique(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "technique",
              "canonicalReference": "@here/harp-datasource-protocol!~technique"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "SquaresTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!SquaresTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isSquaresTechnique"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isStandardExtrudedLineTechnique:function(1)",
          "docComment": "/**\n * Type guard to check if an object is an instance of [[StandardExtrudedLineTechnique]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isStandardExtrudedLineTechnique(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "technique",
              "canonicalReference": "@here/harp-datasource-protocol!~technique"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "StandardExtrudedLineTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!StandardExtrudedLineTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isStandardExtrudedLineTechnique"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isStandardTechnique:function(1)",
          "docComment": "/**\n * Type guard to check if an object is an instance of [[StandardTechnique]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isStandardTechnique(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "technique",
              "canonicalReference": "@here/harp-datasource-protocol!~technique"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "StandardTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isStandardTechnique"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isTerrainTechnique:function(1)",
          "docComment": "/**\n * Type guard to check if an object is an instance of [[TerrainTechnique]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isTerrainTechnique(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "technique",
              "canonicalReference": "@here/harp-datasource-protocol!~technique"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "TerrainTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!TerrainTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isTerrainTechnique"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isTextTechnique:function(1)",
          "docComment": "/**\n * Type guard to check if an object is an instance of [[TextTechnique]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isTextTechnique(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "technique",
              "canonicalReference": "@here/harp-datasource-protocol!~technique"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "TextTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isTextTechnique"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!isTextureBuffer:function(1)",
          "docComment": "/**\n * Type guard to check if an object is an instance of `TextureBuffer`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isTextureBuffer(object: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "@here/harp-datasource-protocol!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "TextureBuffer",
              "canonicalReference": "@here/harp-datasource-protocol!TextureBuffer:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isTextureBuffer"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!ITileDecoder:interface",
          "docComment": "/**\n * General type decoder which can be used to provide decoded tile data.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITileDecoder "
            }
          ],
          "releaseTag": "Public",
          "name": "ITileDecoder",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ITileDecoder#configure:member(1)",
              "docComment": "/**\n * Set decoder configuration.\n *\n * Configuration will take effect for next calls to results of [[decodeTile]], [[decodeThemedTile]].\n *\n * Non-existing (`undefined`) options (including styleSet) are not changed.\n *\n * @param styleSet - optional, new style set.\n *\n * @param definitions - optional, definitions used to resolve references in `styleSet`\n *\n * @param languages - optional, language list\n *\n * @param options - optional, new options - shape is specific for each decoder\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "configure(styleSet?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleSet",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleSet:type"
                },
                {
                  "kind": "Content",
                  "text": ", definitions?: "
                },
                {
                  "kind": "Reference",
                  "text": "Definitions",
                  "canonicalReference": "@here/harp-datasource-protocol!Definitions:interface"
                },
                {
                  "kind": "Content",
                  "text": ", languages?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsMap",
                  "canonicalReference": "@here/harp-datasource-protocol!OptionsMap:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "styleSet",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "definitions",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "languages",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "configure"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ITileDecoder#connect:member(1)",
              "docComment": "/**\n * Connect to decoder.\n *\n * Should be implemented by implementations that use special resources that decode jobs like WebWorkers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "connect(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "connect"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ITileDecoder#decodeTile:member(1)",
              "docComment": "/**\n * Decode tile into transferrable geometry.\n *\n * Decode raw tile data (encoded with datasource specific encoding) into transferrable representation of tile's geometry.\n *\n * See [[DecodedTile]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "decodeTile(data: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayBufferLike",
                  "canonicalReference": "!ArrayBufferLike:type"
                },
                {
                  "kind": "Content",
                  "text": " | {}"
                },
                {
                  "kind": "Content",
                  "text": ", tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ", projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ", requestController?: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestController",
                  "canonicalReference": "@here/harp-datasource-protocol!RequestController:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "DecodedTile",
                  "canonicalReference": "@here/harp-datasource-protocol!DecodedTile:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "requestController",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "name": "decodeTile"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ITileDecoder#dispose:member(1)",
              "docComment": "/**\n * Free all resources associated with this decoder.\n *\n * Called by users when decoder is no longer used and all resources must be freed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispose(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "dispose"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ITileDecoder#getTileInfo:member(1)",
              "docComment": "/**\n * Get tile info.\n *\n * Get map features metadata associated with tile. See [[TileInfo]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTileInfo(data: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayBufferLike",
                  "canonicalReference": "!ArrayBufferLike:type"
                },
                {
                  "kind": "Content",
                  "text": " | {}"
                },
                {
                  "kind": "Content",
                  "text": ", tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ", projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ", requestController?: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestController",
                  "canonicalReference": "@here/harp-datasource-protocol!RequestController:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TileInfo",
                  "canonicalReference": "@here/harp-datasource-protocol!TileInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "requestController",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "name": "getTileInfo"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!ITiler:interface",
          "docComment": "/**\n * General type tiler which can be used to provide tile untiled payloads.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITiler "
            }
          ],
          "releaseTag": "Public",
          "name": "ITiler",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ITiler#connect:member(1)",
              "docComment": "/**\n * Connect to tiler.\n *\n * Should be implemented by implementations that use special resources that decode jobs like WebWorkers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "connect(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "connect"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ITiler#dispose:member(1)",
              "docComment": "/**\n * Free all resources associated with this tiler.\n *\n * Called by users when decoder is no longer used and all resources must be freed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispose(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "dispose"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ITiler#getTile:member(1)",
              "docComment": "/**\n * Retrieves a tile for a previously registered index.\n *\n * @param indexId - Index identifier.\n *\n * @param tileKey - The [[TileKey]] that identifies the tile.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTile(indexId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<{}>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "indexId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getTile"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ITiler#registerIndex:member(1)",
              "docComment": "/**\n * Register index in the tiler. Indexes registered in the tiler can be later used to retrieved tiled payloads using `getTile`.\n *\n * @param indexId - Index identifier.\n *\n * @param indexUrl - Url to the index payload, or direct GeoJson.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "registerIndex(indexId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", indexUrl: "
                },
                {
                  "kind": "Reference",
                  "text": "URL",
                  "canonicalReference": "!URL:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "GeoJson",
                  "canonicalReference": "@here/harp-datasource-protocol!GeoJson:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "indexId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "indexUrl",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "registerIndex"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ITiler#updateIndex:member(1)",
              "docComment": "/**\n * Update index in the tiler. Indexes registered in the tiler can be later used to retrieved tiled payloads using `getTile`.\n *\n * @param indexId - Index identifier.\n *\n * @param indexUrl - Url to the index payload, or direct GeoJson.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateIndex(indexId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", indexUrl: "
                },
                {
                  "kind": "Reference",
                  "text": "URL",
                  "canonicalReference": "!URL:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "GeoJson",
                  "canonicalReference": "@here/harp-datasource-protocol!GeoJson:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "indexId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "indexUrl",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "updateIndex"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!IVignetteEffect:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IVignetteEffect "
            }
          ],
          "releaseTag": "Public",
          "name": "IVignetteEffect",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!IVignetteEffect#darkness:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "darkness: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "darkness",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!IVignetteEffect#enabled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!IVignetteEffect#offset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "offset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!JsonArray:interface",
          "docComment": "/**\n * A type representing JSON arrays.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface JsonArray extends "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "JsonValue",
              "canonicalReference": "@here/harp-datasource-protocol!JsonValue:type"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "JsonArray",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!JsonExpr:type",
          "docComment": "/**\n * The JSON representation of an [[Expr]] object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type JsonExpr = "
            },
            {
              "kind": "Reference",
              "text": "JsonArray",
              "canonicalReference": "@here/harp-datasource-protocol!JsonArray:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "JsonExpr",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!JsonExprReference:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type JsonExprReference = "
            },
            {
              "kind": "Content",
              "text": "[\"ref\", string]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "JsonExprReference",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!JsonObject:interface",
          "docComment": "/**\n * A type representing JSON objects.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface JsonObject "
            }
          ],
          "releaseTag": "Public",
          "name": "JsonObject",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@here/harp-datasource-protocol!JsonObject:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "JsonValue",
                  "canonicalReference": "@here/harp-datasource-protocol!JsonValue:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!JsonValue:type",
          "docComment": "/**\n * A type represeting JSON values.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type JsonValue = "
            },
            {
              "kind": "Content",
              "text": "null | boolean | number | string | "
            },
            {
              "kind": "Reference",
              "text": "JsonObject",
              "canonicalReference": "@here/harp-datasource-protocol!JsonObject:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "JsonArray",
              "canonicalReference": "@here/harp-datasource-protocol!JsonArray:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "JsonValue",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!LabelRejectionLineStyle:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type LabelRejectionLineStyle = "
            },
            {
              "kind": "Reference",
              "text": "BaseStyle",
              "canonicalReference": "@here/harp-datasource-protocol!BaseStyle:type"
            },
            {
              "kind": "Content",
              "text": "<\"label-rejection-line\", "
            },
            {
              "kind": "Reference",
              "text": "BaseTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "LabelRejectionLineStyle",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!LabelRejectionLineTechnique:interface",
          "docComment": "/**\n * Technique to avoid label rendering on top of certain line geometries. For technique parameters see [[BaseTechniqueParams]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LabelRejectionLineTechnique extends "
            },
            {
              "kind": "Reference",
              "text": "MakeTechniqueAttrs",
              "canonicalReference": "@here/harp-datasource-protocol!MakeTechniqueAttrs:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "BaseTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "LabelRejectionLineTechnique",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!LabelRejectionLineTechnique#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "\"label-rejection-line\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!Light:type",
          "docComment": "/**\n * Possible lights used for light the map.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Light = "
            },
            {
              "kind": "Reference",
              "text": "AmbientLight",
              "canonicalReference": "@here/harp-datasource-protocol!AmbientLight:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "DirectionalLight",
              "canonicalReference": "@here/harp-datasource-protocol!DirectionalLight:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Light",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!LineCaps:type",
          "docComment": "/**\n * Available line caps types(`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`). Default is `\"Round\"`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type LineCaps = "
            },
            {
              "kind": "Content",
              "text": "\"Square\" | \"Round\" | \"None\" | \"TriangleOut\" | \"TriangleIn\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "LineCaps",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!LineDashes:type",
          "docComment": "/**\n * Available line dash types(`\"Round\"`, `\"Square\"`, `\"Diamond\"`). Default is `\"Square\"`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type LineDashes = "
            },
            {
              "kind": "Content",
              "text": "\"Square\" | \"Round\" | \"Diamond\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "LineDashes",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!LineMarkerStyle:type",
          "docComment": "/**\n * Render feature as line markers, which is a recurring marker along a line (usually road).\n *\n * @see [[MarkerTechniqueParams]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type LineMarkerStyle = "
            },
            {
              "kind": "Reference",
              "text": "BaseStyle",
              "canonicalReference": "@here/harp-datasource-protocol!BaseStyle:type"
            },
            {
              "kind": "Content",
              "text": "<\"line-marker\", "
            },
            {
              "kind": "Reference",
              "text": "MarkerTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "LineMarkerStyle",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!LineMarkerTechnique:interface",
          "docComment": "/**\n * Runtime representation of [[LineMarkerStyle]] as parsed by [[StyleSetEvaluator]]. For technique parameters see [[MarkerTechniqueParams]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LineMarkerTechnique extends "
            },
            {
              "kind": "Reference",
              "text": "MakeTechniqueAttrs",
              "canonicalReference": "@here/harp-datasource-protocol!MakeTechniqueAttrs:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MarkerTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "LineMarkerTechnique",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!LineMarkerTechnique#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "\"line-marker\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!LineString:interface",
          "docComment": "/**\n * Represents \"LineString\" GeoJSON geometry object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LineString "
            }
          ],
          "releaseTag": "Public",
          "name": "LineString",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!LineString#coordinates:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "coordinates: "
                },
                {
                  "kind": "Content",
                  "text": "number[][]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "coordinates",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!LineString#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "\"LineString\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!LineStyle:type",
          "docComment": "/**\n * Render feature as line.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type LineStyle = "
            },
            {
              "kind": "Reference",
              "text": "BaseStyle",
              "canonicalReference": "@here/harp-datasource-protocol!BaseStyle:type"
            },
            {
              "kind": "Content",
              "text": "<\"line\", "
            },
            {
              "kind": "Reference",
              "text": "LineTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!LineTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "LineStyle",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!LineTechnique:interface",
          "docComment": "/**\n * Runtime representation of [[LineStyle]] as parsed by [[StyleSetEvaluator]]. For technique parameters see [[LineTechniqueParams]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LineTechnique extends "
            },
            {
              "kind": "Reference",
              "text": "MakeTechniqueAttrs",
              "canonicalReference": "@here/harp-datasource-protocol!MakeTechniqueAttrs:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "LineTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!LineTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "LineTechnique",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!LineTechnique#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "\"line\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-datasource-protocol!lineTechniqueDescriptor:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "lineTechniqueDescriptor: "
            },
            {
              "kind": "Reference",
              "text": "TechniqueDescriptor",
              "canonicalReference": "@here/harp-datasource-protocol!TechniqueDescriptor:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "LineTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!LineTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "lineTechniqueDescriptor",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!LineTechniqueParams:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LineTechniqueParams extends "
            },
            {
              "kind": "Reference",
              "text": "BaseTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "LineTechniqueParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!LineTechniqueParams#color:member",
              "docComment": "/**\n * Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleColor",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleColor:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!LineTechniqueParams#lineWidth:member",
              "docComment": "/**\n * Width of line in pixels. WebGL implementations will normally render all lines with 1 pixel width, and ignore this value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineWidth: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lineWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!LineTechniqueParams#opacity:member",
              "docComment": "/**\n * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally opaque.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "opacity?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "opacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!LineTechniqueParams#transparent:member",
              "docComment": "/**\n * Set to true if line should appear transparent. Rendering transparent lines may come with a slight performance impact.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transparent?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "transparent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-datasource-protocol!LiteralExpr:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class LiteralExpr extends "
            },
            {
              "kind": "Reference",
              "text": "Expr",
              "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "LiteralExpr",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!LiteralExpr#exprIsDynamic:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected exprIsDynamic(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "exprIsDynamic"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!LiteralExpr.fromValue:member(1)",
              "docComment": "/**\n * Create a [[LiteralExpr]] from the given value.\n *\n * @param value - A constant value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromValue(value: "
                },
                {
                  "kind": "Reference",
                  "text": "Value",
                  "canonicalReference": "@here/harp-datasource-protocol!Value:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromValue"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!LiteralExpr#value:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract get value(): "
                },
                {
                  "kind": "Reference",
                  "text": "Value",
                  "canonicalReference": "@here/harp-datasource-protocol!Value:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!LiteralValue:type",
          "docComment": "/**\n * Possible types of unboxed literal values carried by [[Definition]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type LiteralValue = "
            },
            {
              "kind": "Content",
              "text": "string | number | boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "LiteralValue",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!MagFilter:type",
          "docComment": "/**\n * Available texture magnification filters.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MagFilter = "
            },
            {
              "kind": "Content",
              "text": "\"nearest\" | \"linear\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MagFilter",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!MakeTechniqueAttrs:type",
          "docComment": "/**\n * Make runtime representation of technique attributes from JSON-compatible typings.\n *\n * Translates - InterpolatedPropertyDefinition -> InterpolatedProperty - JsonExpr -> Expr\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MakeTechniqueAttrs<T> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [P in keyof T]: T[P] | "
            },
            {
              "kind": "Reference",
              "text": "JsonExpr",
              "canonicalReference": "@here/harp-datasource-protocol!JsonExpr:type"
            },
            {
              "kind": "Content",
              "text": " extends T[P] ? "
            },
            {
              "kind": "Reference",
              "text": "RemoveInterpolatedPropDef",
              "canonicalReference": "@here/harp-datasource-protocol!RemoveInterpolatedPropDef:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RemoveJsonExpr",
              "canonicalReference": "@here/harp-datasource-protocol!RemoveJsonExpr:type"
            },
            {
              "kind": "Content",
              "text": "<T[P]>> | "
            },
            {
              "kind": "Reference",
              "text": "Expr",
              "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
            },
            {
              "kind": "Content",
              "text": " : T[P];\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MakeTechniqueAttrs",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-datasource-protocol!MapEnv:class",
          "docComment": "/**\n * Adds access to map specific environment properties.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class MapEnv extends "
            },
            {
              "kind": "Reference",
              "text": "Env",
              "canonicalReference": "@here/harp-datasource-protocol!Env:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "MapEnv",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-datasource-protocol!MapEnv:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `MapEnv` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(entries: "
                },
                {
                  "kind": "Reference",
                  "text": "ValueMap",
                  "canonicalReference": "@here/harp-datasource-protocol!ValueMap:interface"
                },
                {
                  "kind": "Content",
                  "text": ", parent?: "
                },
                {
                  "kind": "Reference",
                  "text": "Env",
                  "canonicalReference": "@here/harp-datasource-protocol!Env:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "entries",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "parent",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!MapEnv#entries:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly entries: "
                },
                {
                  "kind": "Reference",
                  "text": "ValueMap",
                  "canonicalReference": "@here/harp-datasource-protocol!ValueMap:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "entries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!MapEnv#lookup:member(1)",
              "docComment": "/**\n * Returns property in [[Env]] by name.\n *\n * @param name - Name of property.\n *\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lookup(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Value",
                  "canonicalReference": "@here/harp-datasource-protocol!Value:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "lookup"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!MapEnv#unmap:member(1)",
              "docComment": "/**\n * Return an object containing all properties of this environment, takes care of the parent object.\n *\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unmap(): "
                },
                {
                  "kind": "Reference",
                  "text": "ValueMap",
                  "canonicalReference": "@here/harp-datasource-protocol!ValueMap:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "unmap"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams:interface",
          "docComment": "/**\n * Technique that describes icons with labels. Used in [[PoiTechnique]] and [[LineMarkerTechnique]] (for road shields).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MarkerTechniqueParams extends "
            },
            {
              "kind": "Reference",
              "text": "BaseTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "MarkerTechniqueParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#alwaysOnTop:member",
              "docComment": "/**\n * If `true`, the label will always be rendered on top. If overlapping with other labels with this flag set, the render order is undefined.  @default `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alwaysOnTop?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "alwaysOnTop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#backgroundColor:member",
              "docComment": "/**\n * Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backgroundColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleColor",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleColor:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "backgroundColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#backgroundOpacity:member",
              "docComment": "/**\n * Background text opacity value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backgroundOpacity?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "backgroundOpacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#backgroundSize:member",
              "docComment": "/**\n * Size of the text background (pixels).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backgroundSize?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "backgroundSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#canvasRotation:member",
              "docComment": "/**\n * [[TextCanvas]] rotation (radians).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "canvasRotation?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "canvasRotation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#color:member",
              "docComment": "/**\n * Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleColor",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleColor:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#distanceScale:member",
              "docComment": "/**\n * Scaling factor of icon. Defaults to 0.5, reducing the size ot 50% in the distance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "distanceScale?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "distanceScale",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#fontName:member",
              "docComment": "/**\n * Name of the preferred [[Font]] to be used when rendering.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fontName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#fontStyle:member",
              "docComment": "/**\n * Glyph style to apply for the currently active [[Font]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontStyle?: "
                },
                {
                  "kind": "Content",
                  "text": "\"Regular\" | \"Bold\" | \"Italic\" | \"BoldItalic\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fontStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#fontVariant:member",
              "docComment": "/**\n * Glyph variant to apply for the currently active [[Font]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontVariant?: "
                },
                {
                  "kind": "Content",
                  "text": "\"Regular\" | \"AllCaps\" | \"SmallCaps\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fontVariant",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#hAlignment:member",
              "docComment": "/**\n * Text position regarding the baseline.\n *\n * @note The [[placements]] attribute may override the alignment settings.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hAlignment?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<\"Left\" | \"Center\" | \"Right\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hAlignment",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#iconBrightness:member",
              "docComment": "/**\n * Icon brightness.\n *\n * Factor that multiplies a color on top of the icon texture (and `iconColor`) with `0` being fully black as final output, `1` being the original rgb colors of the texture.\n *\n * @default `1`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconBrightness?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconBrightness",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#iconColor:member",
              "docComment": "/**\n * Icon color.\n *\n * If specified, combined using multiplication with color value read from icon texture.\n *\n * Works best for grayscale or monochromatic textures.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleColor",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleColor:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#iconFadeTime:member",
              "docComment": "/**\n * Fading time for icons in seconds.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconFadeTime?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconFadeTime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#iconIsOptional:member",
              "docComment": "/**\n * If true, the text will appear even if the icon cannot be rendered because of missing icon graphics. Defaults to `true`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconIsOptional?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconIsOptional",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#iconMaxZoomLevel:member",
              "docComment": "/**\n * Maximum zoomLevel at which to display the label icon. No default.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconMaxZoomLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconMaxZoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#iconMayOverlap:member",
              "docComment": "/**\n * If `false`, the icon may overlap text and other icons of lower priority. If not defined, the property value from `textMayOverlap` will be used.  @default `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconMayOverlap?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconMayOverlap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#iconMinZoomLevel:member",
              "docComment": "/**\n * Minimum zoomLevel at which to display the label icon. No default.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconMinZoomLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconMinZoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#iconReserveSpace:member",
              "docComment": "/**\n * If `false`, icon will not reserve screen space, other markers will be able to overlap. If not defined, the property value from `iconReserveSpace` will be used.  @default `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconReserveSpace?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconReserveSpace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#iconScale:member",
              "docComment": "/**\n * Scaling factor of icon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconScale?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconScale",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#iconXOffset:member",
              "docComment": "/**\n * Horizontal offset (to the right) in screen pixels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconXOffset?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconXOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#iconYOffset:member",
              "docComment": "/**\n * Vertical offset (up) in screen pixels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconYOffset?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconYOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#imageTexture:member",
              "docComment": "/**\n * Name of [[ImageTexture]] definition to use.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageTexture?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageTexture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#imageTextureField:member",
              "docComment": "/**\n * Field name to extract imageTexture content from.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageTextureField?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageTextureField",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#imageTexturePostfix:member",
              "docComment": "/**\n * Postfix for `imageTexture` if `imageTextureField` is used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageTexturePostfix?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageTexturePostfix",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#imageTexturePrefix:member",
              "docComment": "/**\n * Prefix for `imageTexture` if `imageTextureField` is used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageTexturePrefix?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageTexturePrefix",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#label:member",
              "docComment": "/**\n * Field name of object containing the text to be rendered.\n *\n * @deprecated, Use `[\"get\", \"FIELD\"]`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#leading:member",
              "docComment": "/**\n * Inter-line spacing (pixels). Scaled by `size`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "leading?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "leading",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#lineRotation:member",
              "docComment": "/**\n * Line typesetting rotation (radians).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineRotation?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lineRotation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#lineWidth:member",
              "docComment": "/**\n * Maximum line width (pixels).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineWidth?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lineWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#maxLines:member",
              "docComment": "/**\n * Maximum number of lines for this label.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxLines?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxLines",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#minDistance:member",
              "docComment": "/**\n * Minimal distance between markers in screen pixels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minDistance?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minDistance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#opacity:member",
              "docComment": "/**\n * For transparent text, set a value between 0.0 for totally transparent, to 1.0 for totally opaque.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "opacity?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "opacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#placements:member",
              "docComment": "/**\n * Text label positions relative to the label central position (anchor point).\n *\n * This attribute defines a comma separated tokens of possible text placements relative to label central position (anchor), for example: \"TL, TR, C\". Keep in mind that horizontal placement defines text position in opposite way to the alignment, so the text `R` placed (located on the **right side** of label position) will be the same as `Left` aligned by deduction. On other side vertical placement is quite similar to vertical alignment so `T` placement corresponds with `Above` alignment.\n *\n * @note This attribute may override [[hAlignment]] and [[vAlignment]] if defined.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "placements?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "placements",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#poiName:member",
              "docComment": "/**\n * Fixed name to identify POI options in the POI table. If `poiName` has a value, this value supersedes any value read from the field referenced in `poiNameField`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "poiName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "poiName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#poiNameField:member",
              "docComment": "/**\n * Name of the field to evaluate to get the name of the POI options in the POI table.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "poiNameField?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "poiNameField",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#poiTable:member",
              "docComment": "/**\n * Name of the POI table which should be used for this POI.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "poiTable?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "poiTable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#priority:member",
              "docComment": "/**\n * Priority of marker, defaults to `0`. Markers with highest priority get placed first.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "priority?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "priority",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#renderTextDuringMovements:member",
              "docComment": "/**\n * If `false`, text will not be rendered during animations. Defaults to `true`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderTextDuringMovements?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderTextDuringMovements",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#rotation:member",
              "docComment": "/**\n * Glyph local rotation (radians).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rotation?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "rotation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#screenHeight:member",
              "docComment": "/**\n * Vertical height in pixels, controls vertical scaling. Overrides `iconScale`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "screenHeight?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "screenHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#screenWidth:member",
              "docComment": "/**\n * Horizontal height in pixels, controls horizontal scaling. Overrides `iconScale`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "screenWidth?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "screenWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#showOnMap:member",
              "docComment": "/**\n * Should be displayed on map or not. Defaults to `true`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "showOnMap?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "showOnMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#size:member",
              "docComment": "/**\n * Size of the text (pixels).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#stackMode:member",
              "docComment": "/**\n * Specify stack mode. Defaults to `ShowInStack`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stackMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "PoiStackMode",
                  "canonicalReference": "@here/harp-datasource-protocol!PoiStackMode:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stackMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#style:member",
              "docComment": "/**\n * Name of the text style.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#text:member",
              "docComment": "/**\n * Text to be displayed for feature.\n *\n * Defaults to first defined: - feature property `label` if present in technique (deprecated) - `[\"get\", \"name:short\"]` is `useAbbreviation` is true - `[\"get\", \"iso_code\"]` is `useIsoCode` is true - `[\"get\", \"name:$LANGUAGE\"]` for each specified language - `[\"get\", \"name\"]`\n *\n * See [[ExtendedTileInfo.getFeatureText]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#textFadeTime:member",
              "docComment": "/**\n * Fading time for labels in seconds.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textFadeTime?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textFadeTime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#textIsOptional:member",
              "docComment": "/**\n * If `true`, icon will appear even if the text part is blocked by other labels. Defaults to `false`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textIsOptional?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textIsOptional",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#textMaxZoomLevel:member",
              "docComment": "/**\n * Maximum zoomLevel at which to display the label text. No default.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textMaxZoomLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textMaxZoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#textMayOverlap:member",
              "docComment": "/**\n * If `false`, text may overlap markers.  @default `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textMayOverlap?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textMayOverlap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#textMinZoomLevel:member",
              "docComment": "/**\n * Minimum zoomLevel at which to display the label text. No default.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textMinZoomLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textMinZoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#textReserveSpace:member",
              "docComment": "/**\n * If `false`, text will not reserve screen space, other markers will be able to overlap.  @default `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textReserveSpace?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textReserveSpace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#tracking:member",
              "docComment": "/**\n * Inter-glyph spacing (pixels). Scaled by `size`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tracking?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tracking",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#useAbbreviation:member",
              "docComment": "/**\n * If `true`, the abbreviation (field `name:short`) of the elements is used as text.\n *\n * @deprecated\n *\n * Use proper expression with [`get`, `name:short`] for this purpose.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "useAbbreviation?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "useAbbreviation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#useIsoCode:member",
              "docComment": "/**\n * If `true`, the iso code (field 'iso_code') of the elements is used as text. The `iso_code` field contains the ISO 3166-1 2-letter country code.\n *\n * @deprecated\n *\n * Use proper expression with [`get`, `iso_code`] for this purpose.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "useIsoCode?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "useIsoCode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#vAlignment:member",
              "docComment": "/**\n * Text position inside a line.\n *\n * @note The [[placements]] attribute may supersede it.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "vAlignment?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<\"Above\" | \"Center\" | \"Below\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "vAlignment",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#worldOffset:member",
              "docComment": "/**\n * World space offset in meters applied to the icon. Valid only for icons which have the \"offset_direction\" property as an attribute of the data.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "worldOffset?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "worldOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#wrappingMode:member",
              "docComment": "/**\n * Wrapping (line-breaking) mode.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wrappingMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<\"None\" | \"Character\" | \"Word\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "wrappingMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#xOffset:member",
              "docComment": "/**\n * Horizontal offset (to the right) in screen pixels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "xOffset?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "xOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams#yOffset:member",
              "docComment": "/**\n * Vertical offset (up) in screen pixels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "yOffset?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "yOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-datasource-protocol!MatchExpr:class",
          "docComment": "/**\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class MatchExpr extends "
            },
            {
              "kind": "Reference",
              "text": "Expr",
              "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "MatchExpr",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-datasource-protocol!MatchExpr:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `MatchExpr` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(value: "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": ", branches: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<["
                },
                {
                  "kind": "Reference",
                  "text": "MatchLabel",
                  "canonicalReference": "@here/harp-datasource-protocol!MatchLabel:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": "]>"
                },
                {
                  "kind": "Content",
                  "text": ", fallback: "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "branches",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "fallback",
                  "parameterTypeTokenRange": {
                    "startIndex": 10,
                    "endIndex": 11
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!MatchExpr#accept:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accept<Result, Context>(visitor: "
                },
                {
                  "kind": "Reference",
                  "text": "ExprVisitor",
                  "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor:interface"
                },
                {
                  "kind": "Content",
                  "text": "<Result, Context>"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "visitor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Result",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "Context",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "accept"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!MatchExpr#branches:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly branches: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<["
                },
                {
                  "kind": "Reference",
                  "text": "MatchLabel",
                  "canonicalReference": "@here/harp-datasource-protocol!MatchLabel:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": "]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "branches",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!MatchExpr#exprIsDynamic:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected exprIsDynamic(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "exprIsDynamic"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!MatchExpr#fallback:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly fallback: "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fallback",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!MatchExpr.isValidMatchLabel:member(1)",
              "docComment": "/**\n * Tests if the given JSON node is a valid label for the `\"match\"` operator.\n *\n * @param node - A JSON value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isValidMatchLabel(node: "
                },
                {
                  "kind": "Reference",
                  "text": "JsonValue",
                  "canonicalReference": "@here/harp-datasource-protocol!JsonValue:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "node",
                  "canonicalReference": "@here/harp-datasource-protocol!~node"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "MatchLabel",
                  "canonicalReference": "@here/harp-datasource-protocol!MatchLabel:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "node",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isValidMatchLabel"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!MatchExpr#value:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly value: "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!MatchLabel:type",
          "docComment": "/**\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MatchLabel = "
            },
            {
              "kind": "Content",
              "text": "number | string | number[] | string[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MatchLabel",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!MinFilter:type",
          "docComment": "/**\n * Available texture minification filters.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MinFilter = "
            },
            {
              "kind": "Content",
              "text": "\"nearest\" | \"nearestMipMapNearest\" | \"nearestMipMapLinear\" | \"linear\" | \"linearMipMapNearest\" | \"linearMipMapLinear\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MinFilter",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!MultiLineString:interface",
          "docComment": "/**\n * Represents \"MultiLineString\" GeoJSON geometry object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MultiLineString "
            }
          ],
          "releaseTag": "Public",
          "name": "MultiLineString",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MultiLineString#coordinates:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "coordinates: "
                },
                {
                  "kind": "Content",
                  "text": "number[][][]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "coordinates",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MultiLineString#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "\"MultiLineString\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!MultiPoint:interface",
          "docComment": "/**\n * Represents \"MultiPoint\" GeoJSON geometry object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MultiPoint "
            }
          ],
          "releaseTag": "Public",
          "name": "MultiPoint",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MultiPoint#coordinates:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "coordinates: "
                },
                {
                  "kind": "Content",
                  "text": "number[][]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "coordinates",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MultiPoint#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "\"MultiPoint\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!MultiPolygon:interface",
          "docComment": "/**\n * Represents \"MultiPolygon\" GeoJSON geometry object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MultiPolygon "
            }
          ],
          "releaseTag": "Public",
          "name": "MultiPolygon",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MultiPolygon#coordinates:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "coordinates: "
                },
                {
                  "kind": "Content",
                  "text": "number[][][][]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "coordinates",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!MultiPolygon#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "\"MultiPolygon\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!needsVertexNormals:function(1)",
          "docComment": "/**\n * Check if vertex normals should be generated for this technique (if no normals are in the data).\n *\n * @param technique - Technique to check.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function needsVertexNormals(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "needsVertexNormals"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!NoneStyle:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NoneStyle extends "
            },
            {
              "kind": "Reference",
              "text": "BaseStyle",
              "canonicalReference": "@here/harp-datasource-protocol!BaseStyle:type"
            },
            {
              "kind": "Content",
              "text": "<\"none\", {\n    [name: string]: any;\n}> "
            }
          ],
          "releaseTag": "Public",
          "name": "NoneStyle",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@here/harp-datasource-protocol!NoneStyle:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-datasource-protocol!NullLiteralExpr:class",
          "docComment": "/**\n * Null literal expression.  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class NullLiteralExpr extends "
            },
            {
              "kind": "Reference",
              "text": "LiteralExpr",
              "canonicalReference": "@here/harp-datasource-protocol!LiteralExpr:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "NullLiteralExpr",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-datasource-protocol!NullLiteralExpr:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `NullLiteralExpr` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected constructor();"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!NullLiteralExpr#accept:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accept<Result, Context>(visitor: "
                },
                {
                  "kind": "Reference",
                  "text": "ExprVisitor",
                  "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor:interface"
                },
                {
                  "kind": "Content",
                  "text": "<Result, Context>"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "visitor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Result",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "Context",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "accept"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!NullLiteralExpr#exprIsDynamic:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected exprIsDynamic(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "exprIsDynamic"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!NullLiteralExpr.instance:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static instance: "
                },
                {
                  "kind": "Reference",
                  "text": "NullLiteralExpr",
                  "canonicalReference": "@here/harp-datasource-protocol!NullLiteralExpr:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "instance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!NullLiteralExpr#value:member",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly value: "
                },
                {
                  "kind": "Reference",
                  "text": "Value",
                  "canonicalReference": "@here/harp-datasource-protocol!Value:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-datasource-protocol!NumberLiteralExpr:class",
          "docComment": "/**\n * Number literal expression.  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class NumberLiteralExpr extends "
            },
            {
              "kind": "Reference",
              "text": "LiteralExpr",
              "canonicalReference": "@here/harp-datasource-protocol!LiteralExpr:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "NumberLiteralExpr",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-datasource-protocol!NumberLiteralExpr:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `NumberLiteralExpr` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!NumberLiteralExpr#accept:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accept<Result, Context>(visitor: "
                },
                {
                  "kind": "Reference",
                  "text": "ExprVisitor",
                  "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor:interface"
                },
                {
                  "kind": "Content",
                  "text": "<Result, Context>"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "visitor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Result",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "Context",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "accept"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!NumberLiteralExpr#value:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-datasource-protocol!ObjectLiteralExpr:class",
          "docComment": "/**\n * Object literal expression.  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ObjectLiteralExpr extends "
            },
            {
              "kind": "Reference",
              "text": "LiteralExpr",
              "canonicalReference": "@here/harp-datasource-protocol!LiteralExpr:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ObjectLiteralExpr",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-datasource-protocol!ObjectLiteralExpr:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ObjectLiteralExpr` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(value: "
                },
                {
                  "kind": "Content",
                  "text": "object"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!ObjectLiteralExpr#accept:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accept<Result, Context>(visitor: "
                },
                {
                  "kind": "Reference",
                  "text": "ExprVisitor",
                  "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor:interface"
                },
                {
                  "kind": "Content",
                  "text": "<Result, Context>"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "visitor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Result",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "Context",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "accept"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!ObjectLiteralExpr#isArrayLiteral:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get isArrayLiteral(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isArrayLiteral",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!ObjectLiteralExpr#value:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly value: "
                },
                {
                  "kind": "Content",
                  "text": "object"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!OptionsMap:interface",
          "docComment": "/**\n * Interface for `OptionsMap` which describes a general structure of key-value pairs.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface OptionsMap "
            }
          ],
          "releaseTag": "Public",
          "name": "OptionsMap",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@here/harp-datasource-protocol!OptionsMap:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!parseStringEncodedColor:function(1)",
          "docComment": "/**\n * Parse string encoded color value using all known [[StringEncodedColorFormats]].\n *\n * @param color - The string encoded color expression (i.e. '#FFF', 'rgb(255, 0, 0)', etc.).\n *\n * @returns The color parsed or __undefined__ if non of the known representations matches the expression provided in [[color]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parseStringEncodedColor(color: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "color",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "parseStringEncodedColor"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!parseStringEncodedNumeral:function(1)",
          "docComment": "/**\n * Parse string encoded numeral values using all known [[StringEncodedNumeralFormats]].\n *\n * @param numeral - The string representing numeric value.\n *\n * @param pixelToMeters - The ratio used to convert from meters to pixels (default 1.0).\n *\n * @returns Number parsed or __undefined__ if non of the numeral patterns matches the expression provided in [[numeral]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parseStringEncodedNumeral(numeral: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", pixelToMeters?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "numeral",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "pixelToMeters",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "parseStringEncodedNumeral"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!PathGeometry:interface",
          "docComment": "/**\n * This object keeps the path of the geometry. Space of the path depends on the use case, so could be either world or local tile space.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PathGeometry "
            }
          ],
          "releaseTag": "Public",
          "name": "PathGeometry",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PathGeometry#path:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "path: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "path",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!PixelFormat:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PixelFormat = "
            },
            {
              "kind": "Content",
              "text": "\"Alpha\" | \"RGB\" | \"RGBA\" | \"Luminance\" | \"LuminanceAlpha\" | \"RGBE\" | \"Depth\" | \"DepthStencil\" | \"Red\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PixelFormat",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@here/harp-datasource-protocol!PlacementToken:enum",
          "docComment": "/**\n * Defines options (tokens) supported for text placements defined via [[placements]] attribute.\n *\n * Possible values are defined as vertical placement letter and horizontal letter, where one of the axis may be ignored and then assumed centered. Moving clock-wise, we have: `TL` (top-left), `T` (top-center), `TR` (top-right), `R` (center-right), `BR` (bottom-right), `B` (bottom-center), `BL` (bottom-left), `L` (left), `C` (center-center). Alternatively instead of `T`, `B`, `L`, `R` geographic directions may be used accordingly: `NW` (north-west), `N` (north), `NE` (north-east), `E` (east), `SE` (south-east), `S` (south), `SW` (south-west), `W` (west).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum PlacementToken "
            }
          ],
          "releaseTag": "Public",
          "name": "PlacementToken",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!PlacementToken.Bottom:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Bottom = "
                },
                {
                  "kind": "Content",
                  "text": "\"B\""
                }
              ],
              "releaseTag": "Public",
              "name": "Bottom",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!PlacementToken.BottomLeft:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BottomLeft = "
                },
                {
                  "kind": "Content",
                  "text": "\"BL\""
                }
              ],
              "releaseTag": "Public",
              "name": "BottomLeft",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!PlacementToken.BottomRight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BottomRight = "
                },
                {
                  "kind": "Content",
                  "text": "\"BR\""
                }
              ],
              "releaseTag": "Public",
              "name": "BottomRight",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!PlacementToken.Center:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Center = "
                },
                {
                  "kind": "Content",
                  "text": "\"C\""
                }
              ],
              "releaseTag": "Public",
              "name": "Center",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!PlacementToken.East:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "East = "
                },
                {
                  "kind": "Content",
                  "text": "\"E\""
                }
              ],
              "releaseTag": "Public",
              "name": "East",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!PlacementToken.Left:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Left = "
                },
                {
                  "kind": "Content",
                  "text": "\"L\""
                }
              ],
              "releaseTag": "Public",
              "name": "Left",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!PlacementToken.North:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "North = "
                },
                {
                  "kind": "Content",
                  "text": "\"N\""
                }
              ],
              "releaseTag": "Public",
              "name": "North",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!PlacementToken.NorthEast:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NorthEast = "
                },
                {
                  "kind": "Content",
                  "text": "\"NE\""
                }
              ],
              "releaseTag": "Public",
              "name": "NorthEast",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!PlacementToken.NorthWest:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NorthWest = "
                },
                {
                  "kind": "Content",
                  "text": "\"NW\""
                }
              ],
              "releaseTag": "Public",
              "name": "NorthWest",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!PlacementToken.Right:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Right = "
                },
                {
                  "kind": "Content",
                  "text": "\"R\""
                }
              ],
              "releaseTag": "Public",
              "name": "Right",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!PlacementToken.South:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "South = "
                },
                {
                  "kind": "Content",
                  "text": "\"S\""
                }
              ],
              "releaseTag": "Public",
              "name": "South",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!PlacementToken.SouthEast:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SouthEast = "
                },
                {
                  "kind": "Content",
                  "text": "\"SE\""
                }
              ],
              "releaseTag": "Public",
              "name": "SouthEast",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!PlacementToken.SouthWest:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SouthWest = "
                },
                {
                  "kind": "Content",
                  "text": "\"SW\""
                }
              ],
              "releaseTag": "Public",
              "name": "SouthWest",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!PlacementToken.Top:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Top = "
                },
                {
                  "kind": "Content",
                  "text": "\"T\""
                }
              ],
              "releaseTag": "Public",
              "name": "Top",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!PlacementToken.TopLeft:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TopLeft = "
                },
                {
                  "kind": "Content",
                  "text": "\"TL\""
                }
              ],
              "releaseTag": "Public",
              "name": "TopLeft",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!PlacementToken.TopRight:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TopRight = "
                },
                {
                  "kind": "Content",
                  "text": "\"TR\""
                }
              ],
              "releaseTag": "Public",
              "name": "TopRight",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!PlacementToken.West:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "West = "
                },
                {
                  "kind": "Content",
                  "text": "\"W\""
                }
              ],
              "releaseTag": "Public",
              "name": "West",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!PoiGeometry:interface",
          "docComment": "/**\n * Structured clone compliant version of a `three.js` geometry object with points of interest (POIs) to be rendered. It is composed of buffers with metadata for POI objects.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PoiGeometry "
            }
          ],
          "releaseTag": "Public",
          "name": "PoiGeometry",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiGeometry#imageTextures:member",
              "docComment": "/**\n * Names of the image texture or the name of the POI as indices into the array `stringCatalog`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageTextures?: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageTextures",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiGeometry#objInfos:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "objInfos?: "
                },
                {
                  "kind": "Reference",
                  "text": "AttributeMap",
                  "canonicalReference": "@here/harp-datasource-protocol!AttributeMap:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "objInfos",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiGeometry#offsetDirections:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offsetDirections?: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "offsetDirections",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiGeometry#positions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positions: "
                },
                {
                  "kind": "Reference",
                  "text": "BufferAttribute",
                  "canonicalReference": "@here/harp-datasource-protocol!BufferAttribute:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "positions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiGeometry#stringCatalog:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stringCatalog?: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stringCatalog",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiGeometry#technique:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "technique?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "technique",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiGeometry#texts:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "texts: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "texts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!Point:interface",
          "docComment": "/**\n * Represents \"Point\" GeoJSON geometry object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Point "
            }
          ],
          "releaseTag": "Public",
          "name": "Point",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Point#coordinates:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "coordinates: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "coordinates",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Point#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "\"Point\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!PointTechniqueParams:interface",
          "docComment": "/**\n * Possible parameters of [[PointTechnique]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PointTechniqueParams extends "
            },
            {
              "kind": "Reference",
              "text": "BaseTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PointTechniqueParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PointTechniqueParams#color:member",
              "docComment": "/**\n * Color of a point in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleColor",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleColor:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PointTechniqueParams#enablePicking:member",
              "docComment": "/**\n * Whether to enable picking on these points.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enablePicking?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enablePicking",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PointTechniqueParams#opacity:member",
              "docComment": "/**\n * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally opaque.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "opacity?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "opacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PointTechniqueParams#size:member",
              "docComment": "/**\n * Size of point in pixels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PointTechniqueParams#texture:member",
              "docComment": "/**\n * URL of a texture image to be loaded.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "texture?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "texture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PointTechniqueParams#transparent:member",
              "docComment": "/**\n * Set to `true` if line should appear transparent. Rendering transparent lines may come with a slight performance impact.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transparent?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "transparent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-datasource-protocol!pointTechniquePropTypes:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "pointTechniquePropTypes: "
            },
            {
              "kind": "Reference",
              "text": "TechniqueDescriptor",
              "canonicalReference": "@here/harp-datasource-protocol!TechniqueDescriptor:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PointTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!PointTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "pointTechniquePropTypes",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@here/harp-datasource-protocol!PoiStackMode:enum",
          "docComment": "/**\n * Define the stacking option. Enum values for theme file are in \"kebab-case\".\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum PoiStackMode "
            }
          ],
          "releaseTag": "Public",
          "name": "PoiStackMode",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!PoiStackMode.Hide:member",
              "docComment": "/**\n * Do not show in a stack.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Hide = "
                },
                {
                  "kind": "Content",
                  "text": "\"hide-in-stack\""
                }
              ],
              "releaseTag": "Public",
              "name": "Hide",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!PoiStackMode.Show:member",
              "docComment": "/**\n * Show in a stack.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Show = "
                },
                {
                  "kind": "Content",
                  "text": "\"show-in-stack\""
                }
              ],
              "releaseTag": "Public",
              "name": "Show",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!PoiStackMode.ShowParent:member",
              "docComment": "/**\n * Show category parent in the stack.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ShowParent = "
                },
                {
                  "kind": "Content",
                  "text": "\"show-parent\""
                }
              ],
              "releaseTag": "Public",
              "name": "ShowParent",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!PoiStyle:type",
          "docComment": "/**\n * Render feature as POIs (icons and text) rendered in screen space.\n *\n * @see [[MarkerTechniqueParams]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PoiStyle = "
            },
            {
              "kind": "Reference",
              "text": "BaseStyle",
              "canonicalReference": "@here/harp-datasource-protocol!BaseStyle:type"
            },
            {
              "kind": "Content",
              "text": "<\"labeled-icon\", "
            },
            {
              "kind": "Reference",
              "text": "MarkerTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PoiStyle",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!PoiTableDef:interface",
          "docComment": "/**\n * Interface for the JSON description of the [[PoiTable]]. It is being implemented in [[PoiTable]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PoiTableDef "
            }
          ],
          "releaseTag": "Public",
          "name": "PoiTableDef",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiTableDef#name:member",
              "docComment": "/**\n * Name of the `PoiTable`. Must be unique.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiTableDef#poiList:member",
              "docComment": "/**\n * Stores the list of [[PoiTableEntry]]s.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "poiList?: "
                },
                {
                  "kind": "Reference",
                  "text": "PoiTableEntryDef",
                  "canonicalReference": "@here/harp-datasource-protocol!PoiTableEntryDef:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "poiList",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!PoiTableEntryDef:interface",
          "docComment": "/**\n * Interface for the JSON description of the [[PoiTableEntry]]. The interface is being implemented as [[PoiTableEntry]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PoiTableEntryDef "
            }
          ],
          "releaseTag": "Public",
          "name": "PoiTableEntryDef",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiTableEntryDef#altNames:member",
              "docComment": "/**\n * Alternative names of the POI.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "altNames?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "altNames",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiTableEntryDef#iconMaxLevel:member",
              "docComment": "/**\n * Maximum zoom level to render the icon on.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconMaxLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconMaxLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiTableEntryDef#iconMinLevel:member",
              "docComment": "/**\n * Minimum zoom level to render the icon on.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconMinLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconMinLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiTableEntryDef#iconName:member",
              "docComment": "/**\n * Name of the icon, defined in the the texture atlases.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiTableEntryDef#name:member",
              "docComment": "/**\n * Default name of the POI as the key for looking it up.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiTableEntryDef#priority:member",
              "docComment": "/**\n * Priority of the POI to select the visible set in case there are more POIs than can be handled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "priority?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "priority",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiTableEntryDef#stackMode:member",
              "docComment": "/**\n * Stacking mode of the POI. For future use.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stackMode?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stackMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiTableEntryDef#textMaxLevel:member",
              "docComment": "/**\n * Maximum zoom level to render the text label on.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textMaxLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textMaxLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiTableEntryDef#textMinLevel:member",
              "docComment": "/**\n * Minimum zoom level to render the text label on.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textMinLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textMinLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiTableEntryDef#visible:member",
              "docComment": "/**\n * Visibility of the POI. If `false`, the POI will not be rendered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visible?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "visible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!PoiTableRef:interface",
          "docComment": "/**\n * Definition for a [[PoiTable]] reference as part of the [[Theme]] object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PoiTableRef "
            }
          ],
          "releaseTag": "Public",
          "name": "PoiTableRef",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiTableRef#name:member",
              "docComment": "/**\n * Required name of the [[PoiTable]] for later reference.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiTableRef#url:member",
              "docComment": "/**\n * Required URL from where to load [[PoiTable]].\n *\n * Should refer to JSON that is matched [[PoiTableDef]] interface.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiTableRef#useAltNamesForKey:member",
              "docComment": "/**\n * If set to `true`, the list of values in the field \"altNames\" will be used as names for this POI.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "useAltNamesForKey: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "useAltNamesForKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!PoiTechnique:interface",
          "docComment": "/**\n * Runtime representation of [[PoiStyle]] as parsed by [[StyleSetEvaluator]]. For technique parameters see [[MarkerTechniqueParams]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PoiTechnique extends "
            },
            {
              "kind": "Reference",
              "text": "MakeTechniqueAttrs",
              "canonicalReference": "@here/harp-datasource-protocol!MakeTechniqueAttrs:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MarkerTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!MarkerTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "PoiTechnique",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PoiTechnique#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "\"labeled-icon\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!Polygon:interface",
          "docComment": "/**\n * Represents \"Polygon\" GeoJSON geometry object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Polygon "
            }
          ],
          "releaseTag": "Public",
          "name": "Polygon",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Polygon#coordinates:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "coordinates: "
                },
                {
                  "kind": "Content",
                  "text": "number[][][]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "coordinates",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Polygon#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "\"Polygon\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!PolygonalTechniqueParams:interface",
          "docComment": "/**\n * Declares a a geometry as a polygon.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PolygonalTechniqueParams "
            }
          ],
          "releaseTag": "Public",
          "name": "PolygonalTechniqueParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PolygonalTechniqueParams#lineColor:member",
              "docComment": "/**\n * Sets the polygon outline color.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleColor",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleColor:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lineColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PolygonalTechniqueParams#lineFadeFar:member",
              "docComment": "/**\n * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become transparent. A value of <= 0.0 disables fading.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineFadeFar?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lineFadeFar",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PolygonalTechniqueParams#lineFadeNear:member",
              "docComment": "/**\n * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start fading out.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineFadeNear?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lineFadeNear",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PolygonalTechniqueParams#polygonOffset:member",
              "docComment": "/**\n * Whether to use polygon offset. Default is false. This corresponds to the GL_POLYGON_OFFSET_FILL WebGL feature.\n *\n * PolygonOffset is used to raise the geometry towards the geometry (for depth calculation only). Default is false.\n *\n * See here: https://sites.google.com/site/threejstuts/home/polygon_offset\n *\n * To activate polygonOffset these values have to be set to pull the line \"forwards\":\n *\n * transparent: true\n *\n * polygonOffset: true\n *\n * polygonOffsetFactor : -1.0, (as an example, see link above)\n *\n * polygonOffsetUnits: -1 (as an example, see link above)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "polygonOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "polygonOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PolygonalTechniqueParams#polygonOffsetFactor:member",
              "docComment": "/**\n * Sets the polygon offset factor. Default is 0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "polygonOffsetFactor?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "polygonOffsetFactor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PolygonalTechniqueParams#polygonOffsetUnits:member",
              "docComment": "/**\n * Sets the polygon offset units. Default is 0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "polygonOffsetUnits?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "polygonOffsetUnits",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!PostEffects:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PostEffects "
            }
          ],
          "releaseTag": "Public",
          "name": "PostEffects",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PostEffects#bloom:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bloom?: "
                },
                {
                  "kind": "Reference",
                  "text": "IBloomEffect",
                  "canonicalReference": "@here/harp-datasource-protocol!IBloomEffect:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bloom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PostEffects#outline:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "outline?: "
                },
                {
                  "kind": "Reference",
                  "text": "IOutlineEffect",
                  "canonicalReference": "@here/harp-datasource-protocol!IOutlineEffect:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "outline",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PostEffects#sepia:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sepia?: "
                },
                {
                  "kind": "Reference",
                  "text": "ISepiaEffect",
                  "canonicalReference": "@here/harp-datasource-protocol!ISepiaEffect:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sepia",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!PostEffects#vignette:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "vignette?: "
                },
                {
                  "kind": "Reference",
                  "text": "IVignetteEffect",
                  "canonicalReference": "@here/harp-datasource-protocol!IVignetteEffect:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "vignette",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!RelationalOp:type",
          "docComment": "/**\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type RelationalOp = "
            },
            {
              "kind": "Content",
              "text": "\"<\" | \">\" | \"<=\" | \">=\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RelationalOp",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!RemoveInterpolatedPropDef:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type RemoveInterpolatedPropDef<T> = "
            },
            {
              "kind": "Content",
              "text": "T | "
            },
            {
              "kind": "Reference",
              "text": "InterpolatedPropertyDefinition",
              "canonicalReference": "@here/harp-datasource-protocol!InterpolatedPropertyDefinition:interface"
            },
            {
              "kind": "Content",
              "text": "<any> extends T ? "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<T, "
            },
            {
              "kind": "Reference",
              "text": "InterpolatedPropertyDefinition",
              "canonicalReference": "@here/harp-datasource-protocol!InterpolatedPropertyDefinition:interface"
            },
            {
              "kind": "Content",
              "text": "<any>> : T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RemoveInterpolatedPropDef",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!RemoveJsonExpr:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type RemoveJsonExpr<T> = "
            },
            {
              "kind": "Content",
              "text": "T | "
            },
            {
              "kind": "Reference",
              "text": "JsonExpr",
              "canonicalReference": "@here/harp-datasource-protocol!JsonExpr:type"
            },
            {
              "kind": "Content",
              "text": " extends T ? "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<T, "
            },
            {
              "kind": "Reference",
              "text": "JsonExpr",
              "canonicalReference": "@here/harp-datasource-protocol!JsonExpr:type"
            },
            {
              "kind": "Content",
              "text": "> : T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RemoveJsonExpr",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-datasource-protocol!RequestController:class",
          "docComment": "/**\n * Allows to cancel and prioritize requests inside the requestQueue. Useful to optimize the order of decoding tiles during animations and camera movements.\n *\n * `RequestController` is not extending [[AbortController]], because this is not supported in ES5.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class RequestController implements "
            },
            {
              "kind": "Reference",
              "text": "AbortController",
              "canonicalReference": "!AbortController:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "RequestController",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-datasource-protocol!RequestController:constructor(1)",
              "docComment": "/**\n * Creates an instance of `RequestController`.\n *\n * @param priority - \n *\n * @param abortController - Optional [[AbortController]] used internally, since [[AbortController]]s should not be subclassed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(priority?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", abortController?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbortController",
                  "canonicalReference": "!AbortController:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "priority",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "abortController",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!RequestController#abort:member(1)",
              "docComment": "/**\n * Invoking this method will set this object's AbortSignal's aborted flag and signal to any observers that the associated activity is to be aborted.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abort(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "abort"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!RequestController#abortController:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abortController: "
                },
                {
                  "kind": "Reference",
                  "text": "AbortController",
                  "canonicalReference": "!AbortController:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "abortController",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!RequestController#priority:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "priority: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "priority",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!RequestController#signal:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get signal(): "
                },
                {
                  "kind": "Reference",
                  "text": "AbortSignal",
                  "canonicalReference": "!AbortSignal:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "signal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!ResolvedStyleDeclaration:type",
          "docComment": "/**\n * Like [[StyleDeclaration]], but without [[Reference]] type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ResolvedStyleDeclaration = "
            },
            {
              "kind": "Reference",
              "text": "Style",
              "canonicalReference": "@here/harp-datasource-protocol!Style:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "StyleSelector",
              "canonicalReference": "@here/harp-datasource-protocol!StyleSelector:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ResolvedStyleDeclaration",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!ResolvedStyleSet:type",
          "docComment": "/**\n * Like [[StyleSet]], but without [[Reference]] type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ResolvedStyleSet = "
            },
            {
              "kind": "Reference",
              "text": "ResolvedStyleDeclaration",
              "canonicalReference": "@here/harp-datasource-protocol!ResolvedStyleDeclaration:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ResolvedStyleSet",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!SegmentsStyle:type",
          "docComment": "/**\n * Render feature as segments.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SegmentsStyle = "
            },
            {
              "kind": "Reference",
              "text": "BaseStyle",
              "canonicalReference": "@here/harp-datasource-protocol!BaseStyle:type"
            },
            {
              "kind": "Content",
              "text": "<\"segments\", "
            },
            {
              "kind": "Reference",
              "text": "SegmentsTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!SegmentsTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SegmentsStyle",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!SegmentsTechnique:interface",
          "docComment": "/**\n * Runtime representation of [[SegmentsStyle]] as parsed by [[StyleSetEvaluator]]. For technique parameters see [[SegmentsTechniqueParams]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SegmentsTechnique extends "
            },
            {
              "kind": "Reference",
              "text": "MakeTechniqueAttrs",
              "canonicalReference": "@here/harp-datasource-protocol!MakeTechniqueAttrs:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SegmentsTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!SegmentsTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "SegmentsTechnique",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SegmentsTechnique#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "\"segments\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!SegmentsTechniqueParams:interface",
          "docComment": "/**\n * Declares a geometry as a segment.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SegmentsTechniqueParams extends "
            },
            {
              "kind": "Reference",
              "text": "BaseTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SegmentsTechniqueParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SegmentsTechniqueParams#color:member",
              "docComment": "/**\n * Color of segments in a hexadecimal notation, for example: `\"#e4e9ec\"` or `\"#fff\"`.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleColor",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleColor:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SegmentsTechniqueParams#lineWidth:member",
              "docComment": "/**\n * Width of a line in meters.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineWidth: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lineWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SegmentsTechniqueParams#opacity:member",
              "docComment": "/**\n * For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully opaque.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "opacity?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "opacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SegmentsTechniqueParams#transparent:member",
              "docComment": "/**\n * Set to `true` if line should appear transparent. Rendering transparent lines may come with a slight performance impact.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transparent?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "transparent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!ShaderStyle:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ShaderStyle = "
            },
            {
              "kind": "Reference",
              "text": "BaseStyle",
              "canonicalReference": "@here/harp-datasource-protocol!BaseStyle:type"
            },
            {
              "kind": "Content",
              "text": "<\"shader\", "
            },
            {
              "kind": "Reference",
              "text": "ShaderTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!ShaderTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ShaderStyle",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!ShaderTechnique:interface",
          "docComment": "/**\n * Special technique for user-defined shaders. For technique parameters see [[ShaderTechniqueParams]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ShaderTechnique extends "
            },
            {
              "kind": "Reference",
              "text": "MakeTechniqueAttrs",
              "canonicalReference": "@here/harp-datasource-protocol!MakeTechniqueAttrs:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ShaderTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!ShaderTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ShaderTechnique",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ShaderTechnique#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "\"shader\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!ShaderTechniqueMaterialParameters:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ShaderTechniqueMaterialParameters "
            }
          ],
          "releaseTag": "Public",
          "name": "ShaderTechniqueMaterialParameters",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ShaderTechniqueMaterialParameters:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!ShaderTechniqueParams:interface",
          "docComment": "/**\n * Special technique for user-defined shaders. See https://threejs.org/docs/#api/harp-materials/ShaderMaterial for details.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ShaderTechniqueParams extends "
            },
            {
              "kind": "Reference",
              "text": "BaseTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ShaderTechniqueParams",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ShaderTechniqueParams:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ShaderTechniqueParams#params:member",
              "docComment": "/**\n * Parameters for shader. See `THREE.ShaderMaterialParameters`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "params: "
                },
                {
                  "kind": "Reference",
                  "text": "ShaderTechniqueMaterialParameters",
                  "canonicalReference": "@here/harp-datasource-protocol!ShaderTechniqueMaterialParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "params",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ShaderTechniqueParams#primitive:member",
              "docComment": "/**\n * Type of primitive for the shader technique. Valid values are \"point\" | \"line\" | \"segments\" | \"mesh\"\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "primitive: "
                },
                {
                  "kind": "Content",
                  "text": "\"point\" | \"line\" | \"segments\" | \"mesh\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "primitive",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!ShaderTechniqueParams#transparent:member",
              "docComment": "/**\n * Set to 'true' if line should appear transparent. Rendering transparent lines may come with a slight performance impact. See https://threejs.org/docs/#api/en/materials/Material.transparent.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transparent?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "transparent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!Sky:type",
          "docComment": "/**\n * Interface that defines the options to configure the sky.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Sky = "
            },
            {
              "kind": "Reference",
              "text": "GradientSky",
              "canonicalReference": "@here/harp-datasource-protocol!GradientSky:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "CubemapSky",
              "canonicalReference": "@here/harp-datasource-protocol!CubemapSky:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Sky",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!SolidLineStyle:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SolidLineStyle = "
            },
            {
              "kind": "Reference",
              "text": "BaseStyle",
              "canonicalReference": "@here/harp-datasource-protocol!BaseStyle:type"
            },
            {
              "kind": "Content",
              "text": "<\"solid-line\" | \"dashed-line\", "
            },
            {
              "kind": "Reference",
              "text": "SolidLineTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SolidLineStyle",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechnique:interface",
          "docComment": "/**\n * Runtime representation of [[SolidLineStyle]] as parsed by [[StyleSetEvaluator]]. For technique parameters see [[SolidLineTechniqueParams]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SolidLineTechnique extends "
            },
            {
              "kind": "Reference",
              "text": "MakeTechniqueAttrs",
              "canonicalReference": "@here/harp-datasource-protocol!MakeTechniqueAttrs:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SolidLineTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "SolidLineTechnique",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechnique#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "\"solid-line\" | \"dashed-line\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-datasource-protocol!solidLineTechniqueDescriptor:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "solidLineTechniqueDescriptor: "
            },
            {
              "kind": "Reference",
              "text": "TechniqueDescriptor",
              "canonicalReference": "@here/harp-datasource-protocol!TechniqueDescriptor:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SolidLineTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "solidLineTechniqueDescriptor",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams:interface",
          "docComment": "/**\n * Declares a a geometry as a solid line.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SolidLineTechniqueParams extends "
            },
            {
              "kind": "Reference",
              "text": "BaseTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "PolygonalTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!PolygonalTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SolidLineTechniqueParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams#caps:member",
              "docComment": "/**\n * Describes line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`). Default is `\"Round\"`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "caps?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "LineCaps",
                  "canonicalReference": "@here/harp-datasource-protocol!LineCaps:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "caps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams#clipping:member",
              "docComment": "/**\n * Clip the line outside the tile if `true`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clipping?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "clipping",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams#color:member",
              "docComment": "/**\n * Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleColor",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleColor:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams#dashColor:member",
              "docComment": "/**\n * Color of a line dashes in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dashColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleColor",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleColor:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dashColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams#dashes:member",
              "docComment": "/**\n * Describes line dash type (`\"Round\"`, `\"Square\"`, `\"Diamond\"`). Default is `\"Square\"`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dashes?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "LineDashes",
                  "canonicalReference": "@here/harp-datasource-protocol!LineDashes:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dashes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams#dashSize:member",
              "docComment": "/**\n * Length of a line in meters for different zoom levels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dashSize?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleLength",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleLength:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dashSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams#drawRangeEnd:member",
              "docComment": "/**\n * Describes the ending drawing position for the line (in the range [0...1]). Default is `1.0`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "drawRangeEnd?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "drawRangeEnd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams#drawRangeStart:member",
              "docComment": "/**\n * Describes the starting drawing position for the line (in the range [0...1]). Default is `0.0`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "drawRangeStart?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "drawRangeStart",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams#gapSize:member",
              "docComment": "/**\n * Size of a gap between lines in meters for different zoom levels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gapSize?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleLength",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleLength:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "gapSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams#lineWidth:member",
              "docComment": "/**\n * Width of a line in `metricUnit` for different zoom levels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineWidth: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleLength",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleLength:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lineWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams#metricUnit:member",
              "docComment": "/**\n * @deprecated\n *\n * Specify metrics units as part of the value instead. Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "metricUnit?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "metricUnit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams#offset:member",
              "docComment": "/**\n * Size in world units how far to offset the line perpendicular to its direction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "offset?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "offset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams#opacity:member",
              "docComment": "/**\n * For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully opaque.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "opacity?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "opacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams#outlineColor:member",
              "docComment": "/**\n * Color of a line outline in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "outlineColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleColor",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleColor:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "outlineColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams#outlineWidth:member",
              "docComment": "/**\n * Outline width of a line in `metricUnit`s for different zoom levels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "outlineWidth?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleLength",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleLength:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "outlineWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams#secondaryCaps:member",
              "docComment": "/**\n * Describes secondary line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`). Default is `\"Round\"`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "secondaryCaps?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "LineCaps",
                  "canonicalReference": "@here/harp-datasource-protocol!LineCaps:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "secondaryCaps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams#secondaryCategory:member",
              "docComment": "/**\n * Describes the category of the secondary geometry object created using this technique.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "secondaryCategory?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "secondaryCategory",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams#secondaryColor:member",
              "docComment": "/**\n * Color of secondary line geometry in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "secondaryColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleColor",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleColor:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "secondaryColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams#secondaryRenderOrder:member",
              "docComment": "/**\n * The render order of the secondary line geometry object created using this technique.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "secondaryRenderOrder?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "secondaryRenderOrder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams#secondaryWidth:member",
              "docComment": "/**\n * Width of secondary line geometry in `metricUnit`s for different zoom levels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "secondaryWidth?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleLength",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleLength:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "secondaryWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechniqueParams#transparent:member",
              "docComment": "/**\n * Set to `true` if line should appear transparent. Rendering transparent lines may come with a slight performance impact.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transparent?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "transparent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!SquaresStyle:type",
          "docComment": "/**\n * Render feature as set of squares rendered in screen space.\n *\n * @see [[PointTechniqueParams]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SquaresStyle = "
            },
            {
              "kind": "Reference",
              "text": "BaseStyle",
              "canonicalReference": "@here/harp-datasource-protocol!BaseStyle:type"
            },
            {
              "kind": "Content",
              "text": "<\"squares\", "
            },
            {
              "kind": "Reference",
              "text": "PointTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!PointTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SquaresStyle",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!SquaresTechnique:interface",
          "docComment": "/**\n * Runtime representation of [[SquaresStyle]] as parsed by [[StyleSetEvaluator]]. For technique parameters see [[PointTechniqueParams]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SquaresTechnique extends "
            },
            {
              "kind": "Reference",
              "text": "MakeTechniqueAttrs",
              "canonicalReference": "@here/harp-datasource-protocol!MakeTechniqueAttrs:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PointTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!PointTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "SquaresTechnique",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!SquaresTechnique#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "\"squares\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-datasource-protocol!squaresTechniquePropTypes:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "squaresTechniquePropTypes: "
            },
            {
              "kind": "Reference",
              "text": "TechniqueDescriptor",
              "canonicalReference": "@here/harp-datasource-protocol!TechniqueDescriptor:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SquaresTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!SquaresTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            }
          ],
          "releaseTag": "Public",
          "name": "squaresTechniquePropTypes",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!StandardExtrudedLineStyle:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type StandardExtrudedLineStyle = "
            },
            {
              "kind": "Reference",
              "text": "BaseStyle",
              "canonicalReference": "@here/harp-datasource-protocol!BaseStyle:type"
            },
            {
              "kind": "Content",
              "text": "<\"extruded-line\", "
            },
            {
              "kind": "Reference",
              "text": "StandardExtrudedLineTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!StandardExtrudedLineTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "StandardExtrudedLineStyle",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!StandardExtrudedLineTechnique:interface",
          "docComment": "/**\n * Runtime representation of [[StandardExtrudedLineStyle]] as parsed by [[StyleSetEvaluator]]. For technique parameters see [[StandardExtrudedLineTechniqueParams]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StandardExtrudedLineTechnique extends "
            },
            {
              "kind": "Reference",
              "text": "MakeTechniqueAttrs",
              "canonicalReference": "@here/harp-datasource-protocol!MakeTechniqueAttrs:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "StandardExtrudedLineTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!StandardExtrudedLineTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "StandardExtrudedLineTechnique",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardExtrudedLineTechnique#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "\"extruded-line\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!StandardExtrudedLineTechniqueParams:interface",
          "docComment": "/**\n * Declares a a geometry as a standard extruded line.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StandardExtrudedLineTechniqueParams extends "
            },
            {
              "kind": "Reference",
              "text": "StandardTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "PolygonalTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!PolygonalTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "StandardExtrudedLineTechniqueParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardExtrudedLineTechniqueParams#caps:member",
              "docComment": "/**\n * Style of both end caps. Possible values: `\"None\"`, `\"Circle\"`. A value of undefined maps to `\"Circle\"`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "caps?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<\"None\" | \"Circle\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "caps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardExtrudedLineTechniqueParams#lineWidth:member",
              "docComment": "/**\n * Width of a line in meters for different zoom levels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineWidth: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lineWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardExtrudedLineTechniqueParams#shading:member",
              "docComment": "/**\n * A value determining the shading technique. Valid values are `\"basic\"` and `\"standard\"`. Default is `\"basic\"`.\n *\n * `\"basic\"` : Simple shading, faster to render. Only simple color and opacity are effective. `\"standard\"` : Elaborate shading, with metalness, and roughness.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shading: "
                },
                {
                  "kind": "Content",
                  "text": "\"standard\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shading",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@here/harp-datasource-protocol!StandardGeometryKind:enum",
          "docComment": "/**\n * Standard kinds of geometry.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum StandardGeometryKind "
            }
          ],
          "releaseTag": "Public",
          "name": "StandardGeometryKind",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!StandardGeometryKind.All:member",
              "docComment": "/**\n * Used in the enabledKinds/disabledKinds filter to match any kind.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "All = "
                },
                {
                  "kind": "Content",
                  "text": "\"_all_\""
                }
              ],
              "releaseTag": "Public",
              "name": "All",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!StandardGeometryKind.Area:member",
              "docComment": "/**\n * Default value for the FillTechnique.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Area = "
                },
                {
                  "kind": "Content",
                  "text": "\"area\""
                }
              ],
              "releaseTag": "Public",
              "name": "Area",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!StandardGeometryKind.Background:member",
              "docComment": "/**\n * Background geometry.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Background = "
                },
                {
                  "kind": "Content",
                  "text": "\"background\""
                }
              ],
              "releaseTag": "Public",
              "name": "Background",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!StandardGeometryKind.Border:member",
              "docComment": "/**\n * Political borders.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Border = "
                },
                {
                  "kind": "Content",
                  "text": "\"border\""
                }
              ],
              "releaseTag": "Public",
              "name": "Border",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!StandardGeometryKind.Building:member",
              "docComment": "/**\n * Default value for the ExtrudedPolygonTechnique.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Building = "
                },
                {
                  "kind": "Content",
                  "text": "\"building\""
                }
              ],
              "releaseTag": "Public",
              "name": "Building",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!StandardGeometryKind.Detail:member",
              "docComment": "/**\n * Anything that may show up last.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Detail = "
                },
                {
                  "kind": "Content",
                  "text": "\"detail\""
                }
              ],
              "releaseTag": "Public",
              "name": "Detail",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!StandardGeometryKind.Label:member",
              "docComment": "/**\n * Default value for the TextTechnique, LineMarkerTechnique and the PoiTechnique.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Label = "
                },
                {
                  "kind": "Content",
                  "text": "\"label\""
                }
              ],
              "releaseTag": "Public",
              "name": "Label",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!StandardGeometryKind.Line:member",
              "docComment": "/**\n * Default value for all line techniques.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Line = "
                },
                {
                  "kind": "Content",
                  "text": "\"line\""
                }
              ],
              "releaseTag": "Public",
              "name": "Line",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!StandardGeometryKind.Road:member",
              "docComment": "/**\n * Basis for all roads.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Road = "
                },
                {
                  "kind": "Content",
                  "text": "\"road\""
                }
              ],
              "releaseTag": "Public",
              "name": "Road",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!StandardGeometryKind.Terrain:member",
              "docComment": "/**\n * Terrain geometry.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Terrain = "
                },
                {
                  "kind": "Content",
                  "text": "\"terrain\""
                }
              ],
              "releaseTag": "Public",
              "name": "Terrain",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!StandardGeometryKind.Water:member",
              "docComment": "/**\n * Default value for the FillTechnique.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Water = "
                },
                {
                  "kind": "Content",
                  "text": "\"water\""
                }
              ],
              "releaseTag": "Public",
              "name": "Water",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!StandardStyle:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type StandardStyle = "
            },
            {
              "kind": "Reference",
              "text": "BaseStyle",
              "canonicalReference": "@here/harp-datasource-protocol!BaseStyle:type"
            },
            {
              "kind": "Content",
              "text": "<\"standard\", "
            },
            {
              "kind": "Reference",
              "text": "StandardTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "StandardStyle",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!StandardTechnique:interface",
          "docComment": "/**\n * Technique used to render a mesh geometry. For technique parameters see [[StandardTechniqueParams]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StandardTechnique extends "
            },
            {
              "kind": "Reference",
              "text": "MakeTechniqueAttrs",
              "canonicalReference": "@here/harp-datasource-protocol!MakeTechniqueAttrs:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "StandardTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "StandardTechnique",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechnique#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "\"standard\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams:interface",
          "docComment": "/**\n * Standard technique parameters.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StandardTechniqueParams extends "
            },
            {
              "kind": "Reference",
              "text": "BaseTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "StandardTechniqueParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#alphaMap:member",
              "docComment": "/**\n * URL or texture buffer that should be used as alpha map. See: https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.alphaMap\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alphaMap?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "TextureBuffer",
                  "canonicalReference": "@here/harp-datasource-protocol!TextureBuffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "alphaMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#alphaMapProperties:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alphaMapProperties?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureProperties",
                  "canonicalReference": "@here/harp-datasource-protocol!TextureProperties:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "alphaMapProperties",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#alphaTest:member",
              "docComment": "/**\n * The material will not be rendered if the opacity is lower than this value. See https://threejs.org/docs/#api/en/materials/Material.alphaTest.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alphaTest?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "alphaTest",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#bumpMap:member",
              "docComment": "/**\n * URL or texture buffer that should be used as bump map. See: https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpMap\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bumpMap?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "TextureBuffer",
                  "canonicalReference": "@here/harp-datasource-protocol!TextureBuffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bumpMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#bumpMapProperties:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bumpMapProperties?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureProperties",
                  "canonicalReference": "@here/harp-datasource-protocol!TextureProperties:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bumpMapProperties",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#color:member",
              "docComment": "/**\n * Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`. See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleColor",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleColor:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#depthTest:member",
              "docComment": "/**\n * Skip rendering clobbered pixels. See https://threejs.org/docs/#api/en/materials/Material.depthTest.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "depthTest?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "depthTest",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#displacementMap:member",
              "docComment": "/**\n * URL or texture buffer that should be used as displacement map. See: https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementMap\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "displacementMap?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "TextureBuffer",
                  "canonicalReference": "@here/harp-datasource-protocol!TextureBuffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "displacementMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#displacementMapProperties:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "displacementMapProperties?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureProperties",
                  "canonicalReference": "@here/harp-datasource-protocol!TextureProperties:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "displacementMapProperties",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#emissive:member",
              "docComment": "/**\n * Emissive (light) color of the material, essentially a solid color unaffected by other lighting. Default is black. See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emissive?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleColor",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleColor:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "emissive",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#emissiveIntensity:member",
              "docComment": "/**\n * Intensity of the emissive light. Modulates the emissive color. Default is `1`. See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emissiveIntensity?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "emissiveIntensity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#emissiveMap:member",
              "docComment": "/**\n * URL or texture buffer that should be used as emissive map. See: https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveMap\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emissiveMap?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "TextureBuffer",
                  "canonicalReference": "@here/harp-datasource-protocol!TextureBuffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "emissiveMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#emissiveMapProperties:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emissiveMapProperties?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureProperties",
                  "canonicalReference": "@here/harp-datasource-protocol!TextureProperties:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "emissiveMapProperties",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#map:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "map?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "TextureBuffer",
                  "canonicalReference": "@here/harp-datasource-protocol!TextureBuffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "map",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#mapProperties:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mapProperties?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureProperties",
                  "canonicalReference": "@here/harp-datasource-protocol!TextureProperties:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mapProperties",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#metalness:member",
              "docComment": "/**\n * How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`, metallic ones use `1.0`, with nothing (usually) in between. Default is `0.0`. A value between `0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both values are multiplied. See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "metalness?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "metalness",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#metalnessMap:member",
              "docComment": "/**\n * URL or texture buffer that should be used as metalness map. See: https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalnessMap\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "metalnessMap?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "TextureBuffer",
                  "canonicalReference": "@here/harp-datasource-protocol!TextureBuffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "metalnessMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#metalnessMapProperties:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "metalnessMapProperties?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureProperties",
                  "canonicalReference": "@here/harp-datasource-protocol!TextureProperties:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "metalnessMapProperties",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#normalMap:member",
              "docComment": "/**\n * URL or texture buffer that should be used as normal map. See: https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMap\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "normalMap?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "TextureBuffer",
                  "canonicalReference": "@here/harp-datasource-protocol!TextureBuffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "normalMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#normalMapProperties:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "normalMapProperties?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureProperties",
                  "canonicalReference": "@here/harp-datasource-protocol!TextureProperties:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "normalMapProperties",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#normalMapType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "normalMapType?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "normalMapType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#opacity:member",
              "docComment": "/**\n * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally opaque. See https://threejs.org/docs/#api/en/materials/Material.opacity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "opacity?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "opacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#refractionRatio:member",
              "docComment": "/**\n * The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of the material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and `THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default is `0.98`. See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "refractionRatio?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "refractionRatio",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#roughness:member",
              "docComment": "/**\n * How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully diffuse. Default is `1.0`. See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "roughness?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "roughness",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#roughnessMap:member",
              "docComment": "/**\n * URL or texture buffer that should be used as roughness map. See: https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughnessMap\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "roughnessMap?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "TextureBuffer",
                  "canonicalReference": "@here/harp-datasource-protocol!TextureBuffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "roughnessMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#roughnessMapProperties:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "roughnessMapProperties?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureProperties",
                  "canonicalReference": "@here/harp-datasource-protocol!TextureProperties:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "roughnessMapProperties",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#textureCoordinateType:member",
              "docComment": "/**\n * Whether and how texture coordinates should be generated. No texture coordinates are generated if `undefined`. Should be set if any texture assigned (e.g. `map`, `normalMap`, ...).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textureCoordinateType?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextureCoordinateType",
                  "canonicalReference": "@here/harp-datasource-protocol!TextureCoordinateType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textureCoordinateType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#transparent:member",
              "docComment": "/**\n * Set to 'true' if line should appear transparent. Rendering transparent lines may come with a slight performance impact. See https://threejs.org/docs/#api/en/materials/Material.transparent.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transparent?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "transparent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#vertexColors:member",
              "docComment": "/**\n * If `vertexColors` is `true`, every vertex has color information, which is interpolated between vertices. See https://threejs.org/docs/#api/en/materials/Material.vertexColors.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "vertexColors?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "vertexColors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams#wireframe:member",
              "docComment": "/**\n * A value of `true` creates a wireframe geometry. (May not be supported with all techniques). See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wireframe?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "wireframe",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-datasource-protocol!StepExpr:class",
          "docComment": "/**\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class StepExpr extends "
            },
            {
              "kind": "Reference",
              "text": "Expr",
              "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "StepExpr",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-datasource-protocol!StepExpr:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `StepExpr` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(input: "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": ", defaultValue: "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": ", stops: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<[number, "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": "]>"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "defaultValue",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "stops",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!StepExpr#accept:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accept<Result, Context>(visitor: "
                },
                {
                  "kind": "Reference",
                  "text": "ExprVisitor",
                  "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor:interface"
                },
                {
                  "kind": "Content",
                  "text": "<Result, Context>"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "visitor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Result",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "Context",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "accept"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!StepExpr#defaultValue:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly defaultValue: "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultValue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!StepExpr#exprIsDynamic:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected exprIsDynamic(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "exprIsDynamic"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!StepExpr#input:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly input: "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "input",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!StepExpr#stops:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly stops: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<[number, "
                },
                {
                  "kind": "Reference",
                  "text": "Expr",
                  "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
                },
                {
                  "kind": "Content",
                  "text": "]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stops",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-datasource-protocol!StringEncodedColorFormats:var",
          "docComment": "/**\n * Array of all supported [[StringEncodedNumeralFormat]]s describing color data.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "StringEncodedColorFormats: "
            },
            {
              "kind": "Reference",
              "text": "StringEncodedNumeralFormat",
              "canonicalReference": "@here/harp-datasource-protocol!StringEncodedNumeralFormat:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            }
          ],
          "releaseTag": "Public",
          "name": "StringEncodedColorFormats",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-datasource-protocol!StringEncodedMetricFormats:var",
          "docComment": "/**\n * Array of all supported [[StringEncodedNumeralFormat]]s describing sizes, lengths and distances.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "StringEncodedMetricFormats: "
            },
            {
              "kind": "Reference",
              "text": "StringEncodedNumeralFormat",
              "canonicalReference": "@here/harp-datasource-protocol!StringEncodedNumeralFormat:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            }
          ],
          "releaseTag": "Public",
          "name": "StringEncodedMetricFormats",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!StringEncodedNumeralFormat:interface",
          "docComment": "/**\n * Interface containing information about a [[StringEncodedNumeral]] format, component size and evaluation.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StringEncodedNumeralFormat "
            }
          ],
          "releaseTag": "Public",
          "name": "StringEncodedNumeralFormat",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StringEncodedNumeralFormat#decoder:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "decoder: "
                },
                {
                  "kind": "Content",
                  "text": "(encodedValue: string, target: number[]) => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "decoder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StringEncodedNumeralFormat#mask:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mask?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mask",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StringEncodedNumeralFormat#regExp:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly regExp: "
                },
                {
                  "kind": "Reference",
                  "text": "RegExp",
                  "canonicalReference": "!RegExp:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "regExp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StringEncodedNumeralFormat#size:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly size: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StringEncodedNumeralFormat#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Reference",
                  "text": "StringEncodedNumeralType",
                  "canonicalReference": "@here/harp-datasource-protocol!StringEncodedNumeralType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-datasource-protocol!StringEncodedNumeralFormatMaxSize:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "StringEncodedNumeralFormatMaxSize: "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "releaseTag": "Public",
          "name": "StringEncodedNumeralFormatMaxSize",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-datasource-protocol!StringEncodedNumeralFormats:var",
          "docComment": "/**\n * Array of supported [[StringEncodedNumeralFormat]]s (intended to be indexed with [[StringEncodedNumeralType]] enum).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "StringEncodedNumeralFormats: "
            },
            {
              "kind": "Reference",
              "text": "StringEncodedNumeralFormat",
              "canonicalReference": "@here/harp-datasource-protocol!StringEncodedNumeralFormat:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            }
          ],
          "releaseTag": "Public",
          "name": "StringEncodedNumeralFormats",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@here/harp-datasource-protocol!StringEncodedNumeralType:enum",
          "docComment": "/**\n * Enumeration of supported string encoded numerals.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum StringEncodedNumeralType "
            }
          ],
          "releaseTag": "Public",
          "name": "StringEncodedNumeralType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!StringEncodedNumeralType.Hex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Hex = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "Hex",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!StringEncodedNumeralType.HSL:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "HSL = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "releaseTag": "Public",
              "name": "HSL",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!StringEncodedNumeralType.Meters:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Meters = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Meters",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!StringEncodedNumeralType.Pixels:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Pixels = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Pixels",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!StringEncodedNumeralType.RGB:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RGB = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "RGB",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!StringEncodedNumeralType.RGBA:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "RGBA = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Public",
              "name": "RGBA",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-datasource-protocol!StringLiteralExpr:class",
          "docComment": "/**\n * String literal expression.  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class StringLiteralExpr extends "
            },
            {
              "kind": "Reference",
              "text": "LiteralExpr",
              "canonicalReference": "@here/harp-datasource-protocol!LiteralExpr:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "StringLiteralExpr",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-datasource-protocol!StringLiteralExpr:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `StringLiteralExpr` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(value: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!StringLiteralExpr#accept:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accept<Result, Context>(visitor: "
                },
                {
                  "kind": "Reference",
                  "text": "ExprVisitor",
                  "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor:interface"
                },
                {
                  "kind": "Content",
                  "text": "<Result, Context>"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "visitor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Result",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "Context",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "accept"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!StringLiteralExpr#promotedValue:member",
              "docComment": "/**\n * Returns the value of parsing this string as [[RGBA]] or [[Pixels]] constant.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get promotedValue(): "
                },
                {
                  "kind": "Reference",
                  "text": "RGBA",
                  "canonicalReference": "@here/harp-datasource-protocol!RGBA:class"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Pixels",
                  "canonicalReference": "@here/harp-datasource-protocol!Pixels:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "promotedValue",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!StringLiteralExpr#value:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly value: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!Style:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Style = "
            },
            {
              "kind": "Reference",
              "text": "SquaresStyle",
              "canonicalReference": "@here/harp-datasource-protocol!SquaresStyle:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "CirclesStyle",
              "canonicalReference": "@here/harp-datasource-protocol!CirclesStyle:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "PoiStyle",
              "canonicalReference": "@here/harp-datasource-protocol!PoiStyle:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "LineMarkerStyle",
              "canonicalReference": "@here/harp-datasource-protocol!LineMarkerStyle:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "LineStyle",
              "canonicalReference": "@here/harp-datasource-protocol!LineStyle:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "SegmentsStyle",
              "canonicalReference": "@here/harp-datasource-protocol!SegmentsStyle:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "SolidLineStyle",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineStyle:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "LabelRejectionLineStyle",
              "canonicalReference": "@here/harp-datasource-protocol!LabelRejectionLineStyle:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "FillStyle",
              "canonicalReference": "@here/harp-datasource-protocol!FillStyle:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "StandardStyle",
              "canonicalReference": "@here/harp-datasource-protocol!StandardStyle:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BasicExtrudedLineStyle",
              "canonicalReference": "@here/harp-datasource-protocol!BasicExtrudedLineStyle:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "StandardExtrudedLineStyle",
              "canonicalReference": "@here/harp-datasource-protocol!StandardExtrudedLineStyle:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "ExtrudedPolygonStyle",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonStyle:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "ShaderStyle",
              "canonicalReference": "@here/harp-datasource-protocol!ShaderStyle:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "TerrainStyle",
              "canonicalReference": "@here/harp-datasource-protocol!TerrainStyle:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "TextTechniqueStyle",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueStyle:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "NoneStyle",
              "canonicalReference": "@here/harp-datasource-protocol!NoneStyle:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Style",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 34
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!StyleColor:type",
          "docComment": "/**\n * Color literals.\n *\n * @remarks\n *\n * Description of colors inside a style. Supports hex values as well as CSS hex, rgb and hsl values (i.e. `0xffffff`, `#f00fab`, `#aaa`, `rgb(255, 0 120)`, `hsl(360, 100%, 100%)`, etc.).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type StyleColor = "
            },
            {
              "kind": "Content",
              "text": "string | number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "StyleColor",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!StyleDeclaration:type",
          "docComment": "/**\n * Compound type that merges all raw [Style] with selector arguments from [BaseSelector], optionally a [[Reference]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type StyleDeclaration = "
            },
            {
              "kind": "Content",
              "text": "("
            },
            {
              "kind": "Reference",
              "text": "Style",
              "canonicalReference": "@here/harp-datasource-protocol!Style:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "StyleSelector",
              "canonicalReference": "@here/harp-datasource-protocol!StyleSelector:interface"
            },
            {
              "kind": "Content",
              "text": ") | "
            },
            {
              "kind": "Reference",
              "text": "JsonExpr",
              "canonicalReference": "@here/harp-datasource-protocol!JsonExpr:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "StyleDeclaration",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!StyleLength:type",
          "docComment": "/**\n * Length literals.\n *\n * @remarks\n *\n * Description of length units inside a style. Supports literal values (interpreted as `m`), `m` and `px`(i.e. `80`, `14px`, `0.6m`, etc.).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type StyleLength = "
            },
            {
              "kind": "Content",
              "text": "string | number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "StyleLength",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!StylePriority:interface",
          "docComment": "/**\n * A type representing symbolic render orders.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StylePriority "
            }
          ],
          "releaseTag": "Public",
          "name": "StylePriority",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StylePriority#category:member",
              "docComment": "/**\n * The category of this [[StylePriority]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "category?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "category",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StylePriority#group:member",
              "docComment": "/**\n * The group of this [[StylePriority]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "group: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "group",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!Styles:interface",
          "docComment": "/**\n * A dictionary of [[StyleSet]]s.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Styles "
            }
          ],
          "releaseTag": "Public",
          "name": "Styles",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@here/harp-datasource-protocol!Styles:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[styleSetName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleSet",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleSet:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "styleSetName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!StyleSelector:interface",
          "docComment": "/**\n * Base [StyleSelector] attributes required to match [Style] object against given feature.\n *\n * Contains [Style]'s members related to feature matching in [[StyleSetEvaluator]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StyleSelector "
            }
          ],
          "releaseTag": "Public",
          "name": "StyleSelector",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StyleSelector#final:member",
              "docComment": "/**\n * Optional. If `true`, no more matching styles will be evaluated.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "final?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "final",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StyleSelector#layer:member",
              "docComment": "/**\n * The layer containing the carto features processed by this style rule.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "layer?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "layer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!StyleSelector#when:member",
              "docComment": "/**\n * Condition when this style rule applies.\n *\n * @remarks\n *\n * Condition that is applied to feature properties to check if given [[Style]] this feature should emit geometry of this style.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "when: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "JsonExpr",
                  "canonicalReference": "@here/harp-datasource-protocol!JsonExpr:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "when",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!StyleSet:type",
          "docComment": "/**\n * An array of [[StyleSelector]]s that are used together to define how a [[DataSource]] should be rendered. `StyleSet`s are applied to sources providing vector tiles via their method `setStyleSet`. This is also handle internally when a whole theme is passed to a [[MapView]] via `mapview.theme`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type StyleSet = "
            },
            {
              "kind": "Reference",
              "text": "StyleDeclaration",
              "canonicalReference": "@here/harp-datasource-protocol!StyleDeclaration:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "StyleSet",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!Technique:type",
          "docComment": "/**\n * Possible techniques that can be used to draw a geometry on the map.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Technique = "
            },
            {
              "kind": "Reference",
              "text": "SquaresTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!SquaresTechnique:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "CirclesTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!CirclesTechnique:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "PoiTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!PoiTechnique:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "LineMarkerTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!LineMarkerTechnique:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "LineTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!LineTechnique:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "SegmentsTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!SegmentsTechnique:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "SolidLineTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!SolidLineTechnique:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "FillTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!FillTechnique:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "StandardTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechnique:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "TerrainTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!TerrainTechnique:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BasicExtrudedLineTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!BasicExtrudedLineTechnique:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "StandardExtrudedLineTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!StandardExtrudedLineTechnique:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "ExtrudedPolygonTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechnique:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "ShaderTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!ShaderTechnique:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "TextTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechnique:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "LabelRejectionLineTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!LabelRejectionLineTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Technique",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 32
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-datasource-protocol!techniqueDescriptors:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "techniqueDescriptors: "
            },
            {
              "kind": "Reference",
              "text": "TechniqueDescriptorRegistry",
              "canonicalReference": "@here/harp-datasource-protocol!TechniqueDescriptorRegistry:type"
            }
          ],
          "releaseTag": "Public",
          "name": "techniqueDescriptors",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!TerrainStyle:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TerrainStyle = "
            },
            {
              "kind": "Reference",
              "text": "BaseStyle",
              "canonicalReference": "@here/harp-datasource-protocol!BaseStyle:type"
            },
            {
              "kind": "Content",
              "text": "<\"terrain\", "
            },
            {
              "kind": "Reference",
              "text": "TerrainTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!TerrainTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TerrainStyle",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!TerrainTechnique:interface",
          "docComment": "/**\n * Technique used to render a terrain geometry with textures. For technique parameters see [[TerrainTechniqueParams]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TerrainTechnique extends "
            },
            {
              "kind": "Reference",
              "text": "MakeTechniqueAttrs",
              "canonicalReference": "@here/harp-datasource-protocol!MakeTechniqueAttrs:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TerrainTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!TerrainTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "TerrainTechnique",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TerrainTechnique#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "\"terrain\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!TerrainTechniqueParams:interface",
          "docComment": "/**\n * Technique used to render a terrain geometry with a texture. When using this technique, the datasource will produce texture coordinates in local tile space (i.e. [0,0] at south-west and [1,1] at north-east tile corner).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TerrainTechniqueParams extends "
            },
            {
              "kind": "Reference",
              "text": "StandardTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!StandardTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TerrainTechniqueParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TerrainTechniqueParams#heightBasedColors:member",
              "docComment": "/**\n * Colors to be applied at different heights (as a results of a `displacementMap`).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "heightBasedColors?: "
                },
                {
                  "kind": "Reference",
                  "text": "HeightBasedColors",
                  "canonicalReference": "@here/harp-datasource-protocol!HeightBasedColors:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "heightBasedColors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TerrainTechniqueParams#heightGradientInterpolation:member",
              "docComment": "/**\n * If `heightBasedColors` is defined, this value defines the interpolation method used to generate the height-based gradient texture (defaults to `Discrete`).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "heightGradientInterpolation?: "
                },
                {
                  "kind": "Content",
                  "text": "\"Discrete\" | \"Linear\" | \"Cubic\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "heightGradientInterpolation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TerrainTechniqueParams#heightGradientWidth:member",
              "docComment": "/**\n * If `heightBasedColors` is defined, this value defines the width (in pixels) of the generated gradient texture (defaults to `128`).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "heightGradientWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "heightGradientWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!TextGeometry:interface",
          "docComment": "/**\n * Structured clone compliant version of a `three.js` geometry object with text to be rendered. It is composed of buffers with metadata for text objects.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextGeometry "
            }
          ],
          "releaseTag": "Public",
          "name": "TextGeometry",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextGeometry#objInfos:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "objInfos?: "
                },
                {
                  "kind": "Reference",
                  "text": "AttributeMap",
                  "canonicalReference": "@here/harp-datasource-protocol!AttributeMap:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "objInfos",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextGeometry#positions:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "positions: "
                },
                {
                  "kind": "Reference",
                  "text": "BufferAttribute",
                  "canonicalReference": "@here/harp-datasource-protocol!BufferAttribute:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "positions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextGeometry#stringCatalog:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stringCatalog?: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stringCatalog",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextGeometry#technique:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "technique?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "technique",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextGeometry#texts:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "texts: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "texts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!TextPathGeometry:interface",
          "docComment": "/**\n * This object keeps textual data together with metadata to place it on the map.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextPathGeometry "
            }
          ],
          "releaseTag": "Public",
          "name": "TextPathGeometry",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextPathGeometry#objInfos:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "objInfos?: "
                },
                {
                  "kind": "Reference",
                  "text": "AttributeMap",
                  "canonicalReference": "@here/harp-datasource-protocol!AttributeMap:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "objInfos",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextPathGeometry#path:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "path: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "path",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextPathGeometry#pathLengthSqr:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pathLengthSqr: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "pathLengthSqr",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextPathGeometry#technique:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "technique: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "technique",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextPathGeometry#text:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition:interface",
          "docComment": "/**\n * Various text styles used with labels and texts.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextStyleDefinition "
            }
          ],
          "releaseTag": "Public",
          "name": "TextStyleDefinition",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#backgroundColor:member",
              "docComment": "/**\n * @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backgroundColor?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "backgroundColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#backgroundOpacity:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backgroundOpacity?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "backgroundOpacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#backgroundSize:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backgroundSize?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "backgroundSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#canvasRotation:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "canvasRotation?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "canvasRotation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#color:member",
              "docComment": "/**\n * @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#fontCatalogName:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontCatalogName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fontCatalogName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#fontName:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fontName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#fontStyle:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontStyle?: "
                },
                {
                  "kind": "Content",
                  "text": "\"Regular\" | \"Bold\" | \"Italic\" | \"BoldItalic\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fontStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#fontVariant:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontVariant?: "
                },
                {
                  "kind": "Content",
                  "text": "\"Regular\" | \"AllCaps\" | \"SmallCaps\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fontVariant",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#hAlignment:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hAlignment?: "
                },
                {
                  "kind": "Content",
                  "text": "\"Left\" | \"Center\" | \"Right\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hAlignment",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#leading:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "leading?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "leading",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#lineRotation:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineRotation?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lineRotation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#lineWidth:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lineWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#maxLines:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxLines?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxLines",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#opacity:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "opacity?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "opacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#placements:member",
              "docComment": "/**\n * @format comma separated list of placement tokens, i.e. \"TR, TL, C\"  @see [[PlacementToken]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "placements?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "placements",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#rotation:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rotation?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "rotation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#size:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#tracking:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tracking?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tracking",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#vAlignment:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "vAlignment?: "
                },
                {
                  "kind": "Content",
                  "text": "\"Above\" | \"Center\" | \"Below\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "vAlignment",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition#wrappingMode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wrappingMode?: "
                },
                {
                  "kind": "Content",
                  "text": "\"None\" | \"Character\" | \"Word\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "wrappingMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!TextTechnique:interface",
          "docComment": "/**\n * Runtime representation of [[TextStyle]] as parsed by [[StyleSetEvaluator]]. For technique parameters see [[TextTechniqueParams]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextTechnique extends "
            },
            {
              "kind": "Reference",
              "text": "MakeTechniqueAttrs",
              "canonicalReference": "@here/harp-datasource-protocol!MakeTechniqueAttrs:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TextTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "TextTechnique",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechnique#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "\"text\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams:interface",
          "docComment": "/**\n * Render geometry as a text.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextTechniqueParams extends "
            },
            {
              "kind": "Reference",
              "text": "BaseTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!BaseTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TextTechniqueParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#backgroundColor:member",
              "docComment": "/**\n * Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backgroundColor?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleColor",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleColor:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "backgroundColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#backgroundOpacity:member",
              "docComment": "/**\n * Background text opacity value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backgroundOpacity?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "backgroundOpacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#backgroundSize:member",
              "docComment": "/**\n * Size of the text background (pixels).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backgroundSize?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "backgroundSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#canvasRotation:member",
              "docComment": "/**\n * [[TextCanvas]] rotation (radians).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "canvasRotation?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "canvasRotation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#color:member",
              "docComment": "/**\n * Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StyleColor",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleColor:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#distanceScale:member",
              "docComment": "/**\n * Scaling factor of the text. Defaults to 0.5, reducing the size ot 50% in the distance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "distanceScale?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "distanceScale",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#fontName:member",
              "docComment": "/**\n * Name of the preferred [[Font]] to be used when rendering.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fontName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#fontStyle:member",
              "docComment": "/**\n * Glyph style to apply for the currently active [[Font]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontStyle?: "
                },
                {
                  "kind": "Content",
                  "text": "\"Regular\" | \"Bold\" | \"Italic\" | \"BoldItalic\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fontStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#fontVariant:member",
              "docComment": "/**\n * Glyph variant to apply for the currently active [[Font]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontVariant?: "
                },
                {
                  "kind": "Content",
                  "text": "\"Regular\" | \"AllCaps\" | \"SmallCaps\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fontVariant",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#hAlignment:member",
              "docComment": "/**\n * Text position regarding the baseline.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hAlignment?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<\"Left\" | \"Center\" | \"Right\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hAlignment",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#label:member",
              "docComment": "/**\n * Field name of object containing the text to be rendered.\n *\n * @deprecated, Use `[\"get\", \"FIELD\"]`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#leading:member",
              "docComment": "/**\n * Inter-line spacing (pixels). Scaled by `size`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "leading?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "leading",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#lineRotation:member",
              "docComment": "/**\n * Line typesetting rotation (radians).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineRotation?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lineRotation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#lineWidth:member",
              "docComment": "/**\n * Maximum line width (pixels).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lineWidth?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lineWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#maxLines:member",
              "docComment": "/**\n * Maximum number of lines for this label.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxLines?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxLines",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#maxZoomLevel:member",
              "docComment": "/**\n * Maximum zoom level. If the current zoom level is larger, the technique will not be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxZoomLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxZoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#mayOverlap:member",
              "docComment": "/**\n * If `true`, icon is allowed to overlap other labels or icons of lower priority.  @default `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mayOverlap?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mayOverlap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#minZoomLevel:member",
              "docComment": "/**\n * Minimal zoom level. If the current zoom level is smaller, the technique will not be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minZoomLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minZoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#opacity:member",
              "docComment": "/**\n * For transparent text, set a value between 0.0 for totally transparent, to 1.0 for totally opaque.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "opacity?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "opacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#priority:member",
              "docComment": "/**\n * Priority of text, defaults to `0`. Elements with highest priority get placed first.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "priority?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "priority",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#reserveSpace:member",
              "docComment": "/**\n * If `true`, element will reserve screen space, other markers of lower priority will not be able to overlap.  @default `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reserveSpace?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "reserveSpace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#rotation:member",
              "docComment": "/**\n * Glyph local rotation (radians).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rotation?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "rotation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#size:member",
              "docComment": "/**\n * Size of the text (pixels).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#style:member",
              "docComment": "/**\n * Name of the text style.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#text:member",
              "docComment": "/**\n * Text to be displayed for feature.\n *\n * Defaults to first defined: - feature property `label` if present in technique (depreacted); - `[\"get\", \"name:short\"]` is `useAbbreviation` is true; - `[\"get\", \"iso_code\"]` is `useIsoCode` is true; - `[\"get\", \"name:$LANGUAGE\"]` for each specified language; - `[\"get\", \"name\"]`.\n *\n * See [[ExtendedTileInfo.getFeatureText]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#textFadeTime:member",
              "docComment": "/**\n * Fading time for labels in seconds.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textFadeTime?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textFadeTime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#tracking:member",
              "docComment": "/**\n * Inter-glyph spacing (pixels). Scaled by `size`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tracking?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tracking",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#useAbbreviation:member",
              "docComment": "/**\n * If `true`, the abbreviation (field `name:short`) of the elements is used as text.\n *\n * @deprecated\n *\n * Use proper expression with [`get`, `name:short`] for this purpose.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "useAbbreviation?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "useAbbreviation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#useIsoCode:member",
              "docComment": "/**\n * If `true`, the iso code (field 'iso_code') of the elements is used as text. The `iso_code` field contains the ISO 3166-1 2-letter country code.\n *\n * @deprecated\n *\n * Use proper expression with [`get`, `iso_code`] for this purpose.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "useIsoCode?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "useIsoCode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#vAlignment:member",
              "docComment": "/**\n * Text position inside a line.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "vAlignment?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<\"Above\" | \"Center\" | \"Below\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "vAlignment",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#wrappingMode:member",
              "docComment": "/**\n * Wrapping (line-breaking) mode.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wrappingMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "DynamicProperty",
                  "canonicalReference": "@here/harp-datasource-protocol!DynamicProperty:type"
                },
                {
                  "kind": "Content",
                  "text": "<\"None\" | \"Character\" | \"Word\">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "wrappingMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#xOffset:member",
              "docComment": "/**\n * Horizontal offset (to the right) in screen pixels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "xOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "xOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams#yOffset:member",
              "docComment": "/**\n * Vertical offset (up) in screen pixels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "yOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "yOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueStyle:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TextTechniqueStyle = "
            },
            {
              "kind": "Reference",
              "text": "BaseStyle",
              "canonicalReference": "@here/harp-datasource-protocol!BaseStyle:type"
            },
            {
              "kind": "Content",
              "text": "<\"text\", "
            },
            {
              "kind": "Reference",
              "text": "TextTechniqueParams",
              "canonicalReference": "@here/harp-datasource-protocol!TextTechniqueParams:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TextTechniqueStyle",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-datasource-protocol!TEXTURE_PROPERTY_KEYS:var",
          "docComment": "/**\n * Names of the supported texture properties.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TEXTURE_PROPERTY_KEYS: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            }
          ],
          "releaseTag": "Public",
          "name": "TEXTURE_PROPERTY_KEYS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!TextureBuffer:interface",
          "docComment": "/**\n * Buffer holding a texture.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextureBuffer "
            }
          ],
          "releaseTag": "Public",
          "name": "TextureBuffer",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextureBuffer#buffer:member",
              "docComment": "/**\n * Buffer containing the (compressed) image or the raw texture data.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "buffer: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayBuffer",
                  "canonicalReference": "!ArrayBuffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "buffer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextureBuffer#dataTextureProperties:member",
              "docComment": "/**\n * Properties for creating a three.js DataTexture (https://threejs.org/docs/#api/en/textures/DataTexture).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dataTextureProperties?: "
                },
                {
                  "kind": "Reference",
                  "text": "DataTextureProperties",
                  "canonicalReference": "@here/harp-datasource-protocol!DataTextureProperties:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dataTextureProperties",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextureBuffer#type:member",
              "docComment": "/**\n * Mime type of the image or 'image/raw' in case of raw texture data.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@here/harp-datasource-protocol!TextureCoordinateType:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum TextureCoordinateType "
            }
          ],
          "releaseTag": "Public",
          "name": "TextureCoordinateType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!TextureCoordinateType.EquirectangularSpace:member",
              "docComment": "/**\n * Texture coordinates are in equirectangular space. (u, v) = ( (longitude+180) / 360, (latitude+90) / 180).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "EquirectangularSpace = "
                },
                {
                  "kind": "Content",
                  "text": "\"equirectangular-space\""
                }
              ],
              "releaseTag": "Public",
              "name": "EquirectangularSpace",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!TextureCoordinateType.FeatureSpace:member",
              "docComment": "/**\n * Texture coordinates in feature space.\n *\n * To compute texture coordinates in feature space, the feature must have a property named `bbox` with value the tuple `[west, south, east, north]`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "FeatureSpace = "
                },
                {
                  "kind": "Content",
                  "text": "\"feature-space\""
                }
              ],
              "releaseTag": "Public",
              "name": "FeatureSpace",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-datasource-protocol!TextureCoordinateType.TileSpace:member",
              "docComment": "/**\n * Texture coordinates are in tile space. SW of the tile will have (0,0) and NE will have (1,1).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TileSpace = "
                },
                {
                  "kind": "Content",
                  "text": "\"tile-space\""
                }
              ],
              "releaseTag": "Public",
              "name": "TileSpace",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-datasource-protocol!textureCoordinateType:function(1)",
          "docComment": "/**\n * Get the texture coordinate type if the technique supports it.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function textureCoordinateType(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "TextureCoordinateType",
              "canonicalReference": "@here/harp-datasource-protocol!TextureCoordinateType:enum"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "textureCoordinateType"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!TextureDataType:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TextureDataType = "
            },
            {
              "kind": "Content",
              "text": "\"UnsignedByte\" | \"Byte\" | \"Short\" | \"UnsignedShort\" | \"Int\" | \"UnsignedInt\" | \"Float\" | \"HalfFloat\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TextureDataType",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!TextureProperties:interface",
          "docComment": "/**\n * Properties of a Texture (https://threejs.org/docs/#api/en/textures/Texture).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextureProperties "
            }
          ],
          "releaseTag": "Public",
          "name": "TextureProperties",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextureProperties#flipY:member",
              "docComment": "/**\n * Flip texture vertically. See: https://threejs.org/docs/#api/en/textures/Texture.flipY.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flipY?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "flipY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextureProperties#magFilter:member",
              "docComment": "/**\n * Texture magnification filter.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "magFilter?: "
                },
                {
                  "kind": "Reference",
                  "text": "MagFilter",
                  "canonicalReference": "@here/harp-datasource-protocol!MagFilter:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "magFilter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextureProperties#minFilter:member",
              "docComment": "/**\n * Texture minification filter.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minFilter?: "
                },
                {
                  "kind": "Reference",
                  "text": "MinFilter",
                  "canonicalReference": "@here/harp-datasource-protocol!MinFilter:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minFilter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextureProperties#repeatU:member",
              "docComment": "/**\n * Texture horizontal repetition rate. See: https://threejs.org/docs/#api/en/textures/Texture.repeat.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "repeatU?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "repeatU",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextureProperties#repeatV:member",
              "docComment": "/**\n * Texture vertical repetition rate. See: https://threejs.org/docs/#api/en/textures/Texture.repeat.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "repeatV?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "repeatV",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextureProperties#wrapS:member",
              "docComment": "/**\n * Texture horizontal wrapping mode. See: https://threejs.org/docs/#api/en/textures/Texture.wrapS.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wrapS?: "
                },
                {
                  "kind": "Reference",
                  "text": "WrappingMode",
                  "canonicalReference": "@here/harp-datasource-protocol!WrappingMode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "wrapS",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TextureProperties#wrapT:member",
              "docComment": "/**\n * Texture vertical wrapping mode. See: https://threejs.org/docs/#api/en/textures/Texture.wrapT.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wrapT?: "
                },
                {
                  "kind": "Reference",
                  "text": "WrappingMode",
                  "canonicalReference": "@here/harp-datasource-protocol!WrappingMode:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "wrapT",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!Theme:interface",
          "docComment": "/**\n * Map theme is used to define what features are shown and how the map is styled, for example which lightning is used or whether fog should be displayed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Theme "
            }
          ],
          "releaseTag": "Public",
          "name": "Theme",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Theme#$schema:member",
              "docComment": "/**\n * The URI of the JSON schema describing themes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "$schema?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "$schema",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Theme#clearAlpha:member",
              "docComment": "/**\n * Alpha to be used as a clear background - no map objects.  @format 0-1\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearAlpha?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "clearAlpha",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Theme#clearColor:member",
              "docComment": "/**\n * Color to be used as a clear background - no map objects.  @format color-hex\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearColor?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "clearColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Theme#defaultTextStyle:member",
              "docComment": "/**\n * Define the default text style for styling labels and texts.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "defaultTextStyle?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextStyleDefinition",
                  "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultTextStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Theme#definitions:member",
              "docComment": "/**\n * The definitions exported by these theme.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "definitions?: "
                },
                {
                  "kind": "Reference",
                  "text": "Definitions",
                  "canonicalReference": "@here/harp-datasource-protocol!Definitions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "definitions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Theme#extends:member",
              "docComment": "/**\n * The base `Theme`s or `theme` URLs to extend.\n *\n * @remarks\n *\n * If used, base themes are loaded first, and then all the properties from inherited theme overwrite these defined in base theme.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "extends?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@here/harp-datasource-protocol!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string | "
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@here/harp-datasource-protocol!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "extends",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Theme#fog:member",
              "docComment": "/**\n * Define the fog used in the map scene.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fog?: "
                },
                {
                  "kind": "Reference",
                  "text": "Fog",
                  "canonicalReference": "@here/harp-datasource-protocol!Fog:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fog",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Theme#fontCatalogs:member",
              "docComment": "/**\n * List available fonts to be used while rendering text.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontCatalogs?: "
                },
                {
                  "kind": "Reference",
                  "text": "FontCatalogConfig",
                  "canonicalReference": "@here/harp-datasource-protocol!FontCatalogConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fontCatalogs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Theme#images:member",
              "docComment": "/**\n * Optional images to be rendered on the map view.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "images?: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageDefinitions",
                  "canonicalReference": "@here/harp-datasource-protocol!ImageDefinitions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "images",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Theme#imageTextures:member",
              "docComment": "/**\n * Image textures to be used while rendering geometries on the map view.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageTextures?: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageTexture",
                  "canonicalReference": "@here/harp-datasource-protocol!ImageTexture:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageTextures",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Theme#labelPriorities:member",
              "docComment": "/**\n * Optional list of priorities for the screen-space objects created using this style.\n *\n * @remarks\n *\n * The name of the `category` attribute of the screen-space technique (e.g. `\"text\"`) must match on the strings defined by this [[Theme.labelPriorities]], for example:\n * ```json\n * {\n *      \"labelPriorities\": [\n *          \"continent-labels\",\n *          \"country-labels\",\n *          \"state-labels\"\n *      ],\n *      \"styles\": [\n *          {\n *              \"technique\": \"text\",\n *              \"category\": \"state-labels\"\n *          }\n *      ]\n * }\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "labelPriorities?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "labelPriorities",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Theme#lights:member",
              "docComment": "/**\n * Define the lightning available on the three.js scene.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lights?: "
                },
                {
                  "kind": "Reference",
                  "text": "Light",
                  "canonicalReference": "@here/harp-datasource-protocol!Light:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lights",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Theme#poiTables:member",
              "docComment": "/**\n * Optional list of [[ThemePoiTableDef]]s.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "poiTables?: "
                },
                {
                  "kind": "Reference",
                  "text": "PoiTableRef",
                  "canonicalReference": "@here/harp-datasource-protocol!PoiTableRef:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "poiTables",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Theme#priorities:member",
              "docComment": "/**\n * Optional list of symbolic priorities for the object created using this [[Theme]].\n *\n * @remarks\n *\n * The attribute `styleSet` and `category` of the [[Technique]] are used together with [[Theme.priorities]] to sort the objects created using this [[Theme]], for example:\n * ```json\n * {\n *      \"priorities\": [\n *          { \"group\": \"tilezen\", \"category\": \"outline-1\" }\n *      ],\n *      \"styles\": [\n *          {\n *              \"technique\": \"solid-line\",\n *              \"styleSet\": \"tilezen\",\n *              \"category\": \"outline-1\"\n *          }\n *      ]\n * }\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "priorities?: "
                },
                {
                  "kind": "Reference",
                  "text": "StylePriority",
                  "canonicalReference": "@here/harp-datasource-protocol!StylePriority:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "priorities",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Theme#sky:member",
              "docComment": "/**\n * Define the style of the sky presented in the map scene.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sky?: "
                },
                {
                  "kind": "Reference",
                  "text": "Sky",
                  "canonicalReference": "@here/harp-datasource-protocol!Sky:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sky",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Theme#styles:member",
              "docComment": "/**\n * Map styles available for datasources used to render the map.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styles?: "
                },
                {
                  "kind": "Reference",
                  "text": "Styles",
                  "canonicalReference": "@here/harp-datasource-protocol!Styles:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Theme#textStyles:member",
              "docComment": "/**\n * Define the style to render different types of text used on the map.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textStyles?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextStyleDefinition",
                  "canonicalReference": "@here/harp-datasource-protocol!TextStyleDefinition:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textStyles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!Theme#url:member",
              "docComment": "/**\n * Actual URL the theme has been loaded from.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-datasource-protocol!ThemeVisitor:class",
          "docComment": "/**\n * The ThemeVisitor visits every style in the theme in a depth-first fashion.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ThemeVisitor "
            }
          ],
          "releaseTag": "Public",
          "name": "ThemeVisitor",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-datasource-protocol!ThemeVisitor:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ThemeVisitor` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(theme: "
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@here/harp-datasource-protocol!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "theme",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!ThemeVisitor#theme:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly theme: "
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@here/harp-datasource-protocol!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!ThemeVisitor#visitStyles:member(1)",
              "docComment": "/**\n * Applies a function to every style in the theme.\n *\n * @param visitFunc - Function to be called with `style` as an argument. Function should return `true` to cancel visitation.\n *\n * @returns `true` if function has finished prematurely.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visitStyles(visitFunc: "
                },
                {
                  "kind": "Content",
                  "text": "(style: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleDeclaration",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleDeclaration:type"
                },
                {
                  "kind": "Content",
                  "text": ") => boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "visitFunc",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "visitStyles"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!TileInfo:interface",
          "docComment": "/**\n * Defines a map tile metadata.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TileInfo "
            }
          ],
          "releaseTag": "Public",
          "name": "TileInfo",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TileInfo#numBytes:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly numBytes: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "numBytes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TileInfo#setupTime:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly setupTime: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "setupTime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TileInfo#tileKey:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tileKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-datasource-protocol!TileInfo#transferList:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly transferList?: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayBuffer",
                  "canonicalReference": "!ArrayBuffer:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "transferList",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-datasource-protocol!TRANSPARENCY_PROPERTY_KEYS:var",
          "docComment": "/**\n * Names of the properties controlling transparency.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "TRANSPARENCY_PROPERTY_KEYS: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            }
          ],
          "releaseTag": "Public",
          "name": "TRANSPARENCY_PROPERTY_KEYS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!Value:type",
          "docComment": "/**\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Value = "
            },
            {
              "kind": "Content",
              "text": "null | boolean | number | string | object"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Value",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-datasource-protocol!ValueMap:interface",
          "docComment": "/**\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ValueMap "
            }
          ],
          "releaseTag": "Public",
          "name": "ValueMap",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@here/harp-datasource-protocol!ValueMap:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "Value",
                  "canonicalReference": "@here/harp-datasource-protocol!Value:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-datasource-protocol!VarExpr:class",
          "docComment": "/**\n * Var expression.  @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class VarExpr extends "
            },
            {
              "kind": "Reference",
              "text": "Expr",
              "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "VarExpr",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-datasource-protocol!VarExpr:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `VarExpr` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!VarExpr#accept:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accept<Result, Context>(visitor: "
                },
                {
                  "kind": "Reference",
                  "text": "ExprVisitor",
                  "canonicalReference": "@here/harp-datasource-protocol!ExprVisitor:interface"
                },
                {
                  "kind": "Content",
                  "text": "<Result, Context>"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "Context"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Result"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "visitor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Result",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "Context",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "accept"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-datasource-protocol!VarExpr#exprIsDynamic:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected exprIsDynamic(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "exprIsDynamic"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-datasource-protocol!VarExpr#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol:namespace",
          "docComment": "/**\n * Communication protocol with [[ITileDecoder]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace WorkerDecoderProtocol "
            }
          ],
          "releaseTag": "Public",
          "name": "WorkerDecoderProtocol",
          "members": [
            {
              "kind": "Interface",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.ConfigurationMessage:interface",
              "docComment": "/**\n * Interface for a ConfigurationMessage that is sent from the datasource to the decoder. The message used to configure the [[ITileDecoder]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface ConfigurationMessage extends "
                },
                {
                  "kind": "Reference",
                  "text": "DecoderMessage",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.DecoderMessage:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "ConfigurationMessage",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.ConfigurationMessage#definitions:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "definitions?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Definitions",
                      "canonicalReference": "@here/harp-datasource-protocol!Definitions:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "definitions",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.ConfigurationMessage#languages:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "languages?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string[]"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "languages",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.ConfigurationMessage#options:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "options?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "OptionsMap",
                      "canonicalReference": "@here/harp-datasource-protocol!OptionsMap:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "options",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.ConfigurationMessage#styleSet:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "styleSet?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "StyleSet",
                      "canonicalReference": "@here/harp-datasource-protocol!StyleSet:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "styleSet",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.ConfigurationMessage#type:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "type: "
                    },
                    {
                      "kind": "Reference",
                      "text": "DecoderMessageName.Configuration",
                      "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.DecoderMessageName.Configuration:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "type",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 3
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.DecoderMessage:interface",
              "docComment": "/**\n * Interface for `DecodedTileMessage` which describes metadata for a decoded tile.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface DecoderMessage "
                }
              ],
              "releaseTag": "Public",
              "name": "DecoderMessage",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.DecoderMessage#service:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "service: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "service",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.DecoderMessage#type:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "type: "
                    },
                    {
                      "kind": "Reference",
                      "text": "DecoderMessageName",
                      "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.DecoderMessageName:enum"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "type",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Enum",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.DecoderMessageName:enum",
              "docComment": "/**\n * Define possible names of messages exchanged with decoder services within `WebWorker`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enum DecoderMessageName "
                }
              ],
              "releaseTag": "Public",
              "name": "DecoderMessageName",
              "members": [
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.DecoderMessageName.Configuration:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "Configuration = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"configuration\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "Configuration",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.DecodeTileRequest:interface",
              "docComment": "/**\n * This object is sent to the decoder asking to decode a specific tile. The expected response type is a [[DecodedTile]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface DecodeTileRequest extends "
                },
                {
                  "kind": "Reference",
                  "text": "WorkerServiceProtocol.ServiceRequest",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "DecodeTileRequest",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.DecodeTileRequest#data:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "data: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ArrayBufferLike",
                      "canonicalReference": "!ArrayBufferLike:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "data",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.DecodeTileRequest#projection:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "projection: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "projection",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.DecodeTileRequest#tileKey:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "tileKey: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "tileKey",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.DecodeTileRequest#type:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "type: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Requests.DecodeTileRequest",
                      "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.Requests.DecodeTileRequest:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "type",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 3
                }
              ]
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.isConfigurationMessage:function(1)",
              "docComment": "/**\n * Type guard to check if an object is an instance of `ConfigurationMessage`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function isConfigurationMessage(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "message",
                  "canonicalReference": "@here/harp-datasource-protocol!~message"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "ConfigurationMessage",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.ConfigurationMessage:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isConfigurationMessage"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.isDecodeTileRequest:function(1)",
              "docComment": "/**\n * Type guard to check if an object is a decoded tile object sent to a worker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function isDecodeTileRequest(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "message",
                  "canonicalReference": "@here/harp-datasource-protocol!~message"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "DecodeTileRequest",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.DecodeTileRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isDecodeTileRequest"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.isTileInfoRequest:function(1)",
              "docComment": "/**\n * Type guard to check if an object is an info tile object sent to a worker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function isTileInfoRequest(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "message",
                  "canonicalReference": "@here/harp-datasource-protocol!~message"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "TileInfoRequest",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.TileInfoRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isTileInfoRequest"
            },
            {
              "kind": "Enum",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.Requests:enum",
              "docComment": "/**\n * Define possible names of requests called on decoder services within `WebWorker`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enum Requests "
                }
              ],
              "releaseTag": "Public",
              "name": "Requests",
              "members": [
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.Requests.DecodeTileRequest:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "DecodeTileRequest = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"decode-tile-request\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "DecodeTileRequest",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.Requests.TileInfoRequest:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "TileInfoRequest = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"tile-info-request\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "TileInfoRequest",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.TileInfoRequest:interface",
              "docComment": "/**\n * This object is sent to the decoder asking for a tile info of a specific tile. The expected response type is a [[DecodedTile]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface TileInfoRequest extends "
                },
                {
                  "kind": "Reference",
                  "text": "WorkerServiceProtocol.ServiceRequest",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "TileInfoRequest",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.TileInfoRequest#data:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "data: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ArrayBufferLike",
                      "canonicalReference": "!ArrayBufferLike:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "data",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.TileInfoRequest#projection:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "projection: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "projection",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.TileInfoRequest#tileKey:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "tileKey: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "tileKey",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.TileInfoRequest#type:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "type: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Requests.TileInfoRequest",
                      "canonicalReference": "@here/harp-datasource-protocol!WorkerDecoderProtocol.Requests.TileInfoRequest:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "type",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 3
                }
              ]
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol:namespace",
          "docComment": "/**\n * Common communication protocol for [[WorkerService]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace WorkerServiceProtocol "
            }
          ],
          "releaseTag": "Public",
          "name": "WorkerServiceProtocol",
          "members": [
            {
              "kind": "Interface",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.CreateServiceRequest:interface",
              "docComment": "/**\n * This message is sent by the main thread to [[WorkerServiceManager]] to dynamically create a new service.\n *\n * May throw `UnknownServiceError` if service of given type is not registered in [[WorkerServiceManager]], see [[isUnknownServiceError]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface CreateServiceRequest extends "
                },
                {
                  "kind": "Reference",
                  "text": "ServiceRequest",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "CreateServiceRequest",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.CreateServiceRequest#targetServiceId:member",
                  "docComment": "/**\n * The newly created service instance will be available under this id.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "targetServiceId: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "targetServiceId",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.CreateServiceRequest#targetServiceType:member",
                  "docComment": "/**\n * Type of service to be created.\n *\n * @see [[WorkerServiceManager.register]]\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "targetServiceType: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "targetServiceType",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.CreateServiceRequest#type:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "type: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Requests.CreateService",
                      "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.Requests.CreateService:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "type",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 3
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.DestroyServiceRequest:interface",
              "docComment": "/**\n * This message is sent by the main thread to [[WorkerServiceManager]] to dynamically destroy a service.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface DestroyServiceRequest extends "
                },
                {
                  "kind": "Reference",
                  "text": "ServiceRequest",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "DestroyServiceRequest",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.DestroyServiceRequest#targetServiceId:member",
                  "docComment": "/**\n * Id of service to be destroyed.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "targetServiceId: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "targetServiceId",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.DestroyServiceRequest#type:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "type: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Requests.DestroyService",
                      "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.Requests.DestroyService:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "type",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 3
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.InitializedMessage:interface",
              "docComment": "/**\n * This message is sent by the worker to the main thread. No data is sent. Receiving this message confirms that the worker has started successfully.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface InitializedMessage extends "
                },
                {
                  "kind": "Reference",
                  "text": "ServiceMessage",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceMessage:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "InitializedMessage",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.InitializedMessage#type:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "type: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ServiceMessageName.Initialized",
                      "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceMessageName.Initialized:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "type",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 3
                }
              ]
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.isInitializedMessage:function(1)",
              "docComment": "/**\n * Type guard to check if an object is a signal message from worker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function isInitializedMessage(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "message",
                  "canonicalReference": "@here/harp-datasource-protocol!~message"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "InitializedMessage",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.InitializedMessage:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isInitializedMessage"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.isRequestMessage:function(1)",
              "docComment": "/**\n * Type guard to check if an object is a request message sent to a worker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function isRequestMessage(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "message",
                  "canonicalReference": "@here/harp-datasource-protocol!~message"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "RequestMessage",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.RequestMessage:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isRequestMessage"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.isResponseMessage:function(1)",
              "docComment": "/**\n * Type guard to check if an object is a request message sent to a worker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function isResponseMessage(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "message",
                  "canonicalReference": "@here/harp-datasource-protocol!~message"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "ResponseMessage",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ResponseMessage:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isResponseMessage"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.isUnknownServiceError:function(1)",
              "docComment": "/**\n * Test if `error` thrown by [[CreateServiceRequest]] was caused by unknown type of service.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function isUnknownServiceError(error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isUnknownServiceError"
            },
            {
              "kind": "Interface",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.RequestMessage:interface",
              "docComment": "/**\n * This message is a part of the Request-Response scheme implemented to be used in communication between workers and the decoder.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface RequestMessage extends "
                },
                {
                  "kind": "Reference",
                  "text": "ServiceMessage",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceMessage:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "RequestMessage",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.RequestMessage#messageId:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "messageId: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "messageId",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.RequestMessage#request:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "request: "
                    },
                    {
                      "kind": "Content",
                      "text": "any"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "request",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.RequestMessage#type:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "type: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ServiceMessageName.Request",
                      "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceMessageName.Request:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "type",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 3
                }
              ]
            },
            {
              "kind": "Enum",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.Requests:enum",
              "docComment": "/**\n * Define possible names of requests called on services within `WebWorker`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enum Requests "
                }
              ],
              "releaseTag": "Public",
              "name": "Requests",
              "members": [
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.Requests.CreateService:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "CreateService = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"create-service\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "CreateService",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.Requests.DestroyService:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "DestroyService = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"destroy-service\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "DestroyService",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ResponseMessage:interface",
              "docComment": "/**\n * This message is a part of the Request-Response scheme implemented to be used in communication between workers and the decoder.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface ResponseMessage extends "
                },
                {
                  "kind": "Reference",
                  "text": "ServiceMessage",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceMessage:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "ResponseMessage",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ResponseMessage#errorMessage:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "errorMessage?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "errorMessage",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ResponseMessage#errorStack:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "errorStack?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "errorStack",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ResponseMessage#messageId:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "messageId: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "messageId",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ResponseMessage#response:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "response?: "
                    },
                    {
                      "kind": "Content",
                      "text": "object"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "response",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ResponseMessage#type:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "type: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ServiceMessageName.Response",
                      "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceMessageName.Response:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "type",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 3
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceMessage:interface",
              "docComment": "/**\n * Interface for `ServiceMessage` which describes metadata for a service messages.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface ServiceMessage "
                }
              ],
              "releaseTag": "Public",
              "name": "ServiceMessage",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceMessage#service:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "service: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "service",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceMessage#type:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "type: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ServiceMessageName",
                      "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceMessageName:enum"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "type",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Enum",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceMessageName:enum",
              "docComment": "/**\n * Define possible names of messages exchanged with services within `WebWorker`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enum ServiceMessageName "
                }
              ],
              "releaseTag": "Public",
              "name": "ServiceMessageName",
              "members": [
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceMessageName.Initialized:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "Initialized = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"initialized\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "Initialized",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceMessageName.Request:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "Request = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"request\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "Request",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceMessageName.Response:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "Response = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"response\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "Response",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceRequest:interface",
              "docComment": "/**\n * This is an internal general interface used in communication with workers. Check [[ConcurrentWorkerSet]]'s invokeRequest function for exemplary usage.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface ServiceRequest "
                }
              ],
              "releaseTag": "Public",
              "name": "ServiceRequest",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceRequest#type:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "type: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "type",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Variable",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID:var",
              "docComment": "/**\n * Service id of worker manager ([[WorkerServiceManager]]) used to create/destroy service instances in workers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "WORKER_SERVICE_MANAGER_SERVICE_ID = \"worker-service-manager\""
                }
              ],
              "releaseTag": "Public",
              "name": "WORKER_SERVICE_MANAGER_SERVICE_ID",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.WorkerServiceManagerRequest:type",
              "docComment": "/**\n * Possible service management messages (`CreateService` or `DestroyService`) sent to WebWorker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type WorkerServiceManagerRequest = "
                },
                {
                  "kind": "Reference",
                  "text": "CreateServiceRequest",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.CreateServiceRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "DestroyServiceRequest",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.DestroyServiceRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "WorkerServiceManagerRequest",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol:namespace",
          "docComment": "/**\n * Communication protocol with [[ITiler]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace WorkerTilerProtocol "
            }
          ],
          "releaseTag": "Public",
          "name": "WorkerTilerProtocol",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.isRegisterIndexRequest:function(1)",
              "docComment": "/**\n * Type guard to check if an object is an index registration request sent to a worker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function isRegisterIndexRequest(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "message",
                  "canonicalReference": "@here/harp-datasource-protocol!~message"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "RegisterIndexRequest",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.RegisterIndexRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isRegisterIndexRequest"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.isTileRequest:function(1)",
              "docComment": "/**\n * Type guard to check if an object is a tile request sent to a worker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function isTileRequest(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "message",
                  "canonicalReference": "@here/harp-datasource-protocol!~message"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "TileRequest",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.TileRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isTileRequest"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.isUpdateIndexRequest:function(1)",
              "docComment": "/**\n * Type guard to check if an object is an update request for the index registration.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function isUpdateIndexRequest(message: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "message",
                  "canonicalReference": "@here/harp-datasource-protocol!~message"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "UpdateIndexRequest",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.UpdateIndexRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isUpdateIndexRequest"
            },
            {
              "kind": "Interface",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.RegisterIndexRequest:interface",
              "docComment": "/**\n * This object is sent to the tiler to register a new tile index in the worker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface RegisterIndexRequest extends "
                },
                {
                  "kind": "Reference",
                  "text": "WorkerServiceProtocol.ServiceRequest",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "RegisterIndexRequest",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.RegisterIndexRequest#id:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "id: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "id",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.RegisterIndexRequest#input:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "input: "
                    },
                    {
                      "kind": "Content",
                      "text": "string | "
                    },
                    {
                      "kind": "Reference",
                      "text": "GeoJson",
                      "canonicalReference": "@here/harp-datasource-protocol!GeoJson:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "input",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.RegisterIndexRequest#type:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "type: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Requests.RegisterIndex",
                      "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.Requests.RegisterIndex:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "type",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 3
                }
              ]
            },
            {
              "kind": "Enum",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.Requests:enum",
              "docComment": "/**\n * Define possible names of requests called on tiler services within `WebWorker`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enum Requests "
                }
              ],
              "releaseTag": "Public",
              "name": "Requests",
              "members": [
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.Requests.RegisterIndex:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "RegisterIndex = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"register-index\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "RegisterIndex",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.Requests.TileRequest:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "TileRequest = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"tile-request\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "TileRequest",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.Requests.UpdateIndex:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "UpdateIndex = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"update-index\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "UpdateIndex",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.TileRequest:interface",
              "docComment": "/**\n * This object is sent to the tiler asking to retrieve a specific tile. The expected response type is an object containing a tiled payload.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface TileRequest extends "
                },
                {
                  "kind": "Reference",
                  "text": "WorkerServiceProtocol.ServiceRequest",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "TileRequest",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.TileRequest#index:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "index: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "index",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.TileRequest#tileKey:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "tileKey: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "tileKey",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.TileRequest#type:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "type: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Requests.TileRequest",
                      "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.Requests.TileRequest:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "type",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 3
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.UpdateIndexRequest:interface",
              "docComment": "/**\n * This object is sent to the tiler to register a new tile index in the worker.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface UpdateIndexRequest extends "
                },
                {
                  "kind": "Reference",
                  "text": "WorkerServiceProtocol.ServiceRequest",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerServiceProtocol.ServiceRequest:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "UpdateIndexRequest",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.UpdateIndexRequest#id:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "id: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "id",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.UpdateIndexRequest#input:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "input: "
                    },
                    {
                      "kind": "Content",
                      "text": "string | "
                    },
                    {
                      "kind": "Reference",
                      "text": "GeoJson",
                      "canonicalReference": "@here/harp-datasource-protocol!GeoJson:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "input",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.UpdateIndexRequest#type:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "type: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Requests.UpdateIndex",
                      "canonicalReference": "@here/harp-datasource-protocol!WorkerTilerProtocol.Requests.UpdateIndex:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "type",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 3
                }
              ]
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-datasource-protocol!WrappingMode:type",
          "docComment": "/**\n * Available texture wrapping modes.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type WrappingMode = "
            },
            {
              "kind": "Content",
              "text": "\"clamp\" | \"repeat\" | \"mirror\""
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "WrappingMode",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        }
      ]
    }
  ]
}
