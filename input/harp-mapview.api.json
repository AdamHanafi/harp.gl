{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.8.10",
    "schemaVersion": 1003,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "@here/harp-mapview!",
  "docComment": "/**\n * Functionality needed to render a map.\n *\n * @remarks\n *\n * @packageDocumentation\n */\n",
  "name": "@here/harp-mapview",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@here/harp-mapview!",
      "name": "",
      "members": [
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!AnimatedExtrusionHandler:class",
          "docComment": "/**\n * Handles animated extrusion effect of the buildings in [[MapView]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class AnimatedExtrusionHandler "
            }
          ],
          "releaseTag": "Public",
          "name": "AnimatedExtrusionHandler",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!AnimatedExtrusionHandler:constructor(1)",
              "docComment": "/**\n * Creates an [[AnimatedExtrusionHandler]] in [[MapView]].\n *\n * @param m_mapView - Instance of [[MapView]] that passes `zoomLevel` through the `zoom` property update\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(m_mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "m_mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!AnimatedExtrusionHandler#add:member(1)",
              "docComment": "/**\n * Adds an [[AnimatedExtrusionTileHandler]] to [[AnimatedExtrusionHandler]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "add(tileHandler: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedExtrusionTileHandler",
                  "canonicalReference": "@here/harp-mapview!AnimatedExtrusionTileHandler:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tileHandler",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "add"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!AnimatedExtrusionHandler#duration:member",
              "docComment": "/**\n * Duration of the building's extrusion in milliseconds\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "duration: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "duration",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!AnimatedExtrusionHandler#enabled:member",
              "docComment": "/**\n * Animate the extrusion of the buildings if set to `true`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!AnimatedExtrusionHandler#find:member(1)",
              "docComment": "/**\n * Returns first [[AnimatedExtrusionTileHandler]] existed from the list of [[Tile]]s\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "find(tileKeys: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedExtrusionTileHandler",
                  "canonicalReference": "@here/harp-mapview!AnimatedExtrusionTileHandler:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tileKeys",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                }
              ],
              "name": "find"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!AnimatedExtrusionHandler#forceAnimatedExtrusion:member",
              "docComment": "/**\n * Checks whether animated extrusion effect was forcibly turned off/on in [[MapView]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get forceAnimatedExtrusion(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset forceAnimatedExtrusion(animatedExtrusion: boolean | undefined);"
                }
              ],
              "releaseTag": "Public",
              "name": "forceAnimatedExtrusion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!AnimatedExtrusionHandler#forceAnimatedExtrusionDuration:member",
              "docComment": "/**\n * Returns `animatedExtrusionDuration` value that was set in [[MapView]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get forceAnimatedExtrusionDuration(): "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset forceAnimatedExtrusionDuration(extrusionDuration: number | undefined);"
                }
              ],
              "releaseTag": "Public",
              "name": "forceAnimatedExtrusionDuration",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!AnimatedExtrusionHandler#forceEnabled:member",
              "docComment": "/**\n * If `forceEnabled` is set to `true` then `animateExtrusion` and `animateExtrusionDuration` values from [[extrudedPolygonTechnique]] will be ignored in [[Tile]] and `AnimatedExtrusionHandler.enabled` with `AnimatedExtrusionHandler.duration` will be used\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forceEnabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "forceEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!AnimatedExtrusionHandler#isAnimating:member",
              "docComment": "/**\n * Is `true` if any extrusion handlers are currently animating.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get isAnimating(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isAnimating",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!AnimatedExtrusionHandler#removeTile:member(1)",
              "docComment": "/**\n * Removes tile from the list subscribed for extrusion ratio updates\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeTile(tile: "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tile",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "removeTile"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!AnimatedExtrusionHandler#zoomDirection:member",
              "docComment": "/**\n * Returns direction of the last zoom event. Zoom in - positive value, zoom out - negative value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get zoomDirection(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "zoomDirection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@here/harp-mapview!AnimatedExtrusionState:enum",
          "docComment": "/**\n * Animation states for extrusion effect\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum AnimatedExtrusionState "
            }
          ],
          "releaseTag": "Public",
          "name": "AnimatedExtrusionState",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!AnimatedExtrusionState.Finished:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Finished = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "Finished",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!AnimatedExtrusionState.None:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "None = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "None",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!AnimatedExtrusionState.Playing:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Playing = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "Playing",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!AnimatedExtrusionState.Started:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Started = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Started",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!AnimatedExtrusionTileHandler:class",
          "docComment": "/**\n * Implements animated extrusion effect for the extruded objects in the [[Tile]]\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class AnimatedExtrusionTileHandler "
            }
          ],
          "releaseTag": "Public",
          "name": "AnimatedExtrusionTileHandler",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!AnimatedExtrusionTileHandler:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `AnimatedExtrusionTileHandler` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(m_tile: "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": ", extrudedObjects: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<{\n        object: THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Object3D",
                  "canonicalReference": "three!Object3D:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n        materialFeature: boolean;\n    }>"
                },
                {
                  "kind": "Content",
                  "text": ", m_animatedExtrusionDuration: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "m_tile",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "extrudedObjects",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "m_animatedExtrusionDuration",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!AnimatedExtrusionTileHandler#animationState:member",
              "docComment": "/**\n * Return the current state of animated extrusion effect\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get animationState(): "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedExtrusionState",
                  "canonicalReference": "@here/harp-mapview!AnimatedExtrusionState:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "animationState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!AnimatedExtrusionTileHandler#dispose:member(1)",
              "docComment": "/**\n * Cancel animation and remove from [[AnimatedExtrusionHandler]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispose(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "dispose"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!AnimatedExtrusionTileHandler#isAnimating:member",
              "docComment": "/**\n * Is `true` if this handler is currently animating.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get isAnimating(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isAnimating",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!AnimatedExtrusionTileHandler#tile:member",
              "docComment": "/**\n * Returns the [[Tile]] related to [[AnimatedExtrusionTileHandler]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get tile(): "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!AnimatedExtrusionTileHandler#zoomLevelChanged:member(1)",
              "docComment": "/**\n * Start / Stop extrusion animation if zoom level was changed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "zoomLevelChanged(zoomDirection: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "zoomDirection",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "zoomLevelChanged"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-mapview!applyBaseColorToMaterial:function(1)",
          "docComment": "/**\n * Apply technique base color (transparency support) to material with modifying material opacity.\n *\n * This method applies main (or base) technique color with transparency support to the corresponding material color, with an effect on entire [[THREE.Material]] __opacity__ and __transparent__ attributes.\n *\n * @note Transparent colors should be processed as the very last technique attributes, since their effect on material properties like [[THREE.Material.opacity]] and [[THREE.Material.transparent]] could be overridden by corresponding technique params.\n *\n * @param technique - an technique the applied color comes from\n *\n * @param material - the material to which color is applied\n *\n * @param prop - technique property (color) name\n *\n * @param value - color value in custom number format\n *\n * @param env - [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function applyBaseColorToMaterial(material: "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "Material",
              "canonicalReference": "three!Material:class"
            },
            {
              "kind": "Content",
              "text": ", materialColor: "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "three!Color:class"
            },
            {
              "kind": "Content",
              "text": ", technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": ", techniqueColor: "
            },
            {
              "kind": "Reference",
              "text": "Value",
              "canonicalReference": "@here/harp-datasource-protocol!Value:type"
            },
            {
              "kind": "Content",
              "text": ", env?: "
            },
            {
              "kind": "Reference",
              "text": "Env",
              "canonicalReference": "@here/harp-datasource-protocol!Env:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 14
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "material",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "materialColor",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              }
            },
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "techniqueColor",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            },
            {
              "parameterName": "env",
              "parameterTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              }
            }
          ],
          "name": "applyBaseColorToMaterial"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-mapview!applySecondaryColorToMaterial:function(1)",
          "docComment": "/**\n * Apply technique color to material taking special care with transparent (RGBA) colors.\n *\n * @note This function is intended to be used with secondary, triary etc. technique colors, not the base ones that may contain transparency information. Such colors should be processed with [[applyTechniqueBaseColorToMaterial]] function.\n *\n * @param technique - an technique the applied color comes from\n *\n * @param material - the material to which color is applied\n *\n * @param prop - technique property (color) name\n *\n * @param value - color value\n *\n * @param env - [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function applySecondaryColorToMaterial(materialColor: "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "Color",
              "canonicalReference": "three!Color:class"
            },
            {
              "kind": "Content",
              "text": ", techniqueColor: "
            },
            {
              "kind": "Reference",
              "text": "Value",
              "canonicalReference": "@here/harp-datasource-protocol!Value:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Expr",
              "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
            },
            {
              "kind": "Content",
              "text": ", env?: "
            },
            {
              "kind": "Reference",
              "text": "Env",
              "canonicalReference": "@here/harp-datasource-protocol!Env:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "materialColor",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "techniqueColor",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 7
              }
            },
            {
              "parameterName": "env",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              }
            }
          ],
          "name": "applySecondaryColorToMaterial"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!AreaCopyrightInfo:interface",
          "docComment": "/**\n * Schema of [Map Tile API copyright endpoint](https://developer.here.com/documentation/map-tile/topics/resource-copyright.html) JSON response.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface AreaCopyrightInfo "
            }
          ],
          "releaseTag": "Public",
          "name": "AreaCopyrightInfo",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!AreaCopyrightInfo#alt:member",
              "docComment": "/**\n * Verbose copyright text of the label to display by mouse over label or info menu entry.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alt?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "alt",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!AreaCopyrightInfo#boxes:member",
              "docComment": "/**\n * The bounding boxes define areas where specific copyrights are valid. A bounding box is defined by bottom (latitude), left (longitude) and top (latitude), right (longitude).\n *\n * The default copyright has no boxes element and covers all other areas.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "boxes?: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<[number, number, number, number]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "boxes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!AreaCopyrightInfo#label:member",
              "docComment": "/**\n * Copyright text to display after the copyright symbol on the map.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!AreaCopyrightInfo#maxLevel:member",
              "docComment": "/**\n * Maximum zoom level for the specified copyright label.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!AreaCopyrightInfo#minLevel:member",
              "docComment": "/**\n * Minimum zoom level for the specified copyright label.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@here/harp-mapview!AtmosphereLightMode:enum",
          "docComment": "/**\n * Lists light modes.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum AtmosphereLightMode "
            }
          ],
          "releaseTag": "Public",
          "name": "AtmosphereLightMode",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!AtmosphereLightMode.LightDynamic:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "LightDynamic = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "LightDynamic",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!AtmosphereLightMode.LightOverhead:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "LightOverhead = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "LightOverhead",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-mapview!BASE_TECHNIQUE_NON_MATERIAL_PROPS:var",
          "docComment": "/**\n * Non material properties of [[BaseTechnique]]\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "BASE_TECHNIQUE_NON_MATERIAL_PROPS: "
            },
            {
              "kind": "Content",
              "text": "string[]"
            }
          ],
          "releaseTag": "Public",
          "name": "BASE_TECHNIQUE_NON_MATERIAL_PROPS",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessor:class",
          "docComment": "/**\n * Abstract base class of an accessor for nonindexed geometry.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class BufferedGeometryAccessor extends "
            },
            {
              "kind": "Reference",
              "text": "BufferedGeometryAccessorBase",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessorBase:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BufferedGeometryAccessor",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessor:constructor(1)",
              "docComment": "/**\n * Create an object of type `BufferedGeometryAccessor`\n *\n * @param object - mesh object\n *\n * @param geometryType - type of geometry to be used\n *\n * @param bufferGeometry - which buffer geometry to use\n *\n * @param stride - geometry stride length\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(object: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "three!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": ", geometryType: "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryType",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryType:enum"
                },
                {
                  "kind": "Content",
                  "text": ", bufferGeometry: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "BufferGeometry",
                  "canonicalReference": "three!BufferGeometry:class"
                },
                {
                  "kind": "Content",
                  "text": ", stride: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "geometryType",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "bufferGeometry",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "stride",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessor#bufferGeometry:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readonly bufferGeometry: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "BufferGeometry",
                  "canonicalReference": "three!BufferGeometry:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bufferGeometry",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessor#checkSetUp:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected checkSetUp(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "checkSetUp"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessor#clear:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clear"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessor#geometryType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly geometryType: "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryType",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "geometryType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessor#getVertices:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getVertices(): "
                },
                {
                  "kind": "Reference",
                  "text": "Float32Array",
                  "canonicalReference": "!Float32Array:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getVertices"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessor#object:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly object: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "three!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "object",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessor#stride:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected stride: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stride",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessorBase:class",
          "docComment": "/**\n * Geometry accessor for both indexed and nonindexed `BufferedGeometry`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class BufferedGeometryAccessorBase implements "
            },
            {
              "kind": "Reference",
              "text": "IGeometryAccessor",
              "canonicalReference": "@here/harp-mapview!IGeometryAccessor:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BufferedGeometryAccessorBase",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessorBase:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `BufferedGeometryAccessorBase` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(object: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "three!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": ", geometryType: "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryType",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryType:enum"
                },
                {
                  "kind": "Content",
                  "text": ", bufferGeometry: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "BufferGeometry",
                  "canonicalReference": "three!BufferGeometry:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "geometryType",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "bufferGeometry",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessorBase#bufferGeometry:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readonly bufferGeometry: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "BufferGeometry",
                  "canonicalReference": "three!BufferGeometry:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bufferGeometry",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessorBase#color:member",
              "docComment": "/**\n * Get one or more colors from materials.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get color(): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Color",
                  "canonicalReference": "three!Color:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined | "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Color",
                  "canonicalReference": "three!Color:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessorBase#end:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected end: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "end",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessorBase#endCapSize:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected endCapSize: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "endCapSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessorBase#geometryType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly geometryType: "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryType",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "geometryType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessorBase#getCount:member(1)",
              "docComment": "/**\n * Get the number of accessible geometries in this buffer.\n *\n * @returns Number of primitives in this geometry.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCount(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getCount"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessorBase#itemSize:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected itemSize: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "itemSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessorBase#object:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly object: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "three!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "object",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessorBase#position:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected position: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "BufferAttribute",
                  "canonicalReference": "three!BufferAttribute:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "position",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessorBase#renderOrder:member",
              "docComment": "/**\n * Get `renderOrder` of object.\n *\n * @returns `renderOrder` of the object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get renderOrder(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderOrder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessorBase#setRange:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setRange(start: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", end: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", startCapSize?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", endCapSize?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "startCapSize",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "endCapSize",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "setRange"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessorBase#start:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected start: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "start",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessorBase#startCapSize:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected startCapSize: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "startCapSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!BufferedGeometryLineAccessor:class",
          "docComment": "/**\n * Accessor for nonindexed line geometry.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BufferedGeometryLineAccessor extends "
            },
            {
              "kind": "Reference",
              "text": "BufferedGeometryAccessor",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessor:class"
            },
            {
              "kind": "Content",
              "text": " "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "ILineAccessor",
              "canonicalReference": "@here/harp-mapview!ILineAccessor:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BufferedGeometryLineAccessor",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryLineAccessor:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `BufferedGeometryLineAccessor` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(object: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "three!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": ", geometryType: "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryType",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryType:enum"
                },
                {
                  "kind": "Content",
                  "text": ", bufferGeometry: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "BufferGeometry",
                  "canonicalReference": "three!BufferGeometry:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "geometryType",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "bufferGeometry",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryLineAccessor#bufferGeometry:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly bufferGeometry: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "BufferGeometry",
                  "canonicalReference": "three!BufferGeometry:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bufferGeometry",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryLineAccessor#geometryType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly geometryType: "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryType",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "geometryType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryLineAccessor#isLineAccessor:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isLineAccessor(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isLineAccessor"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryLineAccessor#object:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly object: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "three!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "object",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryLineAccessor#width:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get width(): "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": [
            {
              "startIndex": 4,
              "endIndex": 6
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!BufferedGeometryObject3dAccessor:class",
          "docComment": "/**\n * Accessor for nonindexed unspecified (`Object3D`) geometry.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BufferedGeometryObject3dAccessor extends "
            },
            {
              "kind": "Reference",
              "text": "BufferedGeometryAccessor",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessor:class"
            },
            {
              "kind": "Content",
              "text": " "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "IObject3dAccessor",
              "canonicalReference": "@here/harp-mapview!IObject3dAccessor:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BufferedGeometryObject3dAccessor",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryObject3dAccessor:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `BufferedGeometryObject3dAccessor` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(object: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "three!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": ", geometryType: "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryType",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryType:enum"
                },
                {
                  "kind": "Content",
                  "text": ", bufferGeometry: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "BufferGeometry",
                  "canonicalReference": "three!BufferGeometry:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "geometryType",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "bufferGeometry",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryObject3dAccessor#bufferGeometry:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly bufferGeometry: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "BufferGeometry",
                  "canonicalReference": "three!BufferGeometry:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bufferGeometry",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryObject3dAccessor#geometryType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly geometryType: "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryType",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "geometryType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryObject3dAccessor#getVertices:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getVertices(): "
                },
                {
                  "kind": "Reference",
                  "text": "Float32Array",
                  "canonicalReference": "!Float32Array:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getVertices"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryObject3dAccessor#isObject3dAccessor:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isObject3dAccessor(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isObject3dAccessor"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryObject3dAccessor#object:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly object: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "three!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "object",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": [
            {
              "startIndex": 4,
              "endIndex": 6
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-mapview!buildMetricValueEvaluator:function(1)",
          "docComment": "/**\n * Convert metric style property to expression that accounts [[MapView.pixelToWorld]] if `metricUnit === 'Pixel'`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function buildMetricValueEvaluator(value: "
            },
            {
              "kind": "Reference",
              "text": "Expr",
              "canonicalReference": "@here/harp-datasource-protocol!Expr:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Value",
              "canonicalReference": "@here/harp-datasource-protocol!Value:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ", metricUnit: "
            },
            {
              "kind": "Content",
              "text": "string | undefined"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string | number | boolean | object | null | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 8,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "parameterName": "metricUnit",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              }
            }
          ],
          "name": "buildMetricValueEvaluator"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-mapview!buildObject:function(1)",
          "docComment": "/**\n * Builds the object associated with the given technique.\n *\n * @param technique - The technique.\n *\n * @param geometry - The object's geometry.\n *\n * @param material - The object's material.\n *\n * @param tile - The tile where the object is located.\n *\n * @param elevationEnabled - True if elevation is enabled, false otherwise.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function buildObject(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": ", geometry: "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "BufferGeometry",
              "canonicalReference": "three!BufferGeometry:class"
            },
            {
              "kind": "Content",
              "text": ", material: "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "Material",
              "canonicalReference": "three!Material:class"
            },
            {
              "kind": "Content",
              "text": " | THREE."
            },
            {
              "kind": "Reference",
              "text": "Material",
              "canonicalReference": "three!Material:class"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ", tile: "
            },
            {
              "kind": "Reference",
              "text": "Tile",
              "canonicalReference": "@here/harp-mapview!Tile:class"
            },
            {
              "kind": "Content",
              "text": ", elevationEnabled: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "Object3D",
              "canonicalReference": "three!Object3D:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 16,
            "endIndex": 18
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "geometry",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            },
            {
              "parameterName": "material",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 11
              }
            },
            {
              "parameterName": "tile",
              "parameterTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              }
            },
            {
              "parameterName": "elevationEnabled",
              "parameterTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 15
              }
            }
          ],
          "name": "buildObject"
        },
        {
          "kind": "Enum",
          "canonicalReference": "@here/harp-mapview!CalculationStatus:enum",
          "docComment": "/**\n * Status of the elevation range calculation.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum CalculationStatus "
            }
          ],
          "releaseTag": "Public",
          "name": "CalculationStatus",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!CalculationStatus.FinalPrecise:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "FinalPrecise = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "FinalPrecise",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!CalculationStatus.PendingApproximate:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PendingApproximate = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "PendingApproximate",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!CameraMovementDetector:class",
          "docComment": "/**\n * The `CameraMovementDetector` class checks for changes in camera position and orientation, to detect continuous movements without the animation mode activated in [[MapView]]. If the interaction is not continuous enough, you can use a throttling timer to reduce the number of callbacks.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class CameraMovementDetector "
            }
          ],
          "releaseTag": "Public",
          "name": "CameraMovementDetector",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!CameraMovementDetector:constructor(1)",
              "docComment": "/**\n * Initializes the detector with timeout value and callbacks. [[MapView]] also provides events for client code to be notified when these cues occur.\n *\n * @param m_throttlingTimeout - The delay, in milliseconds, between the last user interaction detected and the call to `m_movementFinishedFunc`; the default is `300`.\n *\n * @param m_movementStartedFunc - Callback function, called when the user starts interacting.\n *\n * @param m_movementFinishedFunc - Callback function, called when the user stops interacting.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(m_throttlingTimeout: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", m_movementStartedFunc: "
                },
                {
                  "kind": "Content",
                  "text": "(() => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", m_movementFinishedFunc: "
                },
                {
                  "kind": "Content",
                  "text": "(() => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "m_throttlingTimeout",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "m_movementStartedFunc",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "m_movementFinishedFunc",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!CameraMovementDetector#cameraIsMoving:member",
              "docComment": "/**\n * Returns `true` if the camera of this [[MapView]] is currently moving. In this case the `m_movementFinishedFunc` is waiting to be called after the throttling timer runs out.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get cameraIsMoving(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "cameraIsMoving",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!CameraMovementDetector#cameraMovedLastFrame:member",
              "docComment": "/**\n * Returns `true` if the camera has moved in the last frame.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get cameraMovedLastFrame(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "cameraMovedLastFrame",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!CameraMovementDetector#checkCameraMoved:member(1)",
              "docComment": "/**\n * Checks if the camera has moved since the last time it was checked. The `m_movementStartedFunc` is called when a movement starts. If no movement is detected, a timer for `m_movementFinishedFunc` starts.\n *\n * @param mapView - [[Mapview]]'s position and camera are checked for modifications.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checkCameraMoved(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ", now: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "now",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "checkCameraMoved"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!CameraMovementDetector#clear:member(1)",
              "docComment": "/**\n * Reset the saved camera position. Next time checkCameraMoved is called, it will return `false`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "clear"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!CameraMovementDetector#dispose:member(1)",
              "docComment": "/**\n * Disposes resources and kills the throttling timer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispose(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "dispose"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!CameraMovementDetector#forceMoved:member(1)",
              "docComment": "/**\n * Force change of camera position. Next time checkCameraMoved is called, it will return `true`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forceMoved(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "forceMoved"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!Circles:class",
          "docComment": "/**\n * Point object that implements the raycasting of circles in screen space.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Circles extends "
            },
            {
              "kind": "Reference",
              "text": "MapViewPoints",
              "canonicalReference": "@here/harp-mapview!MapViewPoints:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Circles",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Circles#testPoint:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "testPoint(point: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", screenPosition: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "three!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ", pickCoordinates: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "three!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ", index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", distance: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", intersects: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Intersection",
                  "canonicalReference": "three!Intersection:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 18,
                "endIndex": 19
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "point",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "screenPosition",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "pickCoordinates",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 10,
                    "endIndex": 11
                  }
                },
                {
                  "parameterName": "distance",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                },
                {
                  "parameterName": "intersects",
                  "parameterTypeTokenRange": {
                    "startIndex": 14,
                    "endIndex": 17
                  }
                }
              ],
              "name": "testPoint"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!ClipPlanesEvaluator:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ClipPlanesEvaluator "
            }
          ],
          "releaseTag": "Public",
          "name": "ClipPlanesEvaluator",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ClipPlanesEvaluator#evaluateClipPlanes:member(1)",
              "docComment": "/**\n * Compute near and far clipping planes distance.\n *\n * Evaluation method should be called on every frame and camera clip planes updated. This is related to evaluator implementation and its input data, that may suddenly change such as camera position or angle, projection type or so. Some evaluators may not depend on all or even any of input objects, but to preserve compatibility with any evaluator type it is strongly recommended to update on every frame.  @note The camera clipping planes (near/far properties) aren't automatically updated via #evaluateClipPlanes() call, user should do it manually if needed.\n *\n * @param camera - The [[THREE.Camera]] in use.\n *\n * @param projection - The geo-projection currently used for encoding geographic data.\n *\n * @param elevationProvider - The optional elevation provider for fine tuned range calculation, taking into account terrain variability and unevenness.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "evaluateClipPlanes(camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "three!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": ", projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ", elevationProvider?: "
                },
                {
                  "kind": "Reference",
                  "text": "ElevationProvider",
                  "canonicalReference": "@here/harp-mapview!ElevationProvider:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ViewRanges",
                  "canonicalReference": "@here/harp-datasource-protocol!ViewRanges:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "elevationProvider",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "evaluateClipPlanes"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ClipPlanesEvaluator#maxElevation:member",
              "docComment": "/**\n * Set maximum elevation to be rendered, values above sea level are positive.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxElevation: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxElevation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ClipPlanesEvaluator#minElevation:member",
              "docComment": "/**\n * Minimum elevation to be rendered, values beneath the sea level are negative.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minElevation: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minElevation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!ColorCache:class",
          "docComment": "/**\n * Use `ColorCache` to reuse a color specified by name and save allocation as well as setup time.\n *\n * Implemented as a singleton. Do not modify colors after getting them from the `ColorCache`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ColorCache "
            }
          ],
          "releaseTag": "Public",
          "name": "ColorCache",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!ColorCache#clear:member(1)",
              "docComment": "/**\n * Clears the cache. Only references to the THREE.Color are removed from the cache. Consequently, clearing the cache does not cause any negative visual impact.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clear"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!ColorCache#getColor:member(1)",
              "docComment": "/**\n * Returns the color for the given `colorCode`. This function may reuse a previously generated color, so you cannot modify the contents of the color.\n *\n * @param colorCode - ThreeJS color code or name. You must provide a valid color code or name, as this function does not do any validation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getColor(colorCode: "
                },
                {
                  "kind": "Content",
                  "text": "string | number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Color",
                  "canonicalReference": "three!Color:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "colorCode",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getColor"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!ColorCache.instance:member",
              "docComment": "/**\n * Return instance of `ColorCache`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static get instance(): "
                },
                {
                  "kind": "Reference",
                  "text": "ColorCache",
                  "canonicalReference": "@here/harp-mapview!ColorCache:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "instance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!ColorCache#size:member",
              "docComment": "/**\n * Returns the number of elements in the cache.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get size(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-mapview!computeArrayAverage:function(1)",
          "docComment": "/**\n * Only exported for testing  @ignore\n *\n * Compute the averages for the passed in array of numbers.\n *\n * @param samples - Array containing sampled values.\n *\n * @returns {(Stats | undefined)}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function computeArrayAverage(samples: "
            },
            {
              "kind": "Content",
              "text": "number[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "samples",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "computeArrayAverage"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-mapview!computeArrayStats:function(1)",
          "docComment": "/**\n * Only exported for testing  @ignore\n *\n * Compute the [[ArrayStats]] for the passed in array of numbers.\n *\n * @param samples - Array containing sampled values. Will be modified (!) by sorting the entries.\n *\n * @returns {(Stats | undefined)}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function computeArrayStats(samples: "
            },
            {
              "kind": "Content",
              "text": "number[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Stats",
              "canonicalReference": "@here/harp-mapview!Stats:interface"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "samples",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "computeArrayStats"
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!ConcurrentDecoderFacade:class",
          "docComment": "/**\n * Default concurrent decoder helper.\n *\n * A convenient singleton that maintains a separate [[ConcurrentWorkerSet]] for each bundle requested. Provides easy access to [[WorkerBasedDecoder]]s for data sources.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ConcurrentDecoderFacade "
            }
          ],
          "releaseTag": "Public",
          "name": "ConcurrentDecoderFacade",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!ConcurrentDecoderFacade.defaultScriptUrl:member",
              "docComment": "/**\n * The URL containing a script to fall back (default) to when looking for worker sets and decoders.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultScriptUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultScriptUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!ConcurrentDecoderFacade.defaultWorkerCount:member",
              "docComment": "/**\n * The default number of workers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultWorkerCount?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultWorkerCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!ConcurrentDecoderFacade.destroy:member(1)",
              "docComment": "/**\n * Destroys all managed [[ConcurrentWorkerSet]]s.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static destroy(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "destroy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!ConcurrentDecoderFacade.destroyWorkerSet:member(1)",
              "docComment": "/**\n * Destroys a [[ConcurrentWorkerSet]] instance.\n *\n * @param scriptUrl - The worker script URL that was used to create the [[ConcurrentWorkerSet]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static destroyWorkerSet(scriptUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scriptUrl",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "destroyWorkerSet"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!ConcurrentDecoderFacade.getTileDecoder:member(1)",
              "docComment": "/**\n * Returns a [[WorkerBasedDecoder]] instance.\n *\n * @param decoderServiceType - The name of the decoder service type.\n *\n * @param scriptUrl - The optional URL with the workers' script.\n *\n * @param workerCount - The number of web workers to use.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getTileDecoder(decoderServiceType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", scriptUrl?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", workerCount?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ITileDecoder",
                  "canonicalReference": "@here/harp-datasource-protocol!ITileDecoder:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "decoderServiceType",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "scriptUrl",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "workerCount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "getTileDecoder"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!ConcurrentDecoderFacade.getWorkerSet:member(1)",
              "docComment": "/**\n * Returns a [[ConcurrentWorkerSet]] instance based on the script URL specified.\n *\n * @param scriptUrl - The optional URL with the workers' script. If not specified, the function uses [[defaultScriptUrl]] instead.\n *\n * @param workerCount - The number of web workers to use.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getWorkerSet(scriptUrl?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", workerCount?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ConcurrentWorkerSet",
                  "canonicalReference": "@here/harp-mapview!ConcurrentWorkerSet:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scriptUrl",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "workerCount",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getWorkerSet"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!ConcurrentTilerFacade:class",
          "docComment": "/**\n * Default concurrent tiler helper.\n *\n * A convenient singleton that maintains a separate [[ConcurrentWorkerSet]] for each bundle requested. Provides easy access to [[WorkerBasedTiler]]s for data sources.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ConcurrentTilerFacade "
            }
          ],
          "releaseTag": "Public",
          "name": "ConcurrentTilerFacade",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!ConcurrentTilerFacade.defaultScriptUrl:member",
              "docComment": "/**\n * The URL containing a script to fall back (default) to when looking for worker sets and tilers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultScriptUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultScriptUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!ConcurrentTilerFacade.defaultWorkerCount:member",
              "docComment": "/**\n * The default number of workers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static defaultWorkerCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "defaultWorkerCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!ConcurrentTilerFacade.destroy:member(1)",
              "docComment": "/**\n * Destroys all managed [[ConcurrentWorkerSet]]s.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static destroy(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "destroy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!ConcurrentTilerFacade.destroyWorkerSet:member(1)",
              "docComment": "/**\n * Destroys a [[ConcurrentWorkerSet]] instance.\n *\n * @param scriptUrl - The worker script URL that was used to create the [[ConcurrentWorkerSet]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static destroyWorkerSet(scriptUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scriptUrl",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "destroyWorkerSet"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!ConcurrentTilerFacade.getTiler:member(1)",
              "docComment": "/**\n * Returns a [[WorkerBasedTiler]] instance.\n *\n * @param tilerServiceType - The name of the tiler service type.\n *\n * @param scriptUrl - The optional URL with the workers' script.\n *\n * @param workerCount - The number of web workers to use.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getTiler(tilerServiceType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", scriptUrl?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", workerCount?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ITiler",
                  "canonicalReference": "@here/harp-datasource-protocol!ITiler:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tilerServiceType",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "scriptUrl",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "workerCount",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "getTiler"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!ConcurrentTilerFacade.getWorkerSet:member(1)",
              "docComment": "/**\n * Returns a [[ConcurrentWorkerSet]] instance based on the script URL specified.\n *\n * @param scriptUrl - The optional URL with the workers' script. If not specified, the function uses [[defaultScriptUrl]] instead.\n *\n * @param workerCount - The number of web workers to use.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getWorkerSet(scriptUrl?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", workerCount?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ConcurrentWorkerSet",
                  "canonicalReference": "@here/harp-mapview!ConcurrentWorkerSet:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scriptUrl",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "workerCount",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getWorkerSet"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!CopyrightCoverageProvider:class",
          "docComment": "/**\n * Base class to provide copyrights based on copyright coverage information, defined by geographical bounding boxes and relevant zoom level ranges.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class CopyrightCoverageProvider implements "
            },
            {
              "kind": "Reference",
              "text": "CopyrightProvider",
              "canonicalReference": "@here/harp-mapview!CopyrightProvider:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "CopyrightCoverageProvider",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!CopyrightCoverageProvider#getCopyrightCoverageData:member(1)",
              "docComment": "/**\n * Asynchronously retrieves copyright coverage data.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract getCopyrightCoverageData(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "AreaCopyrightInfo",
                  "canonicalReference": "@here/harp-mapview!AreaCopyrightInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getCopyrightCoverageData"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!CopyrightCoverageProvider#getCopyrights:member(1)",
              "docComment": "/**\n * @inheritdoc\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCopyrights(geoBox: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoBox",
                  "canonicalReference": "@here/harp-geoutils!GeoBox:class"
                },
                {
                  "kind": "Content",
                  "text": ", level: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CopyrightInfo",
                  "canonicalReference": "@here/harp-mapview!CopyrightInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "geoBox",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "level",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getCopyrights"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!CopyrightCoverageProvider#getTree:member(1)",
              "docComment": "/**\n * @inheritdoc\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTree(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getTree"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!CopyrightCoverageProvider#initRBush:member(1)",
              "docComment": "/**\n * Initializes RBush.\n *\n * @param entries - Entries for tree.\n *\n * @returns RBush instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "initRBush(entries: "
                },
                {
                  "kind": "Reference",
                  "text": "AreaCopyrightInfo",
                  "canonicalReference": "@here/harp-mapview!AreaCopyrightInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "entries",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "initRBush"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!CopyrightCoverageProvider#logger:member",
              "docComment": "/**\n * Logger instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readonly logger: "
                },
                {
                  "kind": "Reference",
                  "text": "ILogger",
                  "canonicalReference": "@here/harp-utils!ILogger:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "logger",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!CopyrightCoverageResponse:interface",
          "docComment": "/**\n * Schema of [Map Tile API copyright endpoint](https://developer.here.com/documentation/map-tile/topics/resource-copyright.html) JSON response.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CopyrightCoverageResponse "
            }
          ],
          "releaseTag": "Public",
          "name": "CopyrightCoverageResponse",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@here/harp-mapview!CopyrightCoverageResponse:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[scheme: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "AreaCopyrightInfo",
                  "canonicalReference": "@here/harp-mapview!AreaCopyrightInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scheme",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!CopyrightElementHandler:class",
          "docComment": "/**\n * Helper class that maintains up-to-date [[MapView]] copyright information in DOM element.\n *\n * @example\n *\n * // HTML snippet <div id=\"copyrightNotice\" style=\"position:absolute; right:0; bottom:0; z-index:100\"></div>\n *\n * // JavaScript const mapView = new MapView({ ... }); CopyrightElementHandler.install(\"copyrightNotice\", mapView);\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class CopyrightElementHandler "
            }
          ],
          "releaseTag": "Public",
          "name": "CopyrightElementHandler",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!CopyrightElementHandler:constructor(1)",
              "docComment": "/**\n * Creates a new `CopyrightElementHandler` that updates the DOM element with the copyright info of the given `mapView`.\n *\n * Note: Generally, the static [[install]] method can be used to create and attach a new `CopyrightElementHandler` to a [[MapView]]\n *\n * @param element - HTML DOM element or a HTML DOM element id\n *\n * @param mapView - optional, [[attach]] to this [[MapView]] instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(element: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ", mapView?: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "element",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!CopyrightElementHandler#attach:member(1)",
              "docComment": "/**\n * Attaches this [[CopyrightInfo]] updates from [[MapView]] instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "attach(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "attach"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!CopyrightElementHandler#destroy:member(1)",
              "docComment": "/**\n * Destroys this object by removing all event listeners from the attached [[MapView]]s.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "destroy(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "destroy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!CopyrightElementHandler#detach:member(1)",
              "docComment": "/**\n * Stop following [[CopyrightInfo]] updates from [[MapView]] instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "detach(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "detach"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!CopyrightElementHandler.install:member(1)",
              "docComment": "/**\n * Install [[CopyrightElementHandler]] on DOM element and - optionally - attach to a [[MapView]] instance.\n *\n * @param element - HTML DOM element or a HTML DOM element id\n *\n * @param mapView - , optional, [[attach]] to this [[MapView]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static install(element: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ", mapView?: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "CopyrightElementHandler",
                  "canonicalReference": "@here/harp-mapview!CopyrightElementHandler:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "element",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "install"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!CopyrightElementHandler#setDefaults:member(1)",
              "docComment": "/**\n * Set [[CopyrightInfo]] defaults to be used in case [[DataSource]] does not provide deatailed copyright information.\n *\n * The defaults will applied to all undefined `year`, `label` and `link` values in the copyright information retrieved from [[MapView]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDefaults(defaults: "
                },
                {
                  "kind": "Reference",
                  "text": "CopyrightInfo",
                  "canonicalReference": "@here/harp-mapview!CopyrightInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "defaults",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "setDefaults"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!CopyrightElementHandler#setStaticCopyightInfo:member(1)",
              "docComment": "/**\n * Sets the [[staticInfo]] property.\n *\n * A `CopyrightElementHandler` always displays a deduplicated sum of static copyright info and copyright information obtained from attached [[MapView]]s.\n *\n * This information is used when [[DataSource]] instances of given [[MapView]] do not provide copyright information.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setStaticCopyightInfo(staticInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "CopyrightInfo",
                  "canonicalReference": "@here/harp-mapview!CopyrightInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "staticInfo",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "setStaticCopyightInfo"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!CopyrightElementHandler#staticInfo:member",
              "docComment": "/**\n * Static copyright info.\n *\n * Use when [[MapView]]'s [[DataSource]]'s do not provide proper copyright information.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "staticInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "CopyrightInfo",
                  "canonicalReference": "@here/harp-mapview!CopyrightInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "staticInfo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!CopyrightElementHandler#update:member",
              "docComment": "/**\n * Update copyright info text in controlled HTML element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "update: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "update",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!CopyrightInfo:interface",
          "docComment": "/**\n * Copyright info attached to data displayed on map. Provided by [[DataSource]] and attached to [[Tile]]s.\n *\n * In most cases, an application should display this information on [[MapView]] to conform with licencing terms of its map data providers.\n *\n * @see [[CopyrightElementHandler]]\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CopyrightInfo "
            }
          ],
          "releaseTag": "Public",
          "name": "CopyrightInfo",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!CopyrightInfo#id:member",
              "docComment": "/**\n * Unique id of the copyright holder.\n *\n * `id`s should be unique. It is recommended to build them from unique identifiers like registered domain names.\n *\n * Examples:\n *\n * * `openstreetmap.org` - for data originating from OpenStreetMap project * `naturalearthdata.com` - for data originating from Natural Earth dataset\n *\n * Note: [[DataSource]] may return [[CopyrightInfo]] with only `id`, thus defining only holder of copyright, however, valid attribution may require proper `label` and `link`.\n *\n * Entries with same `id` are deduplicated by [[CopyrightInfo.mergeArrays]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!CopyrightInfo#label:member",
              "docComment": "/**\n * Copyright text to display after the copyright symbol on the map.\n *\n * If undefined, `id` is used as text label. Set it to empty string to not render a copyright info.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "label?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!CopyrightInfo#link:member",
              "docComment": "/**\n * Optional URL pointing to further copyright information.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "link?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "link",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!CopyrightInfo#year:member",
              "docComment": "/**\n * Optional, copyright notice year.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "year?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "year",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@here/harp-mapview!CopyrightInfo:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace CopyrightInfo "
            }
          ],
          "releaseTag": "Public",
          "name": "CopyrightInfo",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!CopyrightInfo.formatAsHtml:function(1)",
              "docComment": "/**\n * Format copyright information to a HTML string that can be displayed in the UI.\n *\n * * Empty list returns empty string. * Entries with empty (but defined) labels are skipped.\n *\n * @param copyrightInfo - Array of copyrights to format.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function formatAsHtml(copyrightInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "CopyrightInfo",
                  "canonicalReference": "@here/harp-mapview!CopyrightInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "copyrightInfo",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "formatAsHtml"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!CopyrightInfo.mergeArrays:function(1)",
              "docComment": "/**\n * Merge [[CopyrightInfo]] arrays, removing duplicates.\n *\n * `id` and `label` are considered keys in deduplication algorithm.\n *\n * @param sources - non-duplicate elements from this array are added to `target`\n *\n * @returns merge of all copyright infos in `sources`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function mergeArrays(a: "
                },
                {
                  "kind": "Reference",
                  "text": "CopyrightInfo",
                  "canonicalReference": "@here/harp-mapview!CopyrightInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ", b?: "
                },
                {
                  "kind": "Reference",
                  "text": "CopyrightInfo",
                  "canonicalReference": "@here/harp-mapview!CopyrightInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "CopyrightInfo",
                  "canonicalReference": "@here/harp-mapview!CopyrightInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  }
                }
              ],
              "name": "mergeArrays"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!CopyrightProvider:interface",
          "docComment": "/**\n * `CopyrightProvider` is an interface to retrieve copyrights information for geographic region specified by bounding box.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CopyrightProvider "
            }
          ],
          "releaseTag": "Public",
          "name": "CopyrightProvider",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!CopyrightProvider#getCopyrights:member(1)",
              "docComment": "/**\n * Retrieves copyrights.\n *\n * @param geoBox - Bounding geo box to get copyrights for.\n *\n * @param level - Zoom level to get copyrights for.\n *\n * @returns Promise with an array of copyrights for this geo box.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCopyrights(geoBox: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoBox",
                  "canonicalReference": "@here/harp-geoutils!GeoBox:class"
                },
                {
                  "kind": "Content",
                  "text": ", level: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CopyrightInfo",
                  "canonicalReference": "@here/harp-mapview!CopyrightInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "geoBox",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "level",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getCopyrights"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-mapview!createDefaultClipPlanesEvaluator:var",
          "docComment": "/**\n * Factory function that creates default [[ClipPlanesEvaluator]] that calculates near plane based on ground distance and camera orientation.\n *\n * Creates [[TiltViewClipPlanesEvaluator]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "createDefaultClipPlanesEvaluator: "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "TiltViewClipPlanesEvaluator",
              "canonicalReference": "@here/harp-mapview!TiltViewClipPlanesEvaluator:class"
            }
          ],
          "releaseTag": "Public",
          "name": "createDefaultClipPlanesEvaluator",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-mapview!createDepthPrePassMaterial:function(1)",
          "docComment": "/**\n * Creates material for depth prepass.\n *\n * Creates material that writes only to the z-buffer. Updates the original material instance, to support depth prepass.\n *\n * @param baseMaterial - The base material of mesh that is updated to work with depth prepass and then used. This parameter is a template for depth prepass material that is returned.\n *\n * @returns depth prepass material, which is a clone of `baseMaterial` with the adapted settings.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createDepthPrePassMaterial(baseMaterial: "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "Material",
              "canonicalReference": "three!Material:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "Material",
              "canonicalReference": "three!Material:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "baseMaterial",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "name": "createDepthPrePassMaterial"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-mapview!createDepthPrePassMesh:function(1)",
          "docComment": "/**\n * Clones a given mesh to render it in the depth prepass with another material. Both the original and depth prepass meshes, when rendered in the correct order, create the proper depth prepass effect. The original mesh material is slightly modified by [[createDepthPrePassMaterial]] to support the depth prepass. This method is usable only if the material of this mesh has an opacity value in the range `(0,1)`.\n *\n * The DepthPrePass object is created wis a slightly smaller `renderOrder` as the original mesh to ensure that it's rendered first.\n *\n * @param mesh - original mesh\n *\n * @returns `Mesh` depth pre pass\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createDepthPrePassMesh(mesh: "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "Mesh",
              "canonicalReference": "three!Mesh:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "Mesh",
              "canonicalReference": "three!Mesh:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "mesh",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "name": "createDepthPrePassMesh"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-mapview!createMaterial:function(1)",
          "docComment": "/**\n * Create a material, depending on the rendering technique provided in the options.\n *\n * @param options - The material options the subsequent functions need.\n *\n * @param materialUpdateCallback - Optional callback when the material gets updated, e.g. after texture loading.\n *\n * @returns new material instance that matches `technique.name`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createMaterial(options: "
            },
            {
              "kind": "Reference",
              "text": "MaterialOptions",
              "canonicalReference": "@here/harp-mapview!MaterialOptions:interface"
            },
            {
              "kind": "Content",
              "text": ", textureReadyCallback?: "
            },
            {
              "kind": "Content",
              "text": "(texture: THREE."
            },
            {
              "kind": "Reference",
              "text": "Texture",
              "canonicalReference": "three!Texture:class"
            },
            {
              "kind": "Content",
              "text": ") => void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "Material",
              "canonicalReference": "three!Material:class"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "options",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "textureReadyCallback",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            }
          ],
          "name": "createMaterial"
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!DataSource:class",
          "docComment": "/**\n * Derive a class from `DataSource` to contribute data and geometries to the [[MapView]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class DataSource extends "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "EventDispatcher",
              "canonicalReference": "three!EventDispatcher:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "DataSource",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!DataSource:constructor(1)",
              "docComment": "/**\n * Constructs a new `DataSource`.\n *\n * @param options - The options to create the data source.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSourceOptions",
                  "canonicalReference": "@here/harp-mapview!DataSourceOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!DataSource#addGroundPlane:member",
              "docComment": "/**\n * Whether the datasource should have a ground plane (this plane covers the tile entirely and has the minimum possible renderOrder), this can be required in some cases when fallback parent tiles need to be covered by the children, otherwise the content will overlap. Default is false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addGroundPlane: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "addGroundPlane",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!DataSource#allowOverlappingTiles:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowOverlappingTiles: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "allowOverlappingTiles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#attach:member(1)",
              "docComment": "/**\n * This method is called when this `DataSource` is added to a [[MapView]].\n *\n * Reimplementations of this method must invoke the definition of the super class.\n *\n * @param mapView - The instance of the [[MapView]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "attach(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "attach"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!DataSource#cacheable:member",
              "docComment": "/**\n * Set to `true` if the [[MapView]] can cache tiles produced by this `DataSource`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cacheable: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "cacheable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#canGetTile:member(1)",
              "docComment": "/**\n * Returns `true` if [[DataSource]] can load tile with given [[TileKey]] and zoom level.\n *\n * @param zoomLevel - The zoom level of the [[MapView]].\n *\n * @param tileKey - The unique identifier for a map tile.\n *\n * @returns `true` if the tile for the given [[TileKey]] can be loaded.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "canGetTile(zoomLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "zoomLevel",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "canGetTile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#clearCache:member(1)",
              "docComment": "/**\n * Purges all the caching done by this `DataSource`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearCache(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clearCache"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#clearFeatureState:member(1)",
              "docComment": "/**\n * Clears the state of all the features of this [[DataSource]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearFeatureState(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clearFeatureState"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#connect:member(1)",
              "docComment": "/**\n * This method is called when the `DataSource` is added to a [[MapView]]. Reimplement this method to provide any custom initialization, such as, to establish a network connection, or to initialize complex data structures.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "connect(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "connect"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#detach:member(1)",
              "docComment": "/**\n * This method is called when this `DataSource` is removed from a [[MapView]].\n *\n * Reimplementations of this method must invoke the definition of the super class.\n *\n * @param mapView - The instance of the [[MapView]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "detach(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "detach"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#dispose:member(1)",
              "docComment": "/**\n * Destroys this `DataSource`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispose(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "dispose"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!DataSource#enabled:member",
              "docComment": "/**\n * Set to `true` if this `DataSource` is enabled; `false` otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#getDataZoomLevel:member(1)",
              "docComment": "/**\n * Computes the data zoom level to use.\n *\n * @param zoomLevel - The zoom level of the [[MapView]].\n *\n * @returns The data zoom level to use.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getDataZoomLevel(zoomLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "zoomLevel",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getDataZoomLevel"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#getFeatureState:member(1)",
              "docComment": "/**\n * Gets the state of the given feature id.\n *\n * @param featureId - The id of the feature.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getFeatureState(featureId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ValueMap",
                  "canonicalReference": "@here/harp-datasource-protocol!ValueMap:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "featureId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getFeatureState"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#getTile:member(1)",
              "docComment": "/**\n * This method is called when [[MapView]] needs to visualize or preload the content of a [[TileKey]].\n *\n * @param tileKey - The unique identifier for a map tile.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract getTile(tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getTile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#getTilingScheme:member(1)",
              "docComment": "/**\n * Returns the [[TilingScheme]] used by this `DataSource`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract getTilingScheme(): "
                },
                {
                  "kind": "Reference",
                  "text": "TilingScheme",
                  "canonicalReference": "@here/harp-geoutils!TilingScheme:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getTilingScheme"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#isFullyCovering:member(1)",
              "docComment": "/**\n * Boolean which says whether a [[DataSource]] produces tiles that fully cover the tile, i.e. tiles underneath are completely hidden. Must be overriden for [[DataSource]]'s that don't have a ground plane, but which still fully cover the tile, e.g. web tiles.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isFullyCovering(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isFullyCovering"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#isVisible:member(1)",
              "docComment": "/**\n * Returns `true` if [[DataSource]] should be displayed for the zoom level.\n *\n * @param zoomLevel - The zoom level of the [[MapView]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isVisible(zoomLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "zoomLevel",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isVisible"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!DataSource#mapView:member",
              "docComment": "/**\n * The [[MapView]] that is holding this `DataSource`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get mapView(): "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mapView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!DataSource#maxDataLevel:member",
              "docComment": "/**\n * The maximum zoom level at which data is available.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxDataLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxDataLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!DataSource#maxDisplayLevel:member",
              "docComment": "/**\n * The maximum zoom level at which [[DataSource]] is displayed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxDisplayLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxDisplayLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!DataSource#maxGeometryHeight:member",
              "docComment": "/**\n * Maximum geometry height above ground level this `DataSource` can produce.\n *\n * Used in first stage of frustum culling before [[Tile.maxGeometryHeight]] data is available.\n *\n * @default 0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get maxGeometryHeight(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset maxGeometryHeight(value: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "maxGeometryHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!DataSource#maxZoomLevel:member",
              "docComment": "/**\n * The maximum zoom level at which data is available or displayed at (depending on [[DataSource]] subclass).\n *\n * @deprecated\n *\n * Use [[maxDataLevel]] and [[maxDisplayLevel]] instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get maxZoomLevel(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset maxZoomLevel(level: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "maxZoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!DataSource#minDataLevel:member",
              "docComment": "/**\n * The minimum zoom level at which data is available.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minDataLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minDataLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!DataSource#minDisplayLevel:member",
              "docComment": "/**\n * The minimum zoom level at which [[DataSource]] is displayed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minDisplayLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minDisplayLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!DataSource#minZoomLevel:member",
              "docComment": "/**\n * The minimum zoom level at which data is available or displayed at (depending on [[DataSource]] subclass).\n *\n * @deprecated\n *\n * Use [[minDataLevel]] and [[minDisplayLevel]] instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get minZoomLevel(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset minZoomLevel(level: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "minZoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!DataSource#name:member",
              "docComment": "/**\n * The unique name of a `DataSource` instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!DataSource#projection:member",
              "docComment": "/**\n * The [[Projection]] used by the [[MapView]] that is holding this `DataSource`.\n *\n * An `Error` is thrown if you call this method before this `DataSource` has been added to a [[MapView]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get projection(): "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "projection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#ready:member(1)",
              "docComment": "/**\n * Returns `true` if this `DataSource` is ready and the [[MapView]] can invoke `getTile()` to start requesting data.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ready(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "ready"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#removeFeatureState:member(1)",
              "docComment": "/**\n * Removes the state associated to the given feature.\n *\n * @param featureId - The id of the feature.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeFeatureState(featureId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "featureId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "removeFeatureState"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#requestUpdate:member(1)",
              "docComment": "/**\n * Sends a request to the [[MapView]] to redraw the scene.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestUpdate(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "requestUpdate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#setEnableElevationOverlay:member(1)",
              "docComment": "/**\n * Enables or disables overlay of geometry on elevation. It must be overloaded by data sources supporting this feature.\n *\n * @param value - True to enable, false to disable.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setEnableElevationOverlay(enable: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "enable",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setEnableElevationOverlay"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#setFeatureState:member(1)",
              "docComment": "/**\n * Sets the state of the given feature id.\n * ```typescript\n * dataSource.setFeatureState(featureId, { enabled: true });\n * ```\n *\n * @param featureId - The id of the feature.\n *\n * @param state - The new state of the feature.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setFeatureState(featureId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", state: "
                },
                {
                  "kind": "Reference",
                  "text": "ValueMap",
                  "canonicalReference": "@here/harp-datasource-protocol!ValueMap:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "featureId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "state",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setFeatureState"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#setLanguages:member(1)",
              "docComment": "/**\n * Used to configure the languages used by the `DataSource` according to priority; the first language in the array has the highest priority.\n *\n * @param languages - An array of ISO 639-1 language codes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setLanguages(languages?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "languages",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setLanguages"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#setPoliticalView:member(1)",
              "docComment": "/**\n * Used to express different country point of view (political view).\n *\n * @note Set to `undefined` (or empty string) if you want to reset to default point of view.\n *\n * @param pov - The country code which point of view should be presented in lower-case ISO 3166-1 alpha-2 format.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setPoliticalView(pov?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "pov",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setPoliticalView"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#setStyleSet:member(1)",
              "docComment": "/**\n * Invoked by [[MapView]] to notify when the [[Theme]] has been changed.\n *\n * If `DataSource` depends on a `styleSet` or `languages`, it must update its tiles' geometry.\n *\n * @deprecated, Use [[setTheme]].\n *\n * @param styleSet - The new theme that [[MapView]] uses.\n *\n * @param languages - An optional list of languages for the `DataSource`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setStyleSet(styleSet?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleSet",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleSet:type"
                },
                {
                  "kind": "Content",
                  "text": ", definitions?: "
                },
                {
                  "kind": "Reference",
                  "text": "Definitions",
                  "canonicalReference": "@here/harp-datasource-protocol!Definitions:interface"
                },
                {
                  "kind": "Content",
                  "text": ", languages?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "styleSet",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "definitions",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "languages",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "setStyleSet"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#setTheme:member(1)",
              "docComment": "/**\n * Apply the [[Theme]] to this data source.\n *\n * If `DataSource` depends on a `styleSet` defined by this theme or `languages`, it must update its tiles' geometry.\n *\n * @param languages - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setTheme(theme: "
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@here/harp-datasource-protocol!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": ", languages?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "theme",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "languages",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setTheme"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#shouldPreloadTiles:member(1)",
              "docComment": "/**\n * This method is called by the [[MapView]] to determine if the content of the surrounding tiles must be preloaded.\n *\n * @returns `true` if the [[MapView]] should try to preload tiles surrounding the visible tiles; `false` otherwise. The default is `false`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldPreloadTiles(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "shouldPreloadTiles"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#shouldRenderText:member(1)",
              "docComment": "/**\n * Returns `true` if [[MapView]] should render the text elements with the given [[TileKey]] and zoom level.\n *\n * This is an additional check for the tiles that are already selected for rendering so the default implementation returns `true`.\n *\n * @param zoomLevel - The zoom level.\n *\n * @param tileKey - The unique identifier for a map tile.\n *\n * @returns `true` if the text elements created for the given [[TileKey]] should be rendered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldRenderText(zoomLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "zoomLevel",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "shouldRenderText"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#shouldSubdivide:member(1)",
              "docComment": "/**\n * Returns `true` if [[MapView]] should traverse tiles further with given [[TileKey]] and zoom level.\n *\n * @param zoomLevel - The zoom level of the [[MapView]].\n *\n * @param tileKey - The unique identifier for a map tile.\n *\n * @returns `true` if the subtiles of the given [[TileKey]] should be checked for collisions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldSubdivide(zoomLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "zoomLevel",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "shouldSubdivide"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!DataSource#storageLevelOffset:member",
              "docComment": "/**\n * The difference between storage level and display level of tile.\n *\n * Storage level offset is a value applied (added) to current zoom level giving a final tile level being displayed. This way we may differentate current zoom level from the storage level that is displayed, giving fine grained control over the tiles being decoded an displayed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get storageLevelOffset(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset storageLevelOffset(levelOffset: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "storageLevelOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!DataSource#styleSetName:member",
              "docComment": "/**\n * Returns the name of the [[StyleSet]] to use for the decoding.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get styleSetName(): "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset styleSetName(styleSetName: string | undefined);"
                }
              ],
              "releaseTag": "Public",
              "name": "styleSetName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!DataSource#updateTile:member(1)",
              "docComment": "/**\n * This method is called by [[MapView]] before the tile needs to be updated, for example after a theme change.\n *\n * @param tile - The [[Tile]] to update.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateTile(tile: "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tile",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "updateTile"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!DataSource#useGeometryLoader:member",
              "docComment": "/**\n * Set to `true` if the loader should be used to get the tile contents.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "useGeometryLoader: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "useGeometryLoader",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!DataSourceOptions:interface",
          "docComment": "/**\n * Options for a [[DataSource]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DataSourceOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "DataSourceOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!DataSourceOptions#allowOverlappingTiles:member",
              "docComment": "/**\n * Whether the datasource can overlap tiles. Such overlapping is necessary when zooming out and waiting for the tiles to load, in this case, we use cached tiles to fill the missing gaps if available (and in some cases, the tiles can overlap, i.e. for example when a child is next to a parent, the parent is rendered beneath the child), however for some datasources (those that produce transparent tiles for example), this gives bad results, and as such, it should be disabled to reduce flickening. Another way to put it is that loading tiles are replaced with cached tiles and we then fall (back/forward) to the next appropriate zoom level.  @default true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allowOverlappingTiles?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "allowOverlappingTiles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!DataSourceOptions#maxDataLevel:member",
              "docComment": "/**\n * The maximum zoom level at which data is available.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxDataLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxDataLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!DataSourceOptions#maxDisplayLevel:member",
              "docComment": "/**\n * The maximum zoom level at which [[DataSource]] is displayed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxDisplayLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxDisplayLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!DataSourceOptions#maxZoomLevel:member",
              "docComment": "/**\n * The maximum zoom level at which data is available or displayed at (depending on [[DataSource]] subclass).\n *\n * @deprecated\n *\n * Use [[maxDataLevel]] and [[maxDisplayLevel]] instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxZoomLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxZoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!DataSourceOptions#minDataLevel:member",
              "docComment": "/**\n * The minimum zoom level at which data is available.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minDataLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minDataLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!DataSourceOptions#minDisplayLevel:member",
              "docComment": "/**\n * The minimum zoom level at which [[DataSource]] is displayed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minDisplayLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minDisplayLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!DataSourceOptions#minZoomLevel:member",
              "docComment": "/**\n * The minimum zoom level at which data is available or displayed at (depending on [[DataSource]] subclass).\n *\n * @deprecated\n *\n * Use [[minDataLevel]] and [[minDisplayLevel]] instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minZoomLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minZoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!DataSourceOptions#name:member",
              "docComment": "/**\n * The unique name of a [[DataSource]] instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!DataSourceOptions#storageLevelOffset:member",
              "docComment": "/**\n * Storage level offset applied to this `DataSource`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "storageLevelOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "storageLevelOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!DataSourceOptions#styleSetName:member",
              "docComment": "/**\n * The name of the [[StyleSet]] to evaluate for the decoding.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "styleSetName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styleSetName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!DataSourceTileList:interface",
          "docComment": "/**\n * List of visible tiles for a [[DataSource]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DataSourceTileList "
            }
          ],
          "releaseTag": "Public",
          "name": "DataSourceTileList",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!DataSourceTileList#allVisibleTileLoaded:member",
              "docComment": "/**\n * True if all [[visibleTiles]] are loaded.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allVisibleTileLoaded: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "allVisibleTileLoaded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!DataSourceTileList#dataSource:member",
              "docComment": "/**\n * The datasource that was producing the tiles.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dataSource: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSource",
                  "canonicalReference": "@here/harp-mapview!DataSource:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dataSource",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!DataSourceTileList#numTilesLoading:member",
              "docComment": "/**\n * The number of tiles which are still loading.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "numTilesLoading: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "numTilesLoading",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!DataSourceTileList#renderedTiles:member",
              "docComment": "/**\n * Map of tiles that will be rendered, key is the the combination of tile key and offset, see [[getKeyForTileKeyAndOffset]]. This includes tiles that are not in the [[visibleTiles]] list but that are used as fallbacks b/c they are still in the cache.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderedTiles: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<number, "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderedTiles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!DataSourceTileList#storageLevel:member",
              "docComment": "/**\n * The storage level of the visibleTiles. Note: renderedTiles might contain tiles from different levels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "storageLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "storageLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!DataSourceTileList#visibleTiles:member",
              "docComment": "/**\n * List of tiles we want to render (i.e. the tiles computed from the zoom level and view frustum). However some might not be renderable yet (e.g. loading). See [[renderedTiles]] for the actual list of tiles that the user will see.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visibleTiles: "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "visibleTiles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!DataSourceTileList#zoomLevel:member",
              "docComment": "/**\n * The current [[MapView]] zoom level.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "zoomLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "zoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-mapview!DEFAULT_MAX_THEME_INTHERITANCE_DEPTH:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DEFAULT_MAX_THEME_INTHERITANCE_DEPTH = 4"
            }
          ],
          "releaseTag": "Public",
          "name": "DEFAULT_MAX_THEME_INTHERITANCE_DEPTH",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-mapview!DEFAULT_TEXT_DISTANCE_SCALE:var",
          "docComment": "/**\n * Default distance scale. Will be applied if distanceScale is not defined in the technique. Defines the scale that will be applied to labeled icons (icon and text) in the distance.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DEFAULT_TEXT_DISTANCE_SCALE = 0.5"
            }
          ],
          "releaseTag": "Public",
          "name": "DEFAULT_TEXT_DISTANCE_SCALE",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-mapview!DEPTH_PRE_PASS_STENCIL_MASK:var",
          "docComment": "/**\n * Bitmask used for the depth pre-pass to prevent multiple fragments in the same screen position from rendering color.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "DEPTH_PRE_PASS_STENCIL_MASK = 1"
            }
          ],
          "releaseTag": "Public",
          "name": "DEPTH_PRE_PASS_STENCIL_MASK",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!DisplacementMap:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DisplacementMap "
            }
          ],
          "releaseTag": "Public",
          "name": "DisplacementMap",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!DisplacementMap#buffer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "buffer: "
                },
                {
                  "kind": "Reference",
                  "text": "Float32Array",
                  "canonicalReference": "!Float32Array:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "buffer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!DisplacementMap#xCountVertices:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "xCountVertices: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "xCountVertices",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!DisplacementMap#yCountVertices:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "yCountVertices: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "yCountVertices",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!ElevationBasedClipPlanesEvaluator:class",
          "docComment": "/**\n * Abstract evaluator class that adds support for elevation constraints.\n *\n * Classes derived from this should implement algorithms that takes into account rendered features height (elevations), such as ground plane is no more flat (or spherical), but contains geometry that should be overlapped by frustum planes.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class ElevationBasedClipPlanesEvaluator implements "
            },
            {
              "kind": "Reference",
              "text": "ClipPlanesEvaluator",
              "canonicalReference": "@here/harp-mapview!ClipPlanesEvaluator:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ElevationBasedClipPlanesEvaluator",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!ElevationBasedClipPlanesEvaluator:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ElevationBasedClipPlanesEvaluator` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(maxElevation: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", minElevation: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "maxElevation",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "minElevation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!ElevationBasedClipPlanesEvaluator#evaluateClipPlanes:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract evaluateClipPlanes(camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "three!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": ", projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ", elevationProvider?: "
                },
                {
                  "kind": "Reference",
                  "text": "ElevationProvider",
                  "canonicalReference": "@here/harp-mapview!ElevationProvider:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ViewRanges",
                  "canonicalReference": "@here/harp-datasource-protocol!ViewRanges:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "elevationProvider",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "evaluateClipPlanes"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!ElevationBasedClipPlanesEvaluator#maxElevation:member",
              "docComment": "/**\n * Get maximum elevation to be covered by camera frustum.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get maxElevation(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset maxElevation(elevation: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "maxElevation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!ElevationBasedClipPlanesEvaluator#minElevation:member",
              "docComment": "/**\n * Get minimum elevation to be covered by camera frustum.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get minElevation(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset minElevation(elevation: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "minElevation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!ElevationProvider:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ElevationProvider "
            }
          ],
          "releaseTag": "Public",
          "name": "ElevationProvider",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ElevationProvider#clearCache:member(1)",
              "docComment": "/**\n * Clears the internal cache.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearCache(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clearCache"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ElevationProvider#getDisplacementMap:member(1)",
              "docComment": "/**\n * Get the displacement map for a given tile key. If the displacement map for the given tileKey is not in the cache a lower level tile will be returned.\n *\n * @param tileKey - The tile to get the displacement map for.\n *\n * @returns Returns the DisplacmentMap for the given tileKey or a lower level tile. Undefined if the tile or no parent is in the cache.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getDisplacementMap(tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TileDisplacementMap",
                  "canonicalReference": "@here/harp-mapview!TileDisplacementMap:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getDisplacementMap"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ElevationProvider#getHeight:member(1)",
              "docComment": "/**\n * Get elevation for a given geo point.\n *\n * @param geoPoint - geo position to query height for.\n *\n * @param level - Optional data level that should be used for getting the elevation. If undefined, the view's visible tile containing the point will be used.\n *\n * @returns The height at geoPoint or undefined if no tile was found that covers the geoPoint.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getHeight(geoPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ", level?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "geoPoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "level",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getHeight"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ElevationProvider#getTilingScheme:member(1)",
              "docComment": "/**\n * @returns the TilingScheme used for the DisplacementMaps returned by [[getDisplacementMap]] or undefined if there is no elevation [[DataSource]] attached to the [[MapView]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTilingScheme(): "
                },
                {
                  "kind": "Reference",
                  "text": "TilingScheme",
                  "canonicalReference": "@here/harp-geoutils!TilingScheme:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getTilingScheme"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ElevationProvider#rayCast:member(1)",
              "docComment": "/**\n * Cast a ray through the given screen position x, y.\n *\n * @param x - The X position in css/client coordinates (without applied display ratio).\n *\n * @param y - The Y position in css/client coordinates (without applied display ratio).\n *\n * @returns World coordinate of the intersection or undefined if no intersection detected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rayCast(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "rayCast"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ElevationProvider#sampleHeight:member(1)",
              "docComment": "/**\n * Samples elevation for a given geo point from the specified displacement map.\n *\n * @param geoPoint - geo position to query height for.\n *\n * @param tileDisplacementMap - Displacement map where the height will be sampled.\n *\n * @returns The height at geoPoint.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sampleHeight(geoPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ", tileDisplacementMap: "
                },
                {
                  "kind": "Reference",
                  "text": "TileDisplacementMap",
                  "canonicalReference": "@here/harp-mapview!TileDisplacementMap:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "geoPoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "tileDisplacementMap",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "sampleHeight"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!ElevationRange:interface",
          "docComment": "/**\n * Elevation range with an optional calculation status.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ElevationRange "
            }
          ],
          "releaseTag": "Public",
          "name": "ElevationRange",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ElevationRange#calculationStatus:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "calculationStatus?: "
                },
                {
                  "kind": "Reference",
                  "text": "CalculationStatus",
                  "canonicalReference": "@here/harp-mapview!CalculationStatus:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "calculationStatus",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ElevationRange#maxElevation:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxElevation: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxElevation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ElevationRange#minElevation:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minElevation: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minElevation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!ElevationRangeSource:interface",
          "docComment": "/**\n * Source for elevation ranges per tile. The returned elevation ranges will be used in the visible tile computation to calculate proper bounding boxes.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ElevationRangeSource "
            }
          ],
          "releaseTag": "Public",
          "name": "ElevationRangeSource",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ElevationRangeSource#connect:member(1)",
              "docComment": "/**\n * Connects to the underlying data.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "connect(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "connect"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ElevationRangeSource#getElevationRange:member(1)",
              "docComment": "/**\n * Compute the elevation range for a given [[TileKey]].\n *\n * @param tileKey - The tile for which the elevation range should be computed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getElevationRange(tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ElevationRange",
                  "canonicalReference": "@here/harp-mapview!ElevationRange:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getElevationRange"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ElevationRangeSource#getTilingScheme:member(1)",
              "docComment": "/**\n * The tiling scheme of this [[ElevationRangeSource]]. [[MapView]] will only apply the elevation ranges returned by [[getElevationRange]] that have the same [[TilingScheme]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTilingScheme(): "
                },
                {
                  "kind": "Reference",
                  "text": "TilingScheme",
                  "canonicalReference": "@here/harp-geoutils!TilingScheme:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getTilingScheme"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ElevationRangeSource#ready:member(1)",
              "docComment": "/**\n * Returns `true` if this `ElevationRangeSource` is ready and the [[MapView]] can invoke `getElevationRange()` to start requesting data.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ready(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "ready"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-mapview!evaluateBaseColorProperty:function(1)",
          "docComment": "/**\n * Allows to easy parse/encode technique's base color property value as number coded color.\n *\n * Function takes care about property parsing, interpolation and encoding if neccessary.\n *\n * @see ColorUtils\n *\n * @param technique - the technique where we search for base (transparency) color value\n *\n * @param env - [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n *\n * @returns [[number]] encoded color value (in custom #TTRRGGBB) format or `undefined` if base color property is not defined in the technique passed.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function evaluateBaseColorProperty(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": ", env: "
            },
            {
              "kind": "Reference",
              "text": "Env",
              "canonicalReference": "@here/harp-datasource-protocol!Env:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "env",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "evaluateBaseColorProperty"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-mapview!evaluateColorProperty:function(1)",
          "docComment": "/**\n * Calculates the numerical value of the technique defined color property.\n *\n * Function takes care about color interpolation (when\n *\n * @param  - `env is set) as also parsing string encoded colors.\n *\n * @note Use with care, because function does not recognize property type.\n *\n * @param value - the value of color property defined in technique\n *\n * @param env - [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function evaluateColorProperty(value: "
            },
            {
              "kind": "Reference",
              "text": "Value",
              "canonicalReference": "@here/harp-datasource-protocol!Value:type"
            },
            {
              "kind": "Content",
              "text": ", env?: "
            },
            {
              "kind": "Reference",
              "text": "Env",
              "canonicalReference": "@here/harp-datasource-protocol!Env:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "env",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "evaluateColorProperty"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-mapview!ExtendedMesh:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ExtendedMesh = "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "Mesh",
              "canonicalReference": "three!Mesh:class"
            },
            {
              "kind": "Content",
              "text": " & {\n    displacement?: THREE."
            },
            {
              "kind": "Reference",
              "text": "Vector3",
              "canonicalReference": "three!Vector3:class"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ExtendedMesh",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-mapview!FALLBACK_RENDER_ORDER_OFFSET:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "FALLBACK_RENDER_ORDER_OFFSET = 20000"
            }
          ],
          "releaseTag": "Public",
          "name": "FALLBACK_RENDER_ORDER_OFFSET",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!FixedClipPlanesEvaluator:class",
          "docComment": "/**\n * Provides the most basic evaluation concept giving fixed values with some constraints.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class FixedClipPlanesEvaluator implements "
            },
            {
              "kind": "Reference",
              "text": "ClipPlanesEvaluator",
              "canonicalReference": "@here/harp-mapview!ClipPlanesEvaluator:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "FixedClipPlanesEvaluator",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!FixedClipPlanesEvaluator:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `FixedClipPlanesEvaluator` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(minNear?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", minFarOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "minNear",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "minFarOffset",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!FixedClipPlanesEvaluator#evaluateClipPlanes:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "evaluateClipPlanes(camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "three!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": ", projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ", elevationProvider?: "
                },
                {
                  "kind": "Reference",
                  "text": "ElevationProvider",
                  "canonicalReference": "@here/harp-mapview!ElevationProvider:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ViewRanges",
                  "canonicalReference": "@here/harp-datasource-protocol!ViewRanges:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "elevationProvider",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "evaluateClipPlanes"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!FixedClipPlanesEvaluator#farPlane:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get farPlane(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset farPlane(fixedFar: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "farPlane",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!FixedClipPlanesEvaluator#maxElevation:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get maxElevation(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset maxElevation(elevation: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "maxElevation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!FixedClipPlanesEvaluator#minElevation:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get minElevation(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset minElevation(elevation: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "minElevation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!FixedClipPlanesEvaluator#minFar:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly minFar: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minFar",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!FixedClipPlanesEvaluator#minFarOffset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly minFarOffset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minFarOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!FixedClipPlanesEvaluator#minNear:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly minNear: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minNear",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!FixedClipPlanesEvaluator#nearPlane:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get nearPlane(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset nearPlane(fixedNear: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "nearPlane",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!FovCalculation:interface",
          "docComment": "/**\n * Specifies how the FOV (Field of View) should be calculated.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FovCalculation "
            }
          ],
          "releaseTag": "Public",
          "name": "FovCalculation",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!FovCalculation#fov:member",
              "docComment": "/**\n * If [[type]] is `fixed` then the supplied [[fov]] is fixed regardless of [[viewportHeight]] or [[viewportWidth]].\n *\n * If [[type]] is `dynamic` then the supplied [[fov]] is applied to the first frame, and the focal length calculated. Changes to the viewport height no longer shrink the content because the field of view is updated dynamically.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fov: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fov",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!FovCalculation#type:member",
              "docComment": "/**\n * How to interpret the [[fov]], can be either `fixed` or `dynamic`.\n *\n * `fixed` means that the FOV is fixed regardless of the [[viewportHeight]], such that shrinking the height causes the map to shrink to keep the content in view. The benefit is that, regardless of any resizes, the field of view is constant, which means there is no change in the distortion of buildings near the edges. However the trade off is that the zoom level changes, which means that the map will pull in new tiles, hence causing some flickering.\n *\n * `dynamic` means that the focal length is calculated based on the supplied [[fov]] and [[viewportHeight]], this means that the map doesn't scale (the image is essentially cropped but not shrunk) when the [[viewportHeight]] or [[viewportWidth]] is changed. The benefit is that the zoom level is (currently) stable during resize, because the focal length is used, however the tradeoff is that changing from a small to a big height will cause the fov to change a lot, and thus introduce distortion.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "\"fixed\" | \"dynamic\""
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!FrameStats:class",
          "docComment": "/**\n * Class containing all counters, timers and events of the current frame.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class FrameStats "
            }
          ],
          "releaseTag": "Public",
          "name": "FrameStats",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!FrameStats#addMessage:member(1)",
              "docComment": "/**\n * Add a text message to the frame, like \"Font XYZ has been loaded\"\n *\n * @param message - The message to add.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addMessage(message: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addMessage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!FrameStats#addValue:member(1)",
              "docComment": "/**\n * Add a value to the current value of the performance number. If the performance is not known, it will be initialized with `value`.\n *\n * @param name - Name of the performance number.\n *\n * @param name - Value to be added to the performance number.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addValue(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "addValue"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!FrameStats#entries:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly entries: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "entries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!FrameStats#getValue:member(1)",
              "docComment": "/**\n * Retrieve the value of the performance number.\n *\n * @param name - Name of the performance number.\n *\n * @returns The value of the performance number or `undefined` if it has not been declared by `setValue` before.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getValue(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getValue"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!FrameStats#messages:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "messages?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "messages",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!FrameStats#reset:member(1)",
              "docComment": "/**\n * Reset all known performance values to `0` and the messages to `undefined`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reset(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "reset"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!FrameStats#setValue:member(1)",
              "docComment": "/**\n * Set the value of the performance number.\n *\n * @param name - Name of the performance number.\n *\n * @param name - New value of the performance number.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setValue(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setValue"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!FrameStatsArray:class",
          "docComment": "/**\n * @ignore Only exported for testing.\n *\n * Instead of passing around an array of objects, we store the frame statistics as an object of arrays. This allows convenient computations from [[RingBuffer]],\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class FrameStatsArray "
            }
          ],
          "releaseTag": "Public",
          "name": "FrameStatsArray",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!FrameStatsArray:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `FrameStatsArray` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(capacity?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "capacity",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!FrameStatsArray#addFrame:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addFrame(frameStats: "
                },
                {
                  "kind": "Reference",
                  "text": "FrameStats",
                  "canonicalReference": "@here/harp-mapview!FrameStats:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "frameStats",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addFrame"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!FrameStatsArray#capacity:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly capacity: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "capacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!FrameStatsArray#frameEntries:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly frameEntries: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "RingBuffer",
                  "canonicalReference": "@here/harp-mapview!RingBuffer:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "frameEntries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!FrameStatsArray#length:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get length(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "length",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!FrameStatsArray#log:member(1)",
              "docComment": "/**\n * Prints all values to the console.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "log(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "log"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!FrameStatsArray#messages:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly messages: "
                },
                {
                  "kind": "Reference",
                  "text": "RingBuffer",
                  "canonicalReference": "@here/harp-mapview!RingBuffer:class"
                },
                {
                  "kind": "Content",
                  "text": "<string[] | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "messages",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!FrameStatsArray#reset:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reset(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "reset"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-mapview!getBufferAttribute:function(1)",
          "docComment": "/**\n * Returns a [[THREE.BufferAttribute]] created from a provided [[BufferAttribute]] object.\n *\n * @param attribute - BufferAttribute a WebGL compliant buffer\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getBufferAttribute(attribute: "
            },
            {
              "kind": "Reference",
              "text": "BufferAttribute",
              "canonicalReference": "@here/harp-datasource-protocol!BufferAttribute:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "BufferAttribute",
              "canonicalReference": "three!BufferAttribute:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "attribute",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "getBufferAttribute"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-mapview!getFeatureDataSize:function(1)",
          "docComment": "/**\n * Compute the memory footprint of `TileFeatureData`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getFeatureDataSize(featureData: "
            },
            {
              "kind": "Reference",
              "text": "TileFeatureData",
              "canonicalReference": "@here/harp-mapview!TileFeatureData:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "featureData",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "getFeatureDataSize"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-mapview!getMaterialConstructor:function(1)",
          "docComment": "/**\n * Returns a [[MaterialConstructor]] basing on provided technique object.\n *\n * @param technique - [[Technique]] object which the material will be based on.\n *\n * @param shadowsEnabled - Whether the material can accept shadows, this is required for some techniques to decide which material to create.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getMaterialConstructor(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": ", shadowsEnabled: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "MaterialConstructor",
              "canonicalReference": "@here/harp-mapview!MaterialConstructor:type"
            },
            {
              "kind": "Content",
              "text": " | undefined"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "shadowsEnabled",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "getMaterialConstructor"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!IGeometryAccessor:interface",
          "docComment": "/**\n * Basic interface for geometry accessors.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IGeometryAccessor "
            }
          ],
          "releaseTag": "Public",
          "name": "IGeometryAccessor",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!IGeometryAccessor#getCount:member(1)",
              "docComment": "/**\n * Get the number of primitives (vertices of triangles).\n *\n * @returns Number of primitives.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCount(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getCount"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!IGeometryAccessor#setRange:member(1)",
              "docComment": "/**\n * Set range of primitives in this object related to one or more buffers.\n *\n * @param start - Start index in buffers.\n *\n * @param end - End index in buffers (+1).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setRange(start: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", end: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setRange"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!ILineAccessor:interface",
          "docComment": "/**\n * Interface to access lines. Allows read access for some important attributes.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ILineAccessor "
            }
          ],
          "releaseTag": "Public",
          "name": "ILineAccessor",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ILineAccessor#clear:member(1)",
              "docComment": "/**\n * Clear the object from the mesh.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clear"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ILineAccessor#color:member",
              "docComment": "/**\n * Get the color from materials.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Color",
                  "canonicalReference": "three!Color:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined | "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Color",
                  "canonicalReference": "three!Color:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ILineAccessor#geometryType:member",
              "docComment": "/**\n * Hint for the original type of geometry.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "geometryType: "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryType",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "geometryType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ILineAccessor#getVertices:member(1)",
              "docComment": "/**\n * Get vertices from the object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getVertices(): "
                },
                {
                  "kind": "Reference",
                  "text": "Float32Array",
                  "canonicalReference": "!Float32Array:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getVertices"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ILineAccessor#isLineAccessor:member(1)",
              "docComment": "/**\n * Helper for function `isLineAccessor`.\n *\n * @returns `true` if it is a line accessor.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isLineAccessor(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isLineAccessor"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ILineAccessor#renderOrder:member",
              "docComment": "/**\n * Render order.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderOrder: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderOrder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ILineAccessor#width:member",
              "docComment": "/**\n * Get the width. May have to be reconstructed from triangulated line mesh.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!ImageCache:class",
          "docComment": "/**\n * `ImageCache` is a singleton, so it can be used with multiple MapViews on a single page. This allows to have an image loaded only once for multiple views. THREE is doing something similar, but does not allow to share images that have been loaded from a canvas (which we may need to do if we use SVG images for textures).\n *\n * One application that makes our own cache necessary is the generation of our own textures from data that is not an URL.\n *\n * The `ImageCache` can be improved by adding satistics for memory footprint as well.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ImageCache "
            }
          ],
          "releaseTag": "Public",
          "name": "ImageCache",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!ImageCache#addImage:member(1)",
              "docComment": "/**\n * Add an image definition, and optionally start loading the content.\n *\n * @param mapView - [[MapView]] requesting the image.\n *\n * @param url - URL of image.\n *\n * @param startLoading - Optional flag. If `true` the image will be loaded in the background.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addImage(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ", url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", startLoading?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ImageItem",
                  "canonicalReference": "@here/harp-mapview!ImageItem:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ImageItem",
                  "canonicalReference": "@here/harp-mapview!ImageItem:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "startLoading",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "addImage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!ImageCache#clear:member(1)",
              "docComment": "/**\n * Clear all [[ImageItem]]s belonging to a [[MapView]]. May remove cached items if no [[MapView]] are registered anymore.\n *\n * @param mapView - MapView to remove all [[ImageItem]]s from.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "clear"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!ImageCache#clearAll:member(1)",
              "docComment": "/**\n * Clear all [[ImageItem]]s from all [[MapView]]s.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearAll(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clearAll"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!ImageCache.dispose:member(1)",
              "docComment": "/**\n * Dispose the singleton object. Not normally implemented for singletons, but good for debugging.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static dispose(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "dispose"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!ImageCache#findImage:member(1)",
              "docComment": "/**\n * Find [[ImageItem]] for the specified URL.\n *\n * @param url - URL of image.\n *\n * @returns `ImageItem` for the URL if the URL is registered, `undefined` otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "findImage(url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ImageItem",
                  "canonicalReference": "@here/harp-mapview!ImageItem:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "findImage"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!ImageCache.instance:member",
              "docComment": "/**\n * Returns the singleton `instance` of the `ImageCache`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static get instance(): "
                },
                {
                  "kind": "Reference",
                  "text": "ImageCache",
                  "canonicalReference": "@here/harp-mapview!ImageCache:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "instance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!ImageCache#loadImage:member(1)",
              "docComment": "/**\n * Load an [[ImageItem]]. If the loading process is already running, it returns the current promise.\n *\n * @param imageItem - `ImageItem` containing the URL to load image from.\n *\n * @returns An [[ImageItem]] if the image has already been loaded, a promise otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadImage(imageItem: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageItem",
                  "canonicalReference": "@here/harp-mapview!ImageItem:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ImageItem",
                  "canonicalReference": "@here/harp-mapview!ImageItem:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ImageItem",
                  "canonicalReference": "@here/harp-mapview!ImageItem:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "imageItem",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "loadImage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!ImageCache#registerImage:member(1)",
              "docComment": "/**\n * Add an image definition to the global cache. Useful when the image data is already loaded.\n *\n * @param mapView - Specifiy which [[MapView]] requests the image.\n *\n * @param url - URL of image.\n *\n * @param imageData - Optional [ImageData]] containing the image content.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "registerImage(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ", url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", imageData: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageData",
                  "canonicalReference": "!ImageData:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ImageBitmap",
                  "canonicalReference": "!ImageBitmap:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ImageItem",
                  "canonicalReference": "@here/harp-mapview!ImageItem:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "imageData",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  }
                }
              ],
              "name": "registerImage"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!ImageCache#size:member",
              "docComment": "/**\n * Returns the number of all cached [[ImageItem]]s.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get size(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!ImageItem:interface",
          "docComment": "/**\n * `ImageItem` is used to identify an image in the [[ImageCache]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ImageItem "
            }
          ],
          "releaseTag": "Public",
          "name": "ImageItem",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ImageItem#imageData:member",
              "docComment": "/**\n * Pixel data.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageData?: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageData",
                  "canonicalReference": "!ImageData:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ImageBitmap",
                  "canonicalReference": "!ImageBitmap:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ImageItem#loaded:member",
              "docComment": "/**\n * Turns to `true` when the data has finished loading.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loaded: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "loaded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ImageItem#loadingPromise:member",
              "docComment": "/**\n * `loadingPromise` is only used during loading/generating the image.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadingPromise?: "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ImageItem",
                  "canonicalReference": "@here/harp-mapview!ImageItem:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "loadingPromise",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ImageItem#mipMaps:member",
              "docComment": "/**\n * Mip maps for image data\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mipMaps?: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageData",
                  "canonicalReference": "!ImageData:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mipMaps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ImageItem#url:member",
              "docComment": "/**\n * URL of the image, or unique identifier.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@here/harp-mapview!ImageItem:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace ImageItem "
            }
          ],
          "releaseTag": "Public",
          "name": "ImageItem",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!ImageItem.isLoading:function(1)",
              "docComment": "/**\n * Missing Typedoc\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function isLoading(imageItem: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageItem",
                  "canonicalReference": "@here/harp-mapview!ImageItem:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "imageItem",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isLoading"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!ImageOptions:interface",
          "docComment": "/**\n * Available rendering parameters for the POIs.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ImageOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "ImageOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ImageOptions#flipH:member",
              "docComment": "/**\n * Missing Typedoc\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flipH?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "flipH",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ImageOptions#flipV:member",
              "docComment": "/**\n * Missing Typedoc\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flipV?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "flipV",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ImageOptions#height:member",
              "docComment": "/**\n * Missing Typedoc\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "height",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ImageOptions#opacity:member",
              "docComment": "/**\n * Missing Typedoc\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "opacity?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "opacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ImageOptions#origin:member",
              "docComment": "/**\n * The point of origin of the texture as supported in [[ImageOrigin]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "origin?: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageOrigin",
                  "canonicalReference": "@here/harp-mapview!ImageOrigin:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "origin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ImageOptions#width:member",
              "docComment": "/**\n * Missing Typedoc\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ImageOptions#xOffset:member",
              "docComment": "/**\n * Missing Typedoc\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "xOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "xOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ImageOptions#yOffset:member",
              "docComment": "/**\n * Missing Typedoc\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "yOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "yOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@here/harp-mapview!ImageOrigin:enum",
          "docComment": "/**\n * This enum defines the possible origin points for an image.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ImageOrigin "
            }
          ],
          "releaseTag": "Public",
          "name": "ImageOrigin",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!ImageOrigin.BottomLeft:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BottomLeft = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "BottomLeft",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!ImageOrigin.TopLeft:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "TopLeft = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "TopLeft",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!IMapAntialiasSettings:interface",
          "docComment": "/**\n * Interface for the antialias settings passed when instantiating a [[MapView]], and transferred to the [[MapRenderingManager]] instance. These parameters can be changed at runtime as opposed to the native WebGL antialiasing.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IMapAntialiasSettings "
            }
          ],
          "releaseTag": "Public",
          "name": "IMapAntialiasSettings",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!IMapAntialiasSettings#dynamicMsaaSamplingLevel:member",
              "docComment": "/**\n * The sampling level to use for MSAA during continuous rendering.\n *\n * @default `MSAASampling.Level_1`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dynamicMsaaSamplingLevel?: "
                },
                {
                  "kind": "Reference",
                  "text": "MSAASampling",
                  "canonicalReference": "@here/harp-mapview!MSAASampling:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dynamicMsaaSamplingLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!IMapAntialiasSettings#msaaEnabled:member",
              "docComment": "/**\n * Whether the MSAA is enabled or not.\n *\n * @default `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "msaaEnabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "msaaEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!IMapAntialiasSettings#staticMsaaSamplingLevel:member",
              "docComment": "/**\n * The sampling level to use for MSAA when the rendering stops.\n *\n * @default `MSAASampling.Level_4`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "staticMsaaSamplingLevel?: "
                },
                {
                  "kind": "Reference",
                  "text": "MSAASampling",
                  "canonicalReference": "@here/harp-mapview!MSAASampling:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "staticMsaaSamplingLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!IMapRenderingManager:interface",
          "docComment": "/**\n * The `MapRenderingManager` class manages the map rendering (as opposed to text) by dispatching the [[MapRenderingManager.render]] call to a set of internal [[Pass]] instances. It provides an API to modify some of the rendering processes like the antialiasing behaviour at runtime.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IMapRenderingManager extends "
            },
            {
              "kind": "Reference",
              "text": "IPassManager",
              "canonicalReference": "@here/harp-mapview!IPassManager:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IMapRenderingManager",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!IMapRenderingManager#bloom:member",
              "docComment": "/**\n * Bloom effect parameters.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bloom: "
                },
                {
                  "kind": "Reference",
                  "text": "IBloomEffect",
                  "canonicalReference": "@here/harp-datasource-protocol!IBloomEffect:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bloom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!IMapRenderingManager#dynamicMsaaSamplingLevel:member",
              "docComment": "/**\n * The level of MSAA sampling while the user interacts. It should be a low level so that the MSAA does not impact the framerate.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dynamicMsaaSamplingLevel: "
                },
                {
                  "kind": "Reference",
                  "text": "MSAASampling",
                  "canonicalReference": "@here/harp-mapview!MSAASampling:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dynamicMsaaSamplingLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!IMapRenderingManager#lowResPixelRatio:member",
              "docComment": "/**\n * Set a `pixelRatio` for dynamic rendering (i.e. during animations). If a value is specified, the `LowResRenderPass` will be employed to used to render the scene into a lower resolution render target, which will then be rendered to the screen.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lowResPixelRatio?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lowResPixelRatio",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!IMapRenderingManager#msaaEnabled:member",
              "docComment": "/**\n * Enable or disable the MSAA. If disabled, `MapRenderingManager` will use the renderer provided in the [[MapRenderingManager.render]] method to render the scene.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "msaaEnabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "msaaEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!IMapRenderingManager#outline:member",
              "docComment": "/**\n * Outline effect parameters.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "outline: "
                },
                {
                  "kind": "Reference",
                  "text": "IOutlineEffect",
                  "canonicalReference": "@here/harp-datasource-protocol!IOutlineEffect:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "outline",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!IMapRenderingManager#render:member(1)",
              "docComment": "/**\n * The method to call to render the map. This method depends on an `isStaticFrame` boolean that notifies the pass manager to switch to a higher level render quality for the last frame.\n *\n * @param renderer - The ThreeJS WebGLRenderer instance to render the map with.\n *\n * @param isStaticFrame - Whether the frame to render is static or dynamic. Selects level of antialiasing.\n *\n * @param time - Optional time argument provided by the requestAnimationFrame, to pass to sub-passes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(renderer: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "WebGLRenderer",
                  "canonicalReference": "three!WebGLRenderer:class"
                },
                {
                  "kind": "Content",
                  "text": ", scene: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Scene",
                  "canonicalReference": "three!Scene:class"
                },
                {
                  "kind": "Content",
                  "text": ", camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "PerspectiveCamera",
                  "canonicalReference": "three!PerspectiveCamera:class"
                },
                {
                  "kind": "Content",
                  "text": " | THREE."
                },
                {
                  "kind": "Reference",
                  "text": "OrthographicCamera",
                  "canonicalReference": "three!OrthographicCamera:class"
                },
                {
                  "kind": "Content",
                  "text": ", isStaticFrame: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ", time?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 16,
                "endIndex": 17
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "renderer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "scene",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 11
                  }
                },
                {
                  "parameterName": "isStaticFrame",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                },
                {
                  "parameterName": "time",
                  "parameterTypeTokenRange": {
                    "startIndex": 14,
                    "endIndex": 15
                  }
                }
              ],
              "name": "render"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!IMapRenderingManager#sepia:member",
              "docComment": "/**\n * Sepia effect parameters.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sepia: "
                },
                {
                  "kind": "Reference",
                  "text": "ISepiaEffect",
                  "canonicalReference": "@here/harp-datasource-protocol!ISepiaEffect:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sepia",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!IMapRenderingManager#staticMsaaSamplingLevel:member",
              "docComment": "/**\n * The higher level of MSAA sampling for a last frame to render, when the camera is static. It can be a high level, providing high quality renders requiring few tens of seconds, since no frame is expected to immediately follow in the requestAnimationFrame. It is still limited by zooming, since zooming is not requestAnimationFrame-based and can lead to stuttering if the render time is too long, except on desktop Mac, where mouse interaction already implements some damping. Higher levels of sampling may lead to noticeable color banding, visible in areas with a slight color gradient, like large areas or the sky background.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "staticMsaaSamplingLevel: "
                },
                {
                  "kind": "Reference",
                  "text": "MSAASampling",
                  "canonicalReference": "@here/harp-mapview!MSAASampling:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "staticMsaaSamplingLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!IMapRenderingManager#updateOutline:member(1)",
              "docComment": "/**\n * Updating the outline rebuilds the outline materials of every outlined mesh.\n *\n * @param options - outline options from the [[Theme]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateOutline(options: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        thickness: number;\n        color: string;\n        ghostExtrudedPolygons: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "updateOutline"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!IMapRenderingManager#vignette:member",
              "docComment": "/**\n * Vignette effect parameters.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "vignette: "
                },
                {
                  "kind": "Reference",
                  "text": "IVignetteEffect",
                  "canonicalReference": "@here/harp-datasource-protocol!IVignetteEffect:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "vignette",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!IndexedBufferedGeometryAccessor:class",
          "docComment": "/**\n * Abstract base class of indexed geometry.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class IndexedBufferedGeometryAccessor extends "
            },
            {
              "kind": "Reference",
              "text": "BufferedGeometryAccessorBase",
              "canonicalReference": "@here/harp-mapview!BufferedGeometryAccessorBase:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IndexedBufferedGeometryAccessor",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!IndexedBufferedGeometryAccessor:constructor(1)",
              "docComment": "/**\n * Creates an abstract class `IndexedBufferedGeometryAccessor`.\n *\n * @param object - mesh to be used\n *\n * @param geometryType - type of geometry\n *\n * @param bufferGeometry - geometry used\n *\n * @param start - \n *\n * @param end - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(object: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "three!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": ", geometryType: "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryType",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryType:enum"
                },
                {
                  "kind": "Content",
                  "text": ", bufferGeometry: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "BufferGeometry",
                  "canonicalReference": "three!BufferGeometry:class"
                },
                {
                  "kind": "Content",
                  "text": ", start?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", end?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "geometryType",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "bufferGeometry",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "start",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                },
                {
                  "parameterName": "end",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!IndexedBufferedGeometryAccessor#bufferGeometry:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readonly bufferGeometry: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "BufferGeometry",
                  "canonicalReference": "three!BufferGeometry:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bufferGeometry",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!IndexedBufferedGeometryAccessor#checkSetUp:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected checkSetUp(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "checkSetUp"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!IndexedBufferedGeometryAccessor#geometryType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly geometryType: "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryType",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "geometryType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!IndexedBufferedGeometryAccessor#getCount:member(1)",
              "docComment": "/**\n * Returns number of primitives, which is not known in this base class, so we return the number of indices.\n *\n * @returns The number of indices in the geometry.\n *\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCount(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getCount"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!IndexedBufferedGeometryAccessor#indices:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "indices: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "indices",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!IndexedBufferedGeometryAccessor#object:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly object: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "three!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "object",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!IndexedBufferedGeometryLineAccessor:class",
          "docComment": "/**\n * Accessor for lines in an indexed geometry.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class IndexedBufferedGeometryLineAccessor extends "
            },
            {
              "kind": "Reference",
              "text": "IndexedBufferedGeometryAccessor",
              "canonicalReference": "@here/harp-mapview!IndexedBufferedGeometryAccessor:class"
            },
            {
              "kind": "Content",
              "text": " "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "ILineAccessor",
              "canonicalReference": "@here/harp-mapview!ILineAccessor:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IndexedBufferedGeometryLineAccessor",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!IndexedBufferedGeometryLineAccessor:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `IndexedBufferedGeometryLineAccessor` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(object: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "three!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": ", geometryType: "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryType",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryType:enum"
                },
                {
                  "kind": "Content",
                  "text": ", bufferGeometry: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "BufferGeometry",
                  "canonicalReference": "three!BufferGeometry:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "geometryType",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "bufferGeometry",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!IndexedBufferedGeometryLineAccessor#bufferGeometry:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly bufferGeometry: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "BufferGeometry",
                  "canonicalReference": "three!BufferGeometry:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bufferGeometry",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!IndexedBufferedGeometryLineAccessor#clear:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clear"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!IndexedBufferedGeometryLineAccessor#geometryType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly geometryType: "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryType",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "geometryType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!IndexedBufferedGeometryLineAccessor#getVertices:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getVertices(): "
                },
                {
                  "kind": "Reference",
                  "text": "Float32Array",
                  "canonicalReference": "!Float32Array:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getVertices"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!IndexedBufferedGeometryLineAccessor#isLineAccessor:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isLineAccessor(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isLineAccessor"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!IndexedBufferedGeometryLineAccessor#object:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly object: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "three!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "object",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!IndexedBufferedGeometryLineAccessor#width:member",
              "docComment": "/**\n * Reconstructs line width from triangulated geometry.\n *\n * @returns Line width.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get width(): "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "width",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": [
            {
              "startIndex": 4,
              "endIndex": 6
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!InterpolatedClipPlanesEvaluator:class",
          "docComment": "/**\n * Simplest camera clip planes evaluator, interpolates near/far planes based on ground distance.\n *\n * At general ground distance to camera along the surface normal is used as reference point for planes evaluation, where near plane distance is set as fraction of this distance refereed as [[nearMultiplier]]. Far plane equation has its own multiplier - [[nearFarMultiplier]], which is applied to near plane and offset giving finally far plane distance. This evaluator supports both planar and spherical projections, although it's behavior is slightly different in each case. General algorithm sets near plane between camera and ground level, while far plane is just calculated using scale and bias approach with far offset and multiplier.\n *\n * @deprecated\n *\n * Class contains the legacy (first and original) clip planes evaluation method, which is widely used in examples thus is still kept for backward compatibility and comparisons.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class InterpolatedClipPlanesEvaluator implements "
            },
            {
              "kind": "Reference",
              "text": "ClipPlanesEvaluator",
              "canonicalReference": "@here/harp-mapview!ClipPlanesEvaluator:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "InterpolatedClipPlanesEvaluator",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!InterpolatedClipPlanesEvaluator:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `InterpolatedClipPlanesEvaluator` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(nearMin?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", nearMultiplier?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", nearFarMultiplier?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", farOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "nearMin",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "nearMultiplier",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "nearFarMultiplier",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "farOffset",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!InterpolatedClipPlanesEvaluator#evaluateClipPlanes:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "evaluateClipPlanes(camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "three!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": ", projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ", elevationProvider?: "
                },
                {
                  "kind": "Reference",
                  "text": "ElevationProvider",
                  "canonicalReference": "@here/harp-mapview!ElevationProvider:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ViewRanges",
                  "canonicalReference": "@here/harp-datasource-protocol!ViewRanges:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "elevationProvider",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "evaluateClipPlanes"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!InterpolatedClipPlanesEvaluator#farMin:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly farMin: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "farMin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!InterpolatedClipPlanesEvaluator#farOffset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly farOffset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "farOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!InterpolatedClipPlanesEvaluator#m_tmpQuaternion:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected m_tmpQuaternion: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "three!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "m_tmpQuaternion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!InterpolatedClipPlanesEvaluator#m_tmpVectors:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected m_tmpVectors: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "m_tmpVectors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!InterpolatedClipPlanesEvaluator#maxElevation:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get maxElevation(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset maxElevation(elevation: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "maxElevation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!InterpolatedClipPlanesEvaluator#minElevation:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get minElevation(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset minElevation(elevation: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "minElevation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!InterpolatedClipPlanesEvaluator#nearFarMultiplier:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly nearFarMultiplier: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "nearFarMultiplier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!InterpolatedClipPlanesEvaluator#nearMin:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly nearMin: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "nearMin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!InterpolatedClipPlanesEvaluator#nearMultiplier:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly nearMultiplier: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "nearMultiplier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!IObject3dAccessor:interface",
          "docComment": "/**\n * Accessor for unspecified 3D objects, like landmarks.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IObject3dAccessor "
            }
          ],
          "releaseTag": "Public",
          "name": "IObject3dAccessor",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!IObject3dAccessor#clear:member(1)",
              "docComment": "/**\n * Clear the object from the mesh.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clear"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!IObject3dAccessor#color:member",
              "docComment": "/**\n * Get the color from materials.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "color: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Color",
                  "canonicalReference": "three!Color:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined | "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Color",
                  "canonicalReference": "three!Color:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "color",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!IObject3dAccessor#geometryType:member",
              "docComment": "/**\n * Hint for the original type of geometry.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "geometryType: "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryType",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "geometryType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!IObject3dAccessor#getVertices:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getVertices(): "
                },
                {
                  "kind": "Reference",
                  "text": "Float32Array",
                  "canonicalReference": "!Float32Array:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getVertices"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!IObject3dAccessor#isObject3dAccessor:member(1)",
              "docComment": "/**\n * Helper for function `isObject3dAccessor`.\n *\n * @returns `true` if it is a line accessor.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isObject3dAccessor(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isObject3dAccessor"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!IObject3dAccessor#renderOrder:member",
              "docComment": "/**\n * Render order.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderOrder: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderOrder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!IPass:interface",
          "docComment": "/**\n * The interface for the [[Pass]] class.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPass "
            }
          ],
          "releaseTag": "Public",
          "name": "IPass",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!IPass#enabled:member",
              "docComment": "/**\n * Whether the [[Pass]] instance is active or not.  @default `true`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!IPass#render:member(1)",
              "docComment": "/**\n * The render method to extend in [[Pass]] implementations. This is the place where the desired effects or render operations are executed.\n *\n * @param renderer - The WebGLRenderer instance in use.\n *\n * @param scene - The scene to render.\n *\n * @param camera - The camera to render the scene through.\n *\n * @param writeBuffer - The optional WebGLRenderTarget instance to write to.\n *\n * @param readBuffer - The optional WebGLRenderTarget instance of a previous pass to write onto.\n *\n * @param delta - The time argument from the requestAnimationFrame.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(renderer: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "WebGLRenderer",
                  "canonicalReference": "three!WebGLRenderer:class"
                },
                {
                  "kind": "Content",
                  "text": ", scene: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Scene",
                  "canonicalReference": "three!Scene:class"
                },
                {
                  "kind": "Content",
                  "text": ", camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "three!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": ", writeBuffer: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "WebGLRenderTarget",
                  "canonicalReference": "three!WebGLRenderTarget:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ", readBuffer: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "WebGLRenderTarget",
                  "canonicalReference": "three!WebGLRenderTarget:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ", delta?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 20,
                "endIndex": 21
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "renderer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "scene",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "writeBuffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 10,
                    "endIndex": 13
                  }
                },
                {
                  "parameterName": "readBuffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 14,
                    "endIndex": 17
                  }
                },
                {
                  "parameterName": "delta",
                  "parameterTypeTokenRange": {
                    "startIndex": 18,
                    "endIndex": 19
                  }
                }
              ],
              "name": "render"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!IPass#renderToScreen:member",
              "docComment": "/**\n * Whether the render method should target a WebGLRenderTarget instance, or the frame buffer.  @default `false`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderToScreen: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderToScreen",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!IPass#setSize:member(1)",
              "docComment": "/**\n * The resize method to extend in [[Pass]] implementations. It resizes the render targets. Call on resize events.\n *\n * @param width - Width to resize to.\n *\n * @param height - Height to resize to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSize(width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "width",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "height",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setSize"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!IPassManager:interface",
          "docComment": "/**\n * `IPassManager` provides a base interface for [[Pass]] managers like [[MapRenderingManager]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IPassManager "
            }
          ],
          "releaseTag": "Public",
          "name": "IPassManager",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!IPassManager#render:member(1)",
              "docComment": "/**\n * The render method to extend in `IPassManager`'s implementations. This is the place where the desired setups and effect composing and chaining happen.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(renderer: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "WebGLRenderer",
                  "canonicalReference": "three!WebGLRenderer:class"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "renderer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "render"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!IPassManager#setSize:member(1)",
              "docComment": "/**\n * The resize method to extend in [[Pass]] implementations to resize the render targets to match the size of the visible canvas. It should be called on resize events.\n *\n * @param width - Width to resize to.\n *\n * @param height - Height to resize to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSize(width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "width",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "height",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setSize"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-mapview!isLineAccessor:function(1)",
          "docComment": "/**\n * Helper function to check if an accessor is of type `ILineAccessor`.\n *\n * @param arg - `true` if `arg` is `ILineAccessor`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isLineAccessor(arg: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "arg",
              "canonicalReference": "@here/harp-mapview!~arg"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "ILineAccessor",
              "canonicalReference": "@here/harp-mapview!ILineAccessor:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "arg",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isLineAccessor"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-mapview!isObject3dAccessor:function(1)",
          "docComment": "/**\n * Helper function to check if an accessor is of type `IObject3dAccessor`.\n *\n * @param arg - `true` if `arg` is `IObject3dAccessor`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isObject3dAccessor(arg: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "arg",
              "canonicalReference": "@here/harp-mapview!~arg"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "IObject3dAccessor",
              "canonicalReference": "@here/harp-mapview!IObject3dAccessor:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "arg",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isObject3dAccessor"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-mapview!isRenderDepthPrePassEnabled:function(1)",
          "docComment": "/**\n * Check if technique requires (and not disables) use of depth prepass.\n *\n * Depth prepass is enabled if correct opacity is specified (in range `(0,1)`) _and_ not explicitly disabled by `enableDepthPrePass` option.\n *\n * @param technique - [[BaseStandardTechnique]] instance to be checked\n *\n * @param env - [[Env]] instance used to evaluate [[Expr]] based properties of [[Technique]]\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isRenderDepthPrePassEnabled(technique: "
            },
            {
              "kind": "Reference",
              "text": "ExtrudedPolygonTechnique",
              "canonicalReference": "@here/harp-datasource-protocol!ExtrudedPolygonTechnique:interface"
            },
            {
              "kind": "Content",
              "text": ", env: "
            },
            {
              "kind": "Reference",
              "text": "Env",
              "canonicalReference": "@here/harp-datasource-protocol!Env:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "env",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "isRenderDepthPrePassEnabled"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!ITileDataVisitor:interface",
          "docComment": "/**\n * Interface for a client visitor that is used to visit all `THREE.Object`s in a tile.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITileDataVisitor "
            }
          ],
          "releaseTag": "Public",
          "name": "ITileDataVisitor",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ITileDataVisitor#tile:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tile: "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ITileDataVisitor#visitArea:member(1)",
              "docComment": "/**\n * Visit an area object with the specified `featureId`; use `pointAccessor` to get the object's properties.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visitArea(featureId: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "featureId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "visitArea"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ITileDataVisitor#visitLine:member(1)",
              "docComment": "/**\n * Visits a line object with the specified `featureId`; use `pointAccessor` to get the object's properties.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visitLine(featureId: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", lineAccessor: "
                },
                {
                  "kind": "Reference",
                  "text": "ILineAccessor",
                  "canonicalReference": "@here/harp-mapview!ILineAccessor:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "featureId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "lineAccessor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "visitLine"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ITileDataVisitor#visitObject3D:member(1)",
              "docComment": "/**\n * Visits a 3D object with the specified `featureId`; use `pointAccessor` to get the object's properties.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visitObject3D(featureId: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", object3dAccessor: "
                },
                {
                  "kind": "Reference",
                  "text": "IObject3dAccessor",
                  "canonicalReference": "@here/harp-mapview!IObject3dAccessor:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "featureId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "object3dAccessor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "visitObject3D"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ITileDataVisitor#visitPoint:member(1)",
              "docComment": "/**\n * Visits a point object with the specified `featureId`; use `pointAccessor` to get the object's properties.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visitPoint(featureId: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "featureId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "visitPoint"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ITileDataVisitor#wantsArea:member(1)",
              "docComment": "/**\n * Should return `true` if the visitor wants to visit the area object with the specified `featureId`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wantsArea(featureId: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "featureId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "wantsArea"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ITileDataVisitor#wantsFeature:member(1)",
              "docComment": "/**\n * Should return `true` if the visitor wants to visit the object with the specified `featureId`. This function is called before the type of the object is even known.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wantsFeature(featureId: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "featureId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "wantsFeature"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ITileDataVisitor#wantsLine:member(1)",
              "docComment": "/**\n * Should return `true` if the visitor wants to visit the line with the specified `featureId`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wantsLine(featureId: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "featureId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "wantsLine"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ITileDataVisitor#wantsObject3D:member(1)",
              "docComment": "/**\n * Should return `true` if the visitor wants to visit the object with the specified `featureId`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wantsObject3D(featureId: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "featureId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "wantsObject3D"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ITileDataVisitor#wantsPoint:member(1)",
              "docComment": "/**\n * Should return `true` if the visitor wants to visit the point with the specified `featureId`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wantsPoint(featureId: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "featureId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "wantsPoint"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!ITileLoader:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ITileLoader "
            }
          ],
          "releaseTag": "Public",
          "name": "ITileLoader",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ITileLoader#cancel:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cancel(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "cancel"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ITileLoader#decodedTile:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "decodedTile?: "
                },
                {
                  "kind": "Reference",
                  "text": "DecodedTile",
                  "canonicalReference": "@here/harp-datasource-protocol!DecodedTile:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "decodedTile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ITileLoader#isFinished:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isFinished: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isFinished",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ITileLoader#loadAndDecode:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadAndDecode(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TileLoaderState",
                  "canonicalReference": "@here/harp-mapview!TileLoaderState:enum"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "loadAndDecode"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ITileLoader#payload:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "payload?: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayBufferLike",
                  "canonicalReference": "!ArrayBufferLike:type"
                },
                {
                  "kind": "Content",
                  "text": " | {}"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "payload",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ITileLoader#state:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "state: "
                },
                {
                  "kind": "Reference",
                  "text": "TileLoaderState",
                  "canonicalReference": "@here/harp-mapview!TileLoaderState:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "state",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ITileLoader#updatePriority:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updatePriority(area: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "area",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "updatePriority"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!ITileLoader#waitSettled:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitSettled(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TileLoaderState",
                  "canonicalReference": "@here/harp-mapview!TileLoaderState:enum"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "waitSettled"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@here/harp-mapview!LoadingState:enum",
          "docComment": "/**\n * State of loading.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum LoadingState "
            }
          ],
          "releaseTag": "Public",
          "name": "LoadingState",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!LoadingState.Initialized:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Initialized = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "Initialized",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!LoadingState.Loaded:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Loaded = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Loaded",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!LoadingState.Requested:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Requested = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Requested",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!LookAtParams:interface",
          "docComment": "/**\n * Parameters for [[MapView.lookAt]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LookAtParams "
            }
          ],
          "releaseTag": "Public",
          "name": "LookAtParams",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!LookAtParams#bounds:member",
              "docComment": "/**\n * Fit MapView to these boundaries.\n *\n * If specified, `zoomLevel` and `distance` parameters are ignored and `lookAt` calculates best `zoomLevel` to fit given bounds.\n *\n * * if `bounds` is [[GeoBox]], then `lookAt` use [[LookAtParams.target]] or `bounds.target` and ensure whole box is visible\n *\n * * if `bounds` is [[GeoBoxExtentLike]], then `lookAt` will use [[LookAtParams.target]] or current [[MapView.target]] and ensure whole extents are visible\n *\n * * if `bounds` is [[GeoCoordLike]][], then `lookAt` will use [[LookAtParams.target]] or calculated `target` as center of world box covering given points and ensure all points are visible\n *\n * Note in sphere projection some points are not visible if you specify bounds that span more than 180 degreess in any direction.\n *\n * @see [[MapView.lookAt]] for defails how `bounds` interact with `target` parameter\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bounds: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoBox",
                  "canonicalReference": "@here/harp-geoutils!GeoBox:class"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "GeoBoxExtentLike",
                  "canonicalReference": "@here/harp-geoutils!GeoBoxExtentLike:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordLike",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordLike:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bounds",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!LookAtParams#distance:member",
              "docComment": "/**\n * Camera distance to the target point in world units.  @default zoomLevel defaults will be used if not set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "distance: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "distance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!LookAtParams#heading:member",
              "docComment": "/**\n * Heading angle in degrees and clockwise. 0 is north-up.  @default 0 in [[MapView.constructor]] context.  @default [[MapView.heading]] in [[MapView.lookAt]] context.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "heading: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "heading",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!LookAtParams#target:member",
              "docComment": "/**\n * Target/look at point of the MapView.\n *\n * @note If the given point is not on the ground (altitude != 0) [[MapView]] will do a raycasting internally to find a target on the ground.\n *\n * As a consequence [[MapView.target]] and [[MapView.zoomLevel]] will not match the values that were passed into the [[MapView.lookAt]] method.  @default `new GeoCoordinates(25, 0)` in [[MapView.constructor]] context.  @default [[MapView.target]] in [[MapView.lookAt]] context.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "target: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordLike",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordLike:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!LookAtParams#tilt:member",
              "docComment": "/**\n * Tilt angle in degrees. 0 is top down view.  @default 0 in [[MapView.constructor]] context.  @default [[MapView.tilt]] in [[MapView.lookAt]] context.  @note Maximum supported tilt is 89°\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tilt: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tilt",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!LookAtParams#zoomLevel:member",
              "docComment": "/**\n * Zoomlevel of the MapView.  @note Takes precedence over distance.  @default 5 in [[MapView.constructor]] context.  @default [[MapView.zoomLevel]] in [[MapView.lookAt]] context.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "zoomLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "zoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-mapview!MapAnchor:type",
          "docComment": "/**\n * An interface describing [[THREE.Object3D]]s anchored on given [[GeoCoordinates]].\n *\n * Example:\n * ```typescript\n * const mesh: MapAnchor<THREE.Mesh> = new THREE.Mesh(geometry, material);\n * mesh.geoPosition = new GeoCoordinates(latitude, longitude, altitude);\n * mapView.mapAnchors.add(mesh);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MapAnchor<T extends "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "Object3D",
              "canonicalReference": "three!Object3D:class"
            },
            {
              "kind": "Content",
              "text": " "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "Object3D",
              "canonicalReference": "three!Object3D:class"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "T & {\n    geoPosition?: "
            },
            {
              "kind": "Reference",
              "text": "GeoCoordinates",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
            },
            {
              "kind": "Content",
              "text": ";\n    pickable?: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MapAnchor",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 8,
            "endIndex": 11
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!MapRenderingManager:class",
          "docComment": "/**\n * The implementation of [[IMapRenderingManager]] to instantiate in [[MapView]] and manage the map rendering.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class MapRenderingManager implements "
            },
            {
              "kind": "Reference",
              "text": "IMapRenderingManager",
              "canonicalReference": "@here/harp-mapview!IMapRenderingManager:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "MapRenderingManager",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!MapRenderingManager:constructor(1)",
              "docComment": "/**\n * The constructor of `MapRenderingManager`.\n *\n * @param width - Width of the frame buffer.\n *\n * @param height - Height of the frame buffer.\n *\n * @param lowResPixelRatio - The `pixelRatio` determines the resolution of the internal `WebGLRenderTarget`. Values between 0.5 and `window.devicePixelRatio` can be tried to give good results. A value of `undefined` disables the low res render pass. The value should not be larger than`window.devicePixelRatio`.\n *\n * @param antialiasSetting - The object defining the demeanor of MSAA.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", lowResPixelRatio: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", antialiasSettings?: "
                },
                {
                  "kind": "Reference",
                  "text": "IMapAntialiasSettings",
                  "canonicalReference": "@here/harp-mapview!IMapAntialiasSettings:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "width",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "height",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "lowResPixelRatio",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "antialiasSettings",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 9
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapRenderingManager#bloom:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bloom: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        enabled: boolean;\n        strength: number;\n        radius: number;\n        threshold: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bloom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapRenderingManager#dynamicMsaaSamplingLevel:member",
              "docComment": "/**\n * Return the sampling level defined during continuous rendering.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get dynamicMsaaSamplingLevel(): "
                },
                {
                  "kind": "Reference",
                  "text": "MSAASampling",
                  "canonicalReference": "@here/harp-mapview!MSAASampling:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset dynamicMsaaSamplingLevel(samplingLevel: "
                },
                {
                  "kind": "Reference",
                  "text": "MSAASampling",
                  "canonicalReference": "@here/harp-mapview!MSAASampling:enum"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "name": "dynamicMsaaSamplingLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapRenderingManager#lowResPixelRatio:member",
              "docComment": "/**\n * The `lowResPixelRatio` determines the resolution of the internal `WebGLRenderTarget`. Values between 0.5 and `window.devicePixelRatio` can be tried to give good results. A value of `undefined` disables the low res render pass. The value should not be larger than `window.devicePixelRatio`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get lowResPixelRatio(): "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset lowResPixelRatio(pixelRatio: number | undefined);"
                }
              ],
              "releaseTag": "Public",
              "name": "lowResPixelRatio",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapRenderingManager#msaaEnabled:member",
              "docComment": "/**\n * Return whether the MSAA is enabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get msaaEnabled(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset msaaEnabled(value: boolean);"
                }
              ],
              "releaseTag": "Public",
              "name": "msaaEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapRenderingManager#outline:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "outline: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        enabled: boolean;\n        thickness: number;\n        color: string;\n        ghostExtrudedPolygons: boolean;\n        needsUpdate: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "outline",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapRenderingManager#render:member(1)",
              "docComment": "/**\n * The method to call to render the map with the `MapRenderingManager` instance. It contains the chain of sub-passes that can transfer the write and read buffers, and other sheer rendering conditions as disabling AA when a high DPI device is in use.\n *\n * @param renderer - The ThreeJS WebGLRenderer instance to render the map with.\n *\n * @param scene - The ThreeJS Scene instance containing the map objects to render.\n *\n * @param camera - The ThreeJS Camera instance to render the scene through.\n *\n * @param isStaticFrame - Whether the frame to render is static or dynamic. Selects level of antialiasing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(renderer: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "WebGLRenderer",
                  "canonicalReference": "three!WebGLRenderer:class"
                },
                {
                  "kind": "Content",
                  "text": ", scene: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Scene",
                  "canonicalReference": "three!Scene:class"
                },
                {
                  "kind": "Content",
                  "text": ", camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "PerspectiveCamera",
                  "canonicalReference": "three!PerspectiveCamera:class"
                },
                {
                  "kind": "Content",
                  "text": " | THREE."
                },
                {
                  "kind": "Reference",
                  "text": "OrthographicCamera",
                  "canonicalReference": "three!OrthographicCamera:class"
                },
                {
                  "kind": "Content",
                  "text": ", isStaticFrame: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 15
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "renderer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "scene",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 11
                  }
                },
                {
                  "parameterName": "isStaticFrame",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                }
              ],
              "name": "render"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapRenderingManager#sepia:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sepia: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        enabled: boolean;\n        amount: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sepia",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapRenderingManager#setSize:member(1)",
              "docComment": "/**\n * The resize function to call on resize events to resize the render targets. It shall include the resize methods of all the sub-passes used in `MapRenderingManager`.\n *\n * @param width - New width to use.\n *\n * @param height - New height to use.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSize(width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "width",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "height",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setSize"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapRenderingManager#staticMsaaSamplingLevel:member",
              "docComment": "/**\n * Return the sampling level defined for rendering static frames.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get staticMsaaSamplingLevel(): "
                },
                {
                  "kind": "Reference",
                  "text": "MSAASampling",
                  "canonicalReference": "@here/harp-mapview!MSAASampling:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset staticMsaaSamplingLevel(samplingLevel: "
                },
                {
                  "kind": "Reference",
                  "text": "MSAASampling",
                  "canonicalReference": "@here/harp-mapview!MSAASampling:enum"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "name": "staticMsaaSamplingLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapRenderingManager#updateOutline:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateOutline(options: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        thickness: number;\n        color: string;\n        ghostExtrudedPolygons: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "updateOutline"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapRenderingManager#vignette:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "vignette: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        enabled: boolean;\n        offset: number;\n        darkness: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "vignette",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!MapView:class",
          "docComment": "/**\n * The core class of the library to call in order to create a map visualization. It needs to be linked to datasources.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class MapView extends "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "EventDispatcher",
              "canonicalReference": "three!EventDispatcher:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "MapView",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!MapView:constructor(1)",
              "docComment": "/**\n * Constructs a new `MapView` with the given options or canvas element.\n *\n * @param options - The `MapView` options or the HTML canvas element used to display the map.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(options: "
                },
                {
                  "kind": "Reference",
                  "text": "MapViewOptions",
                  "canonicalReference": "@here/harp-mapview!MapViewOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#addDataSource:member(1)",
              "docComment": "/**\n * Adds a new [[DataSource]] to this `MapView`. `MapView` needs at least one [[DataSource]] to display something.\n *\n * @param dataSource - The data source.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addDataSource(dataSource: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSource",
                  "canonicalReference": "@here/harp-mapview!DataSource:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dataSource",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addDataSource"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#addEventListener:member(1)",
              "docComment": "/**\n * Adds an event listener. There are various events that are sent before or after a new frame is rendered.\n *\n * @see [[MapViewEventNames]].\n *\n * @param type - One of the [[MapViewEventNames]] strings.\n *\n * @param listener - The callback invoked when the `MapView` needs to render a new frame.\n *\n * @example\n * ```TypeScript\n * let frameCount = 0;\n * mapView.addEventListener(MapViewEventNames.Render, () => {\n *     ++frameCount;\n * });\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addEventListener(type: "
                },
                {
                  "kind": "Reference",
                  "text": "MapViewEventNames",
                  "canonicalReference": "@here/harp-mapview!MapViewEventNames:enum"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(event: "
                },
                {
                  "kind": "Reference",
                  "text": "RenderEvent",
                  "canonicalReference": "@here/harp-mapview!RenderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "addEventListener"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#addOverlayText:member(1)",
              "docComment": "/**\n * Adds new overlay text elements to this `MapView`.\n *\n * @param textElements - Array of [[TextElement]] to be added.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addOverlayText(textElements: "
                },
                {
                  "kind": "Reference",
                  "text": "TextElement",
                  "canonicalReference": "@here/harp-mapview!TextElement:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "textElements",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "addOverlayText"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#animatedExtrusionHandler:member",
              "docComment": "/**\n * The [[AnimatedExtrusionHandler]] controls animated extrusion effect of the extruded objects in the [[Tile]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get animatedExtrusionHandler(): "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedExtrusionHandler",
                  "canonicalReference": "@here/harp-mapview!AnimatedExtrusionHandler:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "animatedExtrusionHandler",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#animating:member",
              "docComment": "/**\n * Returns `true` if this `MapView` is constantly redrawing the scene.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get animating(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "animating",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#beginAnimation:member(1)",
              "docComment": "/**\n * Begin animating the scene.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beginAnimation(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "beginAnimation"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#camera:member",
              "docComment": "/**\n * The THREE.js camera used by this `MapView` to render the main scene.  @note When modifying the camera all derived properties like: - [[MapView.target]] - [[MapView.zoomLevel]] - [[MapView.tilt]] - [[MapView.heading]] could change. These properties are cached internaly and will only be updated in the next animation frame. FIXME: Unfortunatley THREE.js is not dispatching any events when camera properties change so we should have an API for enforcing update of cached values.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get camera(): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "PerspectiveCamera",
                  "canonicalReference": "three!PerspectiveCamera:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "camera",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#cameraIsMoving:member",
              "docComment": "/**\n * Returns `true` if the camera moved in the last frame.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get cameraIsMoving(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "cameraIsMoving",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#cameraMovementDetector:member",
              "docComment": "/**\n * @hidden The [[CameraMovementDetector]] detects camera movements. Made available for performance measurements.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get cameraMovementDetector(): "
                },
                {
                  "kind": "Reference",
                  "text": "CameraMovementDetector",
                  "canonicalReference": "@here/harp-mapview!CameraMovementDetector:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "cameraMovementDetector",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#canvas:member",
              "docComment": "/**\n * The HTML canvas element used by this `MapView`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get canvas(): "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLCanvasElement",
                  "canonicalReference": "!HTMLCanvasElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "canvas",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#clearAlpha:member",
              "docComment": "/**\n * The alpha used to clear the view.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get clearAlpha(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset clearAlpha(alpha: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "clearAlpha",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#clearColor:member",
              "docComment": "/**\n * The color used to clear the view.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get clearColor(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset clearColor(color: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "clearColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#clearElevationSource:member(1)",
              "docComment": "/**\n * Clears any elevation sources and provider previously set.\n *\n * @param elevationSource - The datasource to be cleared.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearElevationSource(elevationSource: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSource",
                  "canonicalReference": "@here/harp-mapview!DataSource:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "elevationSource",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "clearElevationSource"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#clearOverlayText:member(1)",
              "docComment": "/**\n * Adds new overlay text elements to this `MapView`.\n *\n * @param textElements - Array of [[TextElement]] to be added.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearOverlayText(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clearOverlayText"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#clearTileCache:member(1)",
              "docComment": "/**\n * Clear the tile cache.\n *\n * Remove the [[Tile]] objects created by cacheable [[DataSource]]s. If a [[DataSource]] name is provided, this method restricts the eviction the [[DataSource]] with the given name.\n *\n * @param dataSourceName - The name of the [[DataSource]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearTileCache(dataSourceName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dataSourceName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "clearTileCache"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#clipPlanesEvaluator:member",
              "docComment": "/**\n * Get camera clipping planes evaluator used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get clipPlanesEvaluator(): "
                },
                {
                  "kind": "Reference",
                  "text": "ClipPlanesEvaluator",
                  "canonicalReference": "@here/harp-mapview!ClipPlanesEvaluator:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset clipPlanesEvaluator(clipPlanesEvaluator: "
                },
                {
                  "kind": "Reference",
                  "text": "ClipPlanesEvaluator",
                  "canonicalReference": "@here/harp-mapview!ClipPlanesEvaluator:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "name": "clipPlanesEvaluator",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#collisionDebugCanvas:member",
              "docComment": "/**\n * The HTML canvas element used by this `MapView`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get collisionDebugCanvas(): "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLCanvasElement",
                  "canonicalReference": "!HTMLCanvasElement:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "collisionDebugCanvas",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#copyrightInfo:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get copyrightInfo(): "
                },
                {
                  "kind": "Reference",
                  "text": "CopyrightInfo",
                  "canonicalReference": "@here/harp-mapview!CopyrightInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "copyrightInfo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#dataSources:member",
              "docComment": "/**\n * Returns [[DataSource]]s displayed by this `MapView`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get dataSources(): "
                },
                {
                  "kind": "Reference",
                  "text": "DataSource",
                  "canonicalReference": "@here/harp-mapview!DataSource:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dataSources",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#delayLabelsUntilMovementFinished:member",
              "docComment": "/**\n * @returns Whether adding of new labels during interaction is enabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get delayLabelsUntilMovementFinished(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset delayLabelsUntilMovementFinished(value: boolean);"
                }
              ],
              "releaseTag": "Public",
              "name": "delayLabelsUntilMovementFinished",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#disableFading:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get disableFading(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset disableFading(disable: boolean);"
                }
              ],
              "releaseTag": "Public",
              "name": "disableFading",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#dispose:member(1)",
              "docComment": "/**\n * Disposes this `MapView`.\n *\n * This function cleans the resources that are managed manually including those that exist in shared caches.\n *\n * Note: This function does not try to clean objects that can be disposed off easily by TypeScript's garbage collecting mechanism. Consequently, if you need to perform a full cleanup, you must ensure that all references to this `MapView` are removed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispose(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "dispose"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#dynamicPixelRatio:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get dynamicPixelRatio(): "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset dynamicPixelRatio(ratio: number | undefined);"
                }
              ],
              "releaseTag": "Public",
              "name": "dynamicPixelRatio",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#elevationProvider:member",
              "docComment": "/**\n * Returns the elevation provider.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get elevationProvider(): "
                },
                {
                  "kind": "Reference",
                  "text": "ElevationProvider",
                  "canonicalReference": "@here/harp-mapview!ElevationProvider:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "elevationProvider",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#enableMixedLod:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get enableMixedLod(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset enableMixedLod(enableMixedLod: boolean | undefined);"
                }
              ],
              "releaseTag": "Public",
              "name": "enableMixedLod",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#endAnimation:member(1)",
              "docComment": "/**\n * Stop animating the scene.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "endAnimation(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "endAnimation"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#env:member",
              "docComment": "/**\n * Environment used to evaluate dynamic scene expressions.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get env(): "
                },
                {
                  "kind": "Reference",
                  "text": "Env",
                  "canonicalReference": "@here/harp-datasource-protocol!Env:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "env",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#extendedFrustumCulling:member",
              "docComment": "/**\n * Specfies whether extended frustum culling is enabled or disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get extendedFrustumCulling(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset extendedFrustumCulling(value: boolean);"
                }
              ],
              "releaseTag": "Public",
              "name": "extendedFrustumCulling",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#focalLength:member",
              "docComment": "/**\n * The distance (in pixels) between the screen and the camera.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get focalLength(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "focalLength",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#fog:member",
              "docComment": "/**\n * Public access to [[MapViewFog]] allowing to toggle it by setting its `enabled` property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get fog(): "
                },
                {
                  "kind": "Reference",
                  "text": "MapViewFog",
                  "canonicalReference": "@here/harp-mapview!MapViewFog:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fog",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#forceCameraAspect:member",
              "docComment": "/**\n * Gets the value of the forced custom camera aspect. Every time a frame is rendered, `MapView` resets the camera aspect.\n *\n * You can disable this behavior by setting the value to `undefined`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get forceCameraAspect(): "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset forceCameraAspect(aspect: number | undefined);"
                }
              ],
              "releaseTag": "Public",
              "name": "forceCameraAspect",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#forEachCachedTile:member(1)",
              "docComment": "/**\n * Apply a visitor function to all tiles in the cache.\n *\n * @param visitor - Visitor function\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forEachCachedTile(visitor: "
                },
                {
                  "kind": "Content",
                  "text": "(tile: "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "visitor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "forEachCachedTile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#forEachVisibleTile:member(1)",
              "docComment": "/**\n * Apply visitor to all visible tiles.\n *\n * @param fun - Visitor function\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forEachVisibleTile(fun: "
                },
                {
                  "kind": "Content",
                  "text": "(tile: "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fun",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "forEachVisibleTile"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#frameNumber:member",
              "docComment": "/**\n * @hidden Return current frame number.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get frameNumber(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "frameNumber",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#getCacheSize:member(1)",
              "docComment": "/**\n * Returns the cache size.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCacheSize(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getCacheSize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#getDataSourceByName:member(1)",
              "docComment": "/**\n * Returns the unique [[DataSource]] matching the given name.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getDataSourceByName(dataSourceName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "DataSource",
                  "canonicalReference": "@here/harp-mapview!DataSource:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dataSourceName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getDataSourceByName"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#getDataSourcesByStyleSetName:member(1)",
              "docComment": "/**\n * Returns the array of [[DataSource]]s referring to the same [[StyleSet]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getDataSourcesByStyleSetName(styleSetName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "DataSource",
                  "canonicalReference": "@here/harp-mapview!DataSource:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "styleSetName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getDataSourcesByStyleSetName"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#getGeoCoordinatesAt:member(1)",
              "docComment": "/**\n * Returns the [[GeoCoordinates]] from the given screen position. The return value can be `null`, in case the camera is facing the horizon and the given `(x, y)` value is not intersecting the ground plane.\n *\n * @param x - The X position in css/client coordinates (without applied display ratio).\n *\n * @param y - The Y position in css/client coordinates (without applied display ratio).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getGeoCoordinatesAt(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getGeoCoordinatesAt"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#getNormalizedScreenCoordinates:member(1)",
              "docComment": "/**\n * Returns the normalized screen coordinates from the given pixel position.\n *\n * @param x - The X position in css/client coordinates (without applied display ratio).\n *\n * @param y - The Y position in css/client coordinates (without applied display ratio).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getNormalizedScreenCoordinates(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getNormalizedScreenCoordinates"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#getScreenPosition:member(1)",
              "docComment": "/**\n * Returns the screen position of the given geo coordinates.\n *\n * @param geoPos - The geo coordinates.\n *\n * @returns The screen position in CSS/client coordinates (no pixel ratio applied) or `undefined`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getScreenPosition(geoPos: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "three!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "geoPos",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getScreenPosition"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#getWorldPositionAt:member(1)",
              "docComment": "/**\n * Returns the world space position from the given screen position. The return value can be `null`, in case the camera is facing the horizon and the given `(x, y)` value is not intersecting the ground plane.\n *\n * @param x - The X position in css/client coordinates (without applied display ratio).\n *\n * @param y - The Y position in css/client coordinates (without applied display ratio).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getWorldPositionAt(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getWorldPositionAt"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#heading:member",
              "docComment": "/**\n * Returns heading angle in degrees.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get heading(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset heading(heading: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "heading",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#imageCache:member",
              "docComment": "/**\n * Get the [[ImageCache]] that belongs to this `MapView`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get imageCache(): "
                },
                {
                  "kind": "Reference",
                  "text": "MapViewImageCache",
                  "canonicalReference": "@here/harp-mapview!MapViewImageCache:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageCache",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#intersectMapObjects:member(1)",
              "docComment": "/**\n * Do a raycast on all objects in the scene. Useful for picking. Limited to objects that THREE.js can raycast, the solid lines that get their geometry in the shader cannot be tested for intersection.\n *\n * Note, if a [[DataSource]] adds an [[Object3D]] to a [[Tile]], it will be only pickable once [[MapView.render]] has been called, this is because [[MapView.render]] method creates the internal three.js root [[Object3D]] which is used in the [[PickHandler]] internally. This method will not test for intersection custom objects added to the scene by for example calling directly the [[scene.add]] method from THREE.\n *\n * @param x - The X position in css/client coordinates (without applied display ratio).\n *\n * @param y - The Y position in css/client coordinates (without applied display ratio).\n *\n * @returns The list of intersection results.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "intersectMapObjects(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PickResult",
                  "canonicalReference": "@here/harp-mapview!PickResult:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "intersectMapObjects"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#isDataSourceEnabled:member(1)",
              "docComment": "/**\n * Returns true if the specified [[DataSource]] is enabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isDataSourceEnabled(dataSource: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSource",
                  "canonicalReference": "@here/harp-mapview!DataSource:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dataSource",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isDataSourceEnabled"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#isDynamicFrame:member",
              "docComment": "/**\n * Returns `true` if the current frame will immediately be followed by another frame.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get isDynamicFrame(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isDynamicFrame",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#languages:member",
              "docComment": "/**\n * Lists the ISO 639-1 language codes for DataSources to use.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get languages(): "
                },
                {
                  "kind": "Content",
                  "text": "string[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset languages(languages: string[] | undefined);"
                }
              ],
              "releaseTag": "Public",
              "name": "languages",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#lights:member",
              "docComment": "/**\n * @returns The lights configured by the theme, this is just a convenience method, because the lights can still be accessed by traversing the children of the [[scene]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get lights(): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Light",
                  "canonicalReference": "three!Light:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lights",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#loadPostEffects:member(1)",
              "docComment": "/**\n * Loads a post effects definition file.\n *\n * @param postEffectsFile - File URL describing the post effects.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadPostEffects(postEffectsFile: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "postEffectsFile",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "loadPostEffects"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#lockVisibleTileSet:member",
              "docComment": "/**\n * Returns the status of frustum culling after each update.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get lockVisibleTileSet(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset lockVisibleTileSet(value: boolean);"
                }
              ],
              "releaseTag": "Public",
              "name": "lockVisibleTileSet",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#lookAt:member(1)",
              "docComment": "/**\n * Adjusts the camera to look at a given geo coordinate with tilt and heading angles.\n *\n * #### Note on `target` and `bounds`\n *\n * If `bounds` are specified, `zoomLevel` and `distance` parameters are ignored and `lookAt` calculates best zoomLevel (and possibly target) to fit given bounds.\n *\n * Following table shows how relation between `bounds` and target.\n *\n * | `bounds` | `target` | actual `target` | ------ | ------ | -------- | [[GeoBox]] | _defined_ | `params.target` is used | [[GeoBox]] | `undefined` | `bounds.center` is used as new `target` | [[GeoBoxExtentLike]] | `undefined` | current `MapView.target` is used | [[GeoBoxExtentLike]] | _defined_ | `params.target` is used | [[GeoCoordLike]][] | `undefined` | new `target` is calculated as center of world box covering given points | [[GeoCoordLike]][] | _defined_ | `params.target` is used and zoomLevel is adjusted to view all given geo points\n *\n * In each case, `lookAt` finds minimum `zoomLevel` that covers given extents or geo points.\n *\n * With flat projection, if `bounds` represents points on both sides of antimeridian, and [[MapViewOptions.tileWrappingEnabled]] is used, `lookAt` will use this knowledge and find minimal view that may cover \"next\" or \"previous\" world.\n *\n * With sphere projection if `bounds` represents points on both sides of globe, best effort method is used to find best `target``.\n *\n * #### Examples\n * ```\n * mapView.lookAt({heading: 90})\n *     // look east retaining current `target`, `zoomLevel` and `tilt`\n *\n * mapView.lookAt({lat: 40.707, lng: -74.01})\n *    // look at Manhattan, New York retaining other view params\n *\n * mapView.lookAt(bounds: { latitudeSpan: 10, longitudeSpan: 10})\n *    // look at current `target`, but extending zoomLevel so we see 10 degrees of lat/long span\n * ```\n *\n * @see More examples in [[LookAtExample]].\n *\n * @param params - [[LookAtParams]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lookAt(params: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "LookAtParams",
                  "canonicalReference": "@here/harp-mapview!LookAtParams:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "params",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                }
              ],
              "name": "lookAt"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#lookAt:member(2)",
              "docComment": "/**\n * The method that sets the camera to the desired angle (`tiltDeg`) and `distance` (in meters) to the `target` location, from a certain heading (`headingAngle`).\n *\n * @deprecated\n *\n * Use lookAt version with [[LookAtParams]] object parameter.\n *\n * @param target - The location to look at.\n *\n * @param distance - The distance of the camera to the target in meters.\n *\n * @param tiltDeg - The camera tilt angle in degrees (0 is vertical), curbed below 89deg  @default 0\n *\n * @param headingDeg - The camera heading angle in degrees and clockwise (as opposed to yaw)  @default 0 starting north.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lookAt(target: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordLike",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", distance: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", tiltDeg?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", headingDeg?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "distance",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "tiltDeg",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "headingDeg",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "lookAt"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#mapAnchors:member",
              "docComment": "/**\n * The node in this MapView's scene containing the user [[MapAnchor]]s. All (first level) children of this node will be positioned in world space according to the [[MapAnchor.geoPosition]]. Deeper level children can be used to position custom objects relative to the anchor node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get mapAnchors(): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Object3D",
                  "canonicalReference": "three!Object3D:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mapAnchors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#mapRenderingManager:member",
              "docComment": "/**\n * The instance of [[MapRenderingManager]] managing the rendering of the map. It is a public property to allow access and modification of some parameters of the rendering process at runtime.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly mapRenderingManager: "
                },
                {
                  "kind": "Reference",
                  "text": "IMapRenderingManager",
                  "canonicalReference": "@here/harp-mapview!IMapRenderingManager:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mapRenderingManager",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#markTilesDirty:member(1)",
              "docComment": "/**\n * Visit each tile in visible, rendered, and cached sets.\n *\n * * Visible and temporarily rendered tiles will be marked for update and retained. * Cached but not rendered/visible will be evicted.\n *\n * @param dataSource - If passed, only the tiles from this [[DataSource]] instance are processed. If `undefined`, tiles from all [[DataSource]]s are processed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "markTilesDirty(dataSource?: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSource",
                  "canonicalReference": "@here/harp-mapview!DataSource:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dataSource",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "markTilesDirty"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#maxFps:member",
              "docComment": "/**\n * Maximum FPS (Frames Per Second). If VSync in enabled, the specified number may not be reached, but instead the next smaller number than `maxFps` that is equal to the refresh rate divided by an integer number.\n *\n * E.g.: If the monitors refresh rate is set to 60hz, and if `maxFps` is set to a value of `40` (60hz/1.5), the actual used FPS may be 30 (60hz/2). For displays that have a refresh rate of 60hz, good values for `maxFps` are 30, 20, 15, 12, 10, 6, 3 and 1. A value of `0` is ignored.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxFps: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxFps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#maxZoomLevel:member",
              "docComment": "/**\n * The maximum zoom level. Default is 14.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get maxZoomLevel(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset maxZoomLevel(zoomLevel: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "maxZoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#minCameraHeight:member",
              "docComment": "/**\n * The minimum camera height in meters.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get minCameraHeight(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minCameraHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#minZoomLevel:member",
              "docComment": "/**\n * The minimum zoom level.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get minZoomLevel(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset minZoomLevel(zoomLevel: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "minZoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#nativeWebglAntialiasEnabled:member",
              "docComment": "/**\n * Returns `true` if the native WebGL antialiasing is enabled.\n *\n * @default `true` for `pixelRatio` < `2.0`, `false` otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get nativeWebglAntialiasEnabled(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "nativeWebglAntialiasEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#pickHandler:member",
              "docComment": "/**\n * Get the [[PickHandler]] for this `mapView`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get pickHandler(): "
                },
                {
                  "kind": "Reference",
                  "text": "PickHandler",
                  "canonicalReference": "@here/harp-mapview!PickHandler:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "pickHandler",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#pixelRatio:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get pixelRatio(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset pixelRatio(pixelRatio: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "pixelRatio",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#pixelToWorld:member",
              "docComment": "/**\n * Returns the ratio between a pixel and a world unit for the current camera (in the center of the camera projection).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get pixelToWorld(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "pixelToWorld",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#poiManager:member",
              "docComment": "/**\n * @hidden Get the [[PoiManager]] that belongs to this `MapView`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get poiManager(): "
                },
                {
                  "kind": "Reference",
                  "text": "PoiManager",
                  "canonicalReference": "@here/harp-mapview!PoiManager:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "poiManager",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#pointOfView:member",
              "docComment": "/**\n * Gets the optional camera used to render the scene.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get pointOfView(): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "PerspectiveCamera",
                  "canonicalReference": "three!PerspectiveCamera:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset pointOfView(pointOfView: THREE."
                },
                {
                  "kind": "Reference",
                  "text": "PerspectiveCamera",
                  "canonicalReference": "three!PerspectiveCamera:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined);"
                }
              ],
              "releaseTag": "Public",
              "name": "pointOfView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#poiTableManager:member",
              "docComment": "/**\n * @hidden Get the array of [[PoiTableManager]] that belongs to this `MapView`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get poiTableManager(): "
                },
                {
                  "kind": "Reference",
                  "text": "PoiTableManager",
                  "canonicalReference": "@here/harp-mapview!PoiTableManager:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "poiTableManager",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#politicalView:member",
              "docComment": "/**\n * Get currently presented political point of view - the country code.\n *\n * @note Country code is stored in lower-case ISO 3166-1 alpha-2 standard.  @return Country code or undefined if default (majorly accepted) point of view is used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get politicalView(): "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset politicalView(pov: string | undefined);"
                }
              ],
              "releaseTag": "Public",
              "name": "politicalView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#postEffects:member",
              "docComment": "/**\n * The abstraction of the [[MapRenderingManager]] API for post effects.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get postEffects(): "
                },
                {
                  "kind": "Reference",
                  "text": "PostEffects",
                  "canonicalReference": "@here/harp-datasource-protocol!PostEffects:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset postEffects(postEffects: "
                },
                {
                  "kind": "Reference",
                  "text": "PostEffects",
                  "canonicalReference": "@here/harp-datasource-protocol!PostEffects:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined);"
                }
              ],
              "releaseTag": "Public",
              "name": "postEffects",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#projection:member",
              "docComment": "/**\n * The projection used to project geo coordinates to world coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get projection(): "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset projection(projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "name": "projection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#removeDataSource:member(1)",
              "docComment": "/**\n * Removes [[DataSource]] from this `MapView`.\n *\n * @param dataSource - The data source to be removed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeDataSource(dataSource: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSource",
                  "canonicalReference": "@here/harp-mapview!DataSource:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dataSource",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "removeDataSource"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#removeDynamicProperty:member(1)",
              "docComment": "/**\n * Removes the given dynamic property from this [[MapView]].\n *\n * Property names starting with a `$`-sign are reserved and any attempt to change their value will result in an error.\n *\n * @param name - The name of the property to remove.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeDynamicProperty(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "removeDynamicProperty"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#removeEventListener:member(1)",
              "docComment": "/**\n * Removes an event listener. There are various events that are sent before or after a new frame is rendered.\n *\n * @see [[MapViewEventNames]].\n *\n * @param type - One of the [[MapViewEventNames]] strings.\n *\n * @param listener - The callback invoked when the `MapView` needs to render a new frame.\n *\n * @example\n * ```TypeScript\n * mapView.removeEventListener(MapViewEventNames.Render, listener);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeEventListener(type: "
                },
                {
                  "kind": "Reference",
                  "text": "MapViewEventNames",
                  "canonicalReference": "@here/harp-mapview!MapViewEventNames:enum"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(event: "
                },
                {
                  "kind": "Reference",
                  "text": "RenderEvent",
                  "canonicalReference": "@here/harp-mapview!RenderEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "removeEventListener"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#renderer:member",
              "docComment": "/**\n * The THREE.js `WebGLRenderer` used by this scene.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get renderer(): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "WebGLRenderer",
                  "canonicalReference": "three!WebGLRenderer:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#renderLabels:member",
              "docComment": "/**\n * @returns Whether label rendering is enabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get renderLabels(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset renderLabels(value: boolean);"
                }
              ],
              "releaseTag": "Public",
              "name": "renderLabels",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#renderSync:member(1)",
              "docComment": "/**\n * Redraws scene immediately\n *\n * @note Before using this method, set `synchronousRendering` to `true` in the [[MapViewOptions]]\n *\n * @param frameStartTime - Optional timestamp for start of frame. Default: [[PerformanceTimer.now()]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderSync(frameStartTime?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "frameStartTime",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "renderSync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#requestUpdateIfNeeded:member(1)",
              "docComment": "/**\n * Requests a redraw of the scene.\n *\n * @deprecated\n *\n * Use the [[update]] method instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "requestUpdateIfNeeded(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "requestUpdateIfNeeded"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#resetFrameNumber:member(1)",
              "docComment": "/**\n * @hidden Reset the frame number to 0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resetFrameNumber(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "resetFrameNumber"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#resize:member(1)",
              "docComment": "/**\n * Resize the HTML canvas element and the THREE.js `WebGLRenderer`.\n *\n * @param width - The new width.\n *\n * @param height - The new height.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resize(width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "width",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "height",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "resize"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#resourceComputationType:member",
              "docComment": "/**\n * The way the cache usage is computed, either based on size in MB (mega bytes) or in number of tiles.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get resourceComputationType(): "
                },
                {
                  "kind": "Reference",
                  "text": "ResourceComputationType",
                  "canonicalReference": "@here/harp-mapview!ResourceComputationType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset resourceComputationType(value: "
                },
                {
                  "kind": "Reference",
                  "text": "ResourceComputationType",
                  "canonicalReference": "@here/harp-mapview!ResourceComputationType:enum"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "name": "resourceComputationType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#scene:member",
              "docComment": "/**\n * The THREE.js scene used by this `MapView`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get scene(): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Scene",
                  "canonicalReference": "three!Scene:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "scene",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#setCacheSize:member(1)",
              "docComment": "/**\n * Sets the cache size in number of tiles.\n *\n * @param size - The cache size in tiles.\n *\n * @param numVisibleTiles - The number of tiles visible, which is size/2 by default.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setCacheSize(size: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", numVisibleTiles?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "size",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "numVisibleTiles",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setCacheSize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#setCameraGeolocationAndZoom:member(1)",
              "docComment": "/**\n * Moves the camera to the specified [[GeoCoordinates]], sets the desired `zoomLevel` and adjusts the yaw and pitch. The pitch of the camera is always curbed so that the camera cannot look above the horizon. This paradigm is necessary in [[MapControls]], where the center of \\ the screen is used for the orbiting interaction (3 fingers / right mouse button).\n *\n * @deprecated\n *\n * Use [[MapView.lookAt]] instead.\n *\n * @param geoPos - Geolocation to move the camera to.\n *\n * @param zoomLevel - Desired zoom level.\n *\n * @param yawDeg - Camera yaw in degrees, counter-clockwise (as opposed to heading), starting north.\n *\n * @param pitchDeg - Camera pitch in degrees.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setCameraGeolocationAndZoom(geoPos: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ", zoomLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", yawDeg?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", pitchDeg?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "geoPos",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "zoomLevel",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "yawDeg",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "pitchDeg",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "setCameraGeolocationAndZoom"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#setDynamicProperty:member(1)",
              "docComment": "/**\n * Updates the value of a dynamic property.\n *\n * Property names starting with a `$`-sign are reserved and any attempt to change their value will result in an error.\n *\n * Themes can access dynamic properties using the `Expr` operator `[\"dynamic-properties\"]`, for example:\n *\n * `[\"get\", \"property name\", [\"dynamic-properties\"]]`\n *\n * @param name - The name of the property.\n *\n * @param value - The value of the property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDynamicProperty(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Reference",
                  "text": "Value",
                  "canonicalReference": "@here/harp-datasource-protocol!Value:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setDynamicProperty"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#setElevationSource:member(1)",
              "docComment": "/**\n * Sets the DataSource which contains the elevations, the elevation range source, and the elevation provider. Only a single elevation source is possible per [[MapView]]\n *\n * If the terrain-datasource is merged with this repository, we could internally construct the [[ElevationRangeSource]] and the [[ElevationProvider]] and access would be granted to the application when it asks for it, to simplify the API.\n *\n * @param elevationSource - The datasource containing the terrain tiles.\n *\n * @param elevationRangeSource - Allows access to the elevation min / max per tile.\n *\n * @param elevationProvider - Allows access to the elevation at a given location or a ray from the camera.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setElevationSource(elevationSource: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSource",
                  "canonicalReference": "@here/harp-mapview!DataSource:class"
                },
                {
                  "kind": "Content",
                  "text": ", elevationRangeSource: "
                },
                {
                  "kind": "Reference",
                  "text": "ElevationRangeSource",
                  "canonicalReference": "@here/harp-mapview!ElevationRangeSource:interface"
                },
                {
                  "kind": "Content",
                  "text": ", elevationProvider: "
                },
                {
                  "kind": "Reference",
                  "text": "ElevationProvider",
                  "canonicalReference": "@here/harp-mapview!ElevationProvider:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "elevationSource",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "elevationRangeSource",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "elevationProvider",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "setElevationSource"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#setFovCalculation:member(1)",
              "docComment": "/**\n * Set's the way in which the fov is calculated on the map view. Note, for this to take visual effect, the map should be rendered after calling this function.\n *\n * @param fovCalculation - How the FOV is calculated.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setFovCalculation(fovCalculation: "
                },
                {
                  "kind": "Reference",
                  "text": "FovCalculation",
                  "canonicalReference": "@here/harp-mapview!FovCalculation:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fovCalculation",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setFovCalculation"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#shadowsEnabled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get shadowsEnabled(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset shadowsEnabled(enabled: boolean);"
                }
              ],
              "releaseTag": "Public",
              "name": "shadowsEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#storageLevel:member",
              "docComment": "/**\n * Returns the storage level for the given camera setup. Actual storage level of the rendered data also depends on [[DataSource.storageLevelOffset]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get storageLevel(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "storageLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#target:member",
              "docComment": "/**\n * Get geo coordinates of camera focus (target) point. This point is not necessarily on the ground, i.e.: - if the tilt is high and projection is [[sphereProjection]] - if the camera was modified directly and is not pointing to the ground. In any case the projection of the target point will be in the center of the screen.\n *\n * @returns geo coordinates of the camera focus point.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get target(): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "target",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#textElementsRenderer:member",
              "docComment": "/**\n * @hidden The [[TextElementsRenderer]] select the visible [[TextElement]]s and renders them.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get textElementsRenderer(): "
                },
                {
                  "kind": "Reference",
                  "text": "TextElementsRenderer",
                  "canonicalReference": "@here/harp-mapview!TextElementsRenderer:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textElementsRenderer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#theme:member",
              "docComment": "/**\n * Gets the current `Theme` used by this `MapView` to style map elements.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get theme(): "
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@here/harp-datasource-protocol!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset theme(theme: "
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@here/harp-datasource-protocol!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#tileGeometryManager:member",
              "docComment": "/**\n * The [[TileGeometryManager]] manages geometry during loading and handles hiding geometry of specified [[GeometryKind]]s.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get tileGeometryManager(): "
                },
                {
                  "kind": "Reference",
                  "text": "TileGeometryManager",
                  "canonicalReference": "@here/harp-mapview!TileGeometryManager:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tileGeometryManager",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#tilt:member",
              "docComment": "/**\n * Returns tilt angle in degrees.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get tilt(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset tilt(tilt: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "tilt",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapView#update:member(1)",
              "docComment": "/**\n * Requests a redraw of the scene.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "update(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "update"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#updatePending:member",
              "docComment": "/**\n * Returns `true` if an update has already been requested, such that after a currently rendering frame, the next frame will be rendered immediately.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get updatePending(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "updatePending",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#uriResolver:member",
              "docComment": "/**\n * [[UriResolver]] used to resolve application/deployment specific `URI`s into actual `URLs` that can be loaded with `fetch`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get uriResolver(): "
                },
                {
                  "kind": "Reference",
                  "text": "UriResolver",
                  "canonicalReference": "@here/harp-utils!UriResolver:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "uriResolver",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#viewportHeight:member",
              "docComment": "/**\n * Returns height of the viewport in pixels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get viewportHeight(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "viewportHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#visibleTileSet:member",
              "docComment": "/**\n * Access the `VisibleTileSet` to get access to all current datasources and their visible tiles.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get visibleTileSet(): "
                },
                {
                  "kind": "Reference",
                  "text": "VisibleTileSet",
                  "canonicalReference": "@here/harp-mapview!VisibleTileSet:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "visibleTileSet",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#worldCenter:member",
              "docComment": "/**\n * The position in world coordinates of the center of the scene.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get worldCenter(): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "worldCenter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#worldToPixel:member",
              "docComment": "/**\n * Returns the ratio between a world and a pixel unit for the current camera (in the center of the camera projection).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get worldToPixel(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "worldToPixel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapView#zoomLevel:member",
              "docComment": "/**\n * Returns the zoom level for the given camera setup.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get zoomLevel(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset zoomLevel(zoomLevel: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "zoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!MapViewAtmosphere:class",
          "docComment": "/**\n * Class that provides [[MapView]]'s atmospheric scattering effect.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class MapViewAtmosphere "
            }
          ],
          "releaseTag": "Public",
          "name": "MapViewAtmosphere",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!MapViewAtmosphere:constructor(1)",
              "docComment": "/**\n * Creates and adds `Atmosphere` effects to the scene.\n *\n * @note Currently works only with globe projection.\n *\n * @param m_sceneRoot - The scene's root [[THREE.Object3D]] instance where the effect will be added.\n *\n * @param m_sceneCamera - The camera used to render entire scene.\n *\n * @param m_projection - The geo-projection used to transform geo coordinates to cartesian space.\n *\n * @param m_updateCallback - The optional callback to that should be called whenever atmosphere configuration changes, may be used to inform related components (`MapView`) to redraw.\n *\n * @param m_atmosphereVariant - The optional atmosphere configuration variant enum [[AtmosphereVariant]], which denotes where the atmosphere scattering effect should be applied, it may be ground or sky atmosphere only or most realistic for both, which is chosen by default.\n *\n * @param m_materialVariant - The optional material variant to be used, mainly for testing and tweaking purposes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(m_sceneRoot: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Object3D",
                  "canonicalReference": "three!Object3D:class"
                },
                {
                  "kind": "Content",
                  "text": ", m_sceneCamera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "three!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": ", m_projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ", m_updateCallback?: "
                },
                {
                  "kind": "Content",
                  "text": "(() => void) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", m_atmosphereVariant?: "
                },
                {
                  "kind": "Reference",
                  "text": "AtmosphereVariant",
                  "canonicalReference": "@here/harp-mapview!~AtmosphereVariant:enum"
                },
                {
                  "kind": "Content",
                  "text": ", m_materialVariant?: "
                },
                {
                  "kind": "Reference",
                  "text": "AtmosphereShadingVariant",
                  "canonicalReference": "@here/harp-mapview!~AtmosphereShadingVariant:enum"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "m_sceneRoot",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "m_sceneCamera",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "m_projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "m_updateCallback",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                },
                {
                  "parameterName": "m_atmosphereVariant",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  }
                },
                {
                  "parameterName": "m_materialVariant",
                  "parameterTypeTokenRange": {
                    "startIndex": 13,
                    "endIndex": 14
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapViewAtmosphere#dispose:member(1)",
              "docComment": "/**\n * Disposes allocated resources.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispose(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "dispose"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapViewAtmosphere#enabled:member",
              "docComment": "/**\n * Returns the current atmosphere status, enabled or disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get enabled(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset enabled(enable: boolean);"
                }
              ],
              "releaseTag": "Public",
              "name": "enabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapViewAtmosphere.GroundAtmosphereUserName:member",
              "docComment": "/**\n * User data name attribute assigned to created mesh.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static GroundAtmosphereUserName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "GroundAtmosphereUserName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapViewAtmosphere#groundMesh:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get groundMesh(): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "three!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "groundMesh",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapViewAtmosphere.isPresent:member(1)",
              "docComment": "/**\n * Check if scene or root scene object has already atmosphere effect added.\n *\n * @param where - [[THREE.Object3D]] or [[THREE.Scene]] instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isPresent(where: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Scene",
                  "canonicalReference": "three!Scene:class"
                },
                {
                  "kind": "Content",
                  "text": " | THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Object3D",
                  "canonicalReference": "three!Object3D:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "where",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                }
              ],
              "name": "isPresent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapViewAtmosphere#reset:member(1)",
              "docComment": "/**\n * Sets the atmosphere depending on the [[Theme]] instance provided.\n *\n * This function is called when a theme is loaded. Atmosphere is added only if the theme contains a atmosphere definition with a: - `color` property, used to set the atmosphere color.\n *\n * @param theme - A [[Theme]] instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reset(theme: "
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@here/harp-datasource-protocol!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "theme",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "reset"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapViewAtmosphere.SkyAtmosphereUserName:member",
              "docComment": "/**\n * User data name attribute assigned to created mesh.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static SkyAtmosphereUserName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "SkyAtmosphereUserName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapViewAtmosphere#skyMesh:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get skyMesh(): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "three!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "skyMesh",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@here/harp-mapview!MapViewEventNames:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum MapViewEventNames "
            }
          ],
          "releaseTag": "Public",
          "name": "MapViewEventNames",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MapViewEventNames.AfterRender:member",
              "docComment": "/**\n * Called after a frame has been rendered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AfterRender = "
                },
                {
                  "kind": "Content",
                  "text": "\"didrender\""
                }
              ],
              "releaseTag": "Public",
              "name": "AfterRender",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MapViewEventNames.AnimationFinished:member",
              "docComment": "/**\n * Called when the animation mode has stopped.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AnimationFinished = "
                },
                {
                  "kind": "Content",
                  "text": "\"animation-finished\""
                }
              ],
              "releaseTag": "Public",
              "name": "AnimationFinished",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MapViewEventNames.AnimationStarted:member",
              "docComment": "/**\n * Called when the animation mode has started.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AnimationStarted = "
                },
                {
                  "kind": "Content",
                  "text": "\"animation-started\""
                }
              ],
              "releaseTag": "Public",
              "name": "AnimationStarted",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MapViewEventNames.CameraPositionChanged:member",
              "docComment": "/**\n * Called when camera position has been changed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CameraPositionChanged = "
                },
                {
                  "kind": "Content",
                  "text": "\"camera-changed\""
                }
              ],
              "releaseTag": "Public",
              "name": "CameraPositionChanged",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MapViewEventNames.ContextLost:member",
              "docComment": "/**\n * Called when the WebGL context is lost.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ContextLost = "
                },
                {
                  "kind": "Content",
                  "text": "\"webglcontext-lost\""
                }
              ],
              "releaseTag": "Public",
              "name": "ContextLost",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MapViewEventNames.ContextRestored:member",
              "docComment": "/**\n * Called when the WebGL context is restored.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ContextRestored = "
                },
                {
                  "kind": "Content",
                  "text": "\"webglcontext-restored\""
                }
              ],
              "releaseTag": "Public",
              "name": "ContextRestored",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MapViewEventNames.CopyrightChanged:member",
              "docComment": "/**\n * Emitted when copyright info of rendered map has been changed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CopyrightChanged = "
                },
                {
                  "kind": "Content",
                  "text": "\"copyright-changed\""
                }
              ],
              "releaseTag": "Public",
              "name": "CopyrightChanged",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MapViewEventNames.DataSourceConnect:member",
              "docComment": "/**\n * Called when a data source has been connected or failed to connect.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DataSourceConnect = "
                },
                {
                  "kind": "Content",
                  "text": "\"datasource-connect\""
                }
              ],
              "releaseTag": "Public",
              "name": "DataSourceConnect",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MapViewEventNames.FirstFrame:member",
              "docComment": "/**\n * Called after the first frame has been rendered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "FirstFrame = "
                },
                {
                  "kind": "Content",
                  "text": "\"first-render\""
                }
              ],
              "releaseTag": "Public",
              "name": "FirstFrame",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MapViewEventNames.FrameComplete:member",
              "docComment": "/**\n * Called when the first view has all the necessary tiles loaded and rendered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "FrameComplete = "
                },
                {
                  "kind": "Content",
                  "text": "\"frame-complete\""
                }
              ],
              "releaseTag": "Public",
              "name": "FrameComplete",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MapViewEventNames.MovementFinished:member",
              "docComment": "/**\n * Called when a camera interaction has been stopped.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MovementFinished = "
                },
                {
                  "kind": "Content",
                  "text": "\"movement-finished\""
                }
              ],
              "releaseTag": "Public",
              "name": "MovementFinished",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MapViewEventNames.MovementStarted:member",
              "docComment": "/**\n * Called when a camera interaction has been detected.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MovementStarted = "
                },
                {
                  "kind": "Content",
                  "text": "\"movement-started\""
                }
              ],
              "releaseTag": "Public",
              "name": "MovementStarted",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MapViewEventNames.Render:member",
              "docComment": "/**\n * Called when the frame is about to be rendered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Render = "
                },
                {
                  "kind": "Content",
                  "text": "\"render\""
                }
              ],
              "releaseTag": "Public",
              "name": "Render",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MapViewEventNames.Resize:member",
              "docComment": "/**\n * Called when the WebGL canvas is resized.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Resize = "
                },
                {
                  "kind": "Content",
                  "text": "\"resize\""
                }
              ],
              "releaseTag": "Public",
              "name": "Resize",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MapViewEventNames.ThemeLoaded:member",
              "docComment": "/**\n * Called when the theme has been loaded with the internal [[ThemeLoader]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ThemeLoaded = "
                },
                {
                  "kind": "Content",
                  "text": "\"theme-loaded\""
                }
              ],
              "releaseTag": "Public",
              "name": "ThemeLoaded",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MapViewEventNames.Update:member",
              "docComment": "/**\n * Called before this `MapView` starts to render a new frame.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Update = "
                },
                {
                  "kind": "Content",
                  "text": "\"update\""
                }
              ],
              "releaseTag": "Public",
              "name": "Update",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!MapViewFog:class",
          "docComment": "/**\n * Manages the fog display in [[MapView]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class MapViewFog "
            }
          ],
          "releaseTag": "Public",
          "name": "MapViewFog",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!MapViewFog:constructor(1)",
              "docComment": "/**\n * Constructs a `MapViewFog` instance.\n *\n * @param m_scene - The scene used in [[MapView]] that contains the map objects.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(m_scene: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Scene",
                  "canonicalReference": "three!Scene:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "m_scene",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapViewFog#enabled:member",
              "docComment": "/**\n * Returns the current fog status, enabled or disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get enabled(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset enabled(enableFog: boolean);"
                }
              ],
              "releaseTag": "Public",
              "name": "enabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapViewFog#reset:member(1)",
              "docComment": "/**\n * Sets the fog depending on the [[Theme]] instance provided. This function is called when a theme is loaded. Fog is added only if the theme contains a fog definition with a: - `color` property, used to set the fog color. - `startRatio` property, used to set the start distance of the fog as a ratio of the far clipping plane distance.\n *\n * @param theme - A [[Theme]] instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reset(theme: "
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@here/harp-datasource-protocol!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "theme",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "reset"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapViewFog#update:member(1)",
              "docComment": "/**\n * Updates the fog at runtime, depending on the camera.\n *\n * @param camera - An instance of a `THREE.Camera` with a `far` property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "update(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ", viewDistance?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "viewDistance",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "update"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!MapViewImageCache:class",
          "docComment": "/**\n * Cache images wrapped into [[ImageItem]]s for a [[MapView]]. An image may have multiple names in a theme, the `MapViewImageCache` will take care of that. Registering multiple images with the same name is invalid.\n *\n * The `MapViewImageCache` uses a global [[ImageCache]] to actually store (and generate) the image data.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class MapViewImageCache "
            }
          ],
          "releaseTag": "Public",
          "name": "MapViewImageCache",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!MapViewImageCache:constructor(1)",
              "docComment": "/**\n * The constructor for `MapViewImageCache`.\n *\n * @param mapView - a [[MapView]] instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapViewImageCache#addImage:member(1)",
              "docComment": "/**\n * Add an image and optionally start loading it. Once done, the [[ImageData]] or [[ImageBitmap]] will be stored in the [[ImageItem]].\n *\n * @param name - Name of image from [[Theme]].\n *\n * @param url - URL of image.\n *\n * @param startLoading - Optional. Pass `true` to start loading the image in the background.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addImage(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", startLoading?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ImageItem",
                  "canonicalReference": "@here/harp-mapview!ImageItem:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ImageItem",
                  "canonicalReference": "@here/harp-mapview!ImageItem:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "startLoading",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "addImage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapViewImageCache#clear:member(1)",
              "docComment": "/**\n * Remove all [[ImageItem]]s from the cache. Also removes all [[ImageItem]]s that belong to this [[MapView]] from the global [[ImageCache]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clear"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapViewImageCache#findImageByName:member(1)",
              "docComment": "/**\n * Find [[ImageItem]] by its name.\n *\n * @param name - Name of image.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "findImageByName(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ImageItem",
                  "canonicalReference": "@here/harp-mapview!ImageItem:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "findImageByName"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapViewImageCache#findImageByUrl:member(1)",
              "docComment": "/**\n * Find [[ImageItem]] by URL.\n *\n * @param url - Url of image.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "findImageByUrl(url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ImageItem",
                  "canonicalReference": "@here/harp-mapview!ImageItem:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "findImageByUrl"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapViewImageCache#findNames:member(1)",
              "docComment": "/**\n * Return the names under which an image with the given URL is saved.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "findNames(url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "findNames"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapViewImageCache#hasName:member(1)",
              "docComment": "/**\n * Return `true` if an image with the given name is known.\n *\n * @param name - Name of the image.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasName(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "hasName"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapViewImageCache#hasUrl:member(1)",
              "docComment": "/**\n * Return `true` if an image with the given URL is known.\n *\n * @param url - URL of image.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasUrl(url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "hasUrl"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapViewImageCache#loadImage:member(1)",
              "docComment": "/**\n * Load an [[ImageItem]]. Returns a promise or a loaded [[ImageItem]].\n *\n * @param imageItem - ImageItem to load.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadImage(imageItem: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageItem",
                  "canonicalReference": "@here/harp-mapview!ImageItem:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ImageItem",
                  "canonicalReference": "@here/harp-mapview!ImageItem:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ImageItem",
                  "canonicalReference": "@here/harp-mapview!ImageItem:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "imageItem",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "loadImage"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapViewImageCache#mapView:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mapView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapViewImageCache#numberOfNames:member",
              "docComment": "/**\n * Returns number of image names stored in the cache.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get numberOfNames(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "numberOfNames",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapViewImageCache#numberOfUrls:member",
              "docComment": "/**\n * Returns number of image URLs in the cache.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get numberOfUrls(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "numberOfUrls",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapViewImageCache#registerImage:member(1)",
              "docComment": "/**\n * Register an existing image by name.\n *\n * @param name - Name of the image from [[Theme]].\n *\n * @param url - URL of image.\n *\n * @param image - Optional [[ImageData]] of image.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "registerImage(name: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", image: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageData",
                  "canonicalReference": "!ImageData:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ImageBitmap",
                  "canonicalReference": "!ImageBitmap:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ImageItem",
                  "canonicalReference": "@here/harp-mapview!ImageItem:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "image",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  }
                }
              ],
              "name": "registerImage"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!MapViewOptions:interface",
          "docComment": "/**\n * User configuration for the [[MapView]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MapViewOptions extends "
            },
            {
              "kind": "Reference",
              "text": "TextElementsRendererOptions",
              "canonicalReference": "@here/harp-mapview!TextElementsRendererOptions:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "LookAtParams",
              "canonicalReference": "@here/harp-mapview!LookAtParams:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "MapViewOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#addBackgroundDatasource:member",
              "docComment": "/**\n * If `true`adds a Background Mesh for each tile\n *\n * @default `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addBackgroundDatasource?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "addBackgroundDatasource",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#alpha:member",
              "docComment": "/**\n * `true` if the canvas contains an alpha (transparency) buffer or not. Default is `false`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alpha?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "alpha",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#backgroundTilingScheme:member",
              "docComment": "/**\n * Set tiling scheme for [[BackgroundDataSource]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "backgroundTilingScheme?: "
                },
                {
                  "kind": "Reference",
                  "text": "TilingScheme",
                  "canonicalReference": "@here/harp-geoutils!TilingScheme:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "backgroundTilingScheme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#canvas:member",
              "docComment": "/**\n * The canvas element used to render the scene.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "canvas: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLCanvasElement",
                  "canonicalReference": "!HTMLCanvasElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "canvas",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#clipPlanesEvaluator:member",
              "docComment": "/**\n * User-defined camera clipping planes distance evaluator. If not defined, [[TiltViewClipPlanesEvaluator]] will be used by [[MapView]].\n *\n * @default [[TiltViewClipPlanesEvaluator]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clipPlanesEvaluator?: "
                },
                {
                  "kind": "Reference",
                  "text": "ClipPlanesEvaluator",
                  "canonicalReference": "@here/harp-mapview!ClipPlanesEvaluator:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "clipPlanesEvaluator",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#collisionDebugCanvas:member",
              "docComment": "/**\n * An optional canvas element that renders 2D collision debug information.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "collisionDebugCanvas?: "
                },
                {
                  "kind": "Reference",
                  "text": "HTMLCanvasElement",
                  "canonicalReference": "!HTMLCanvasElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "collisionDebugCanvas",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#context:member",
              "docComment": "/**\n * Optional WebGL Rendering Context. (https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context?: "
                },
                {
                  "kind": "Reference",
                  "text": "WebGLRenderingContext",
                  "canonicalReference": "!WebGLRenderingContext:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#customAntialiasSettings:member",
              "docComment": "/**\n * Antialias settings for the map rendering. It is better to disable the native antialising if the custom antialiasing is enabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "customAntialiasSettings?: "
                },
                {
                  "kind": "Reference",
                  "text": "IMapAntialiasSettings",
                  "canonicalReference": "@here/harp-mapview!IMapAntialiasSettings:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "customAntialiasSettings",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#decoderCount:member",
              "docComment": "/**\n * The number of Web Workers used to decode data. The default is CLAMP(`navigator.hardwareConcurrency` - 1, 1, 2).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "decoderCount?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "decoderCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#decoderUrl:member",
              "docComment": "/**\n * The URL of the script that the decoder worker runs. The default URL is `./decoder.bundle.js`.\n *\n * Relative URIs are resolved to full URL using the document's base URL (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "decoderUrl?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "decoderUrl",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#dynamicPixelRatio:member",
              "docComment": "/**\n * Set fixed pixel ratio for rendering when the camera is moving or an animation is running. Useful when rendering on high resolution displays with low performance GPUs that may be fill-rate limited.\n *\n * If a value is specified, a low resolution render pass is used to render the scene into a low resolution render target, before it is copied to the screen.\n *\n * A value of `undefined` disables the low res render pass. Values between 0.5 and `window.devicePixelRatio` can be tried to give good results. The value should not be larger than `window.devicePixelRatio`.\n *\n * @note Since no anti-aliasing is applied during dynamic rendering with `dynamicPixelRatio` defined, visual artifacts may occur, especially with thin lines..\n *\n * @note The resolution of icons and text labels is not affected.\n *\n * @default `undefined`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dynamicPixelRatio?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dynamicPixelRatio",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#enableMixedLod:member",
              "docComment": "/**\n * Set true to enable rendering mixed levels of detail (increases rendering performance). If not set will enable mixed levels of detail for spherical projection and disable for other projections.\n *\n * @default undefined\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enableMixedLod?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enableMixedLod",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#enableNativeWebglAntialias:member",
              "docComment": "/**\n * Whether the native WebGL antialiasing should be enabled. It is better to disable it if the MapView's MSAA is enabled.\n *\n * @default `true` for `pixelRatio` < `2.0`, `false` otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enableNativeWebglAntialias?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enableNativeWebglAntialias",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#enablePickTechnique:member",
              "docComment": "/**\n * Set to `true` to allow picking of technique information associated with objects.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enablePickTechnique?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enablePickTechnique",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#enablePolarDataSource:member",
              "docComment": "/**\n * Should be the [[PolarTileDataSource]] used on spherical projection. Default is `true`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enablePolarDataSource?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enablePolarDataSource",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#enableRoadPicking:member",
              "docComment": "/**\n * @deprecated\n *\n * Not needed anymore, roads can be picked by default.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enableRoadPicking?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enableRoadPicking",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#enableShadows:member",
              "docComment": "/**\n * Enable shadows in the map. Shadows will only be casted on features that use the \"standard\" or \"extruded-polygon\" technique in the map theme.  @default false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enableShadows?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enableShadows",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#enableStatistics:member",
              "docComment": "/**\n * Set to `true` to measure performance statistics.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enableStatistics?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enableStatistics",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#extendedFrustumCulling:member",
              "docComment": "/**\n * Set to true to extend the frustum culling. This improves the rejection of some tiles, which normal frustum culling cannot detect. You can disable this property to measure performance.\n *\n * @default true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "extendedFrustumCulling?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "extendedFrustumCulling",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#fovCalculation:member",
              "docComment": "/**\n * How to calculate the Field of View, if not specified, then [[DEFAULT_FOV_CALCULATION]] is used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fovCalculation?: "
                },
                {
                  "kind": "Reference",
                  "text": "FovCalculation",
                  "canonicalReference": "@here/harp-mapview!FovCalculation:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fovCalculation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#languages:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "languages?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "languages",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#maxFps:member",
              "docComment": "/**\n * Set maximum FPS (Frames Per Second). If VSync in enabled, the specified number may not be reached, but instead the next smaller number than `maxFps` that is equal to the refresh rate divided by an integer number.\n *\n * E.g.: If the monitors refresh rate is set to 60hz, and if `maxFps` is set to a value of `40` (60hz/1.5), the actual used FPS may be 30 (60hz/2). For displays that have a refresh rate of 60hz, good values for `maxFps` are 30, 20, 15, 12, 10, 6, 3 and 1. A value of `0` is ignored.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxFps?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxFps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#maxVisibleDataSourceTiles:member",
              "docComment": "/**\n * The maximum number of tiles rendered from one data source at a time.\n *\n * @default See [[MapViewDefaults.maxVisibleDataSourceTiles]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxVisibleDataSourceTiles?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxVisibleDataSourceTiles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#maxZoomLevel:member",
              "docComment": "/**\n * The maximum zoom level. The default is `14`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxZoomLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxZoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#minCameraHeight:member",
              "docComment": "/**\n * Determines the minimum camera height, in meters.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minCameraHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minCameraHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#minZoomLevel:member",
              "docComment": "/**\n * The minimum zoom level; default is `1`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minZoomLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minZoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#movementThrottleTimeout:member",
              "docComment": "/**\n * Maximum timeout, in milliseconds, before a [[MOVEMENT_FINISHED_EVENT]] is sent after the latest frame with a camera movement. The default is 300ms.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "movementThrottleTimeout?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "movementThrottleTimeout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#pixelRatio:member",
              "docComment": "/**\n * Set fixed pixel ratio for rendering. Useful when rendering on high resolution displays with low performance GPUs that may be fill-rate limited.  @default `window.devicePixelRatio`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pixelRatio?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "pixelRatio",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#polarGeometryLevelOffset:member",
              "docComment": "/**\n * Storage level offset of regular tiles from reference datasource to align [[PolarTileDataSource]] tiles to. Default is `-1`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "polarGeometryLevelOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "polarGeometryLevelOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#polarStyleSetName:member",
              "docComment": "/**\n * The name of the [[StyleSet]] used by [[PolarTileDataSource]] to evaluate for the decoding. Default is `\"polar\"`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "polarStyleSetName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "polarStyleSetName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#politicalView:member",
              "docComment": "/**\n * Sets the data sources to use specific country point of view (political view).\n *\n * This option may result in rendering different country borders then commonly accepted for some regions and it mainly regards to so called __disputed borders__. Although not all data sources or themes may support it.\n *\n * @note Country code should be coded in lower-case ISO 3166-1 alpha-2 standard, if this option is `undefined` the majority point of view will be used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "politicalView?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "politicalView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#powerPreference:member",
              "docComment": "/**\n * Hint for the WebGL implementation on which power mode to prefer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "powerPreference?: "
                },
                {
                  "kind": "Reference",
                  "text": "MapViewPowerPreference",
                  "canonicalReference": "@here/harp-mapview!MapViewPowerPreference:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "powerPreference",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#preserveDrawingBuffer:member",
              "docComment": "/**\n * Preserve the buffers until they are cleared manually or overwritten.\n *\n * Set to `true` in order to copy [[MapView]] canvas contents to an image or another canvas.\n *\n * @default `false`.  @see https://threejs.org/docs/#api/renderers/WebGLRenderer.preserveDrawingBuffer\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "preserveDrawingBuffer?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "preserveDrawingBuffer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#projection:member",
              "docComment": "/**\n * `Projection` used by the `MapView`.\n *\n * The default value is [[mercatorProjection]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "projection?: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "projection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#quadTreeSearchDistanceDown:member",
              "docComment": "/**\n * Limits the number of higher zoom levels (more detailed) to be searched for fallback tiles.\n *\n * When zooming out, newly elected tiles may have not yet loaded. [[MapView]] searches through the tile cache for tiles ready to be displayed in higher zoom levels. These tiles may be located deeper in the quadtree.\n *\n * To disable a cache search, set the value to `0`.\n *\n * @default [[MapViewDefaults.quadTreeSearchDistanceDown]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "quadTreeSearchDistanceDown?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "quadTreeSearchDistanceDown",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#quadTreeSearchDistanceUp:member",
              "docComment": "/**\n * Limits the number of reduced zoom levels (lower detail) to be searched for fallback tiles.\n *\n * When zooming in, newly elected tiles may have not yet loaded. [[MapView]] searches through the tile cache for tiles ready to be displayed in lower zoom levels. The tiles may be located shallower in the quadtree.\n *\n * To disable a cache search, set the value to `0`.\n *\n * @default [[MapViewDefaults.quadTreeSearchDistanceUp]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "quadTreeSearchDistanceUp?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "quadTreeSearchDistanceUp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#resourceComputationType:member",
              "docComment": "/**\n * Specify if the cache should be counted in tiles or in megabytes.\n *\n * @see [[MapViewDefaults.resourceComputationType]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resourceComputationType?: "
                },
                {
                  "kind": "Reference",
                  "text": "ResourceComputationType",
                  "canonicalReference": "@here/harp-mapview!ResourceComputationType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "resourceComputationType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#synchronousRendering:member",
              "docComment": "/**\n * Set to `true` to allow rendering scene synchronously.\n *\n * By calling `renderSync()` scene draws immediately, opposite to default case when `update` method requests redraw and waits for the next animation frame.\n *\n * You need to set up your own render loop controller. Event `MapViewEventNames.Update` fired when [[MapView]] requests for an redraw. E.g.: When tiles loaded asynchronously and ready for rendering.\n *\n * @note Internal `maxFps` will be overridden and may not work properly as `renderSync` intended to be called from external render loop.\n *\n * @default false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "synchronousRendering?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "synchronousRendering",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#theme:member",
              "docComment": "/**\n * The [[Theme]] used by Mapview.\n *\n * This Theme can be one of the following: - `string` : the URI of the theme file used to style this map - `Theme` : the `Theme` object already loaded - `Promise<Theme>` : the future `Theme` object - `undefined` : the theme is not yet set up, but can be set later. Rendering waits until the theme is set.\n *\n * **Note:** Layers that use a theme do not render any content until that theme is available.\n *\n * Relative URIs are resolved to full URL using the document's base URL (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n *\n * Custom URIs (of theme itself and of resources referenced by theme) may be resolved with help of [[uriResolver]].\n *\n * @see [[ThemeLoader.load]] for details how theme is loaded\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "theme?: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@here/harp-datasource-protocol!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@here/harp-datasource-protocol!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "theme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#tileCacheSize:member",
              "docComment": "/**\n * Size of a tile cache for one data source.\n *\n * @default See [[MapViewDefaults.tileCacheSize]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tileCacheSize?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tileCacheSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#tileWrappingEnabled:member",
              "docComment": "/**\n * Enable map repeat for planar projections. If `true`, map will be repeated in longitudinal direction continuously. If `false`, map will end on lon -180 & 180 deg.\n *\n * @default `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tileWrappingEnabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tileWrappingEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MapViewOptions#uriResolver:member",
              "docComment": "/**\n * Resolve `URI` referenced in `MapView` assets using this resolver.\n *\n * Use, to support application/deployment specific `URI`s into actual `URLs` that can be loaded with `fetch`.\n *\n * Example:\n * ```\n * uriResolver: new PrefixMapUriResolver({\n *     \"local://poiMasterList\": \"/assets/poiMasterList.json\",\n *        // will match only 'local//:poiMasterList' and\n *        // resolve to `/assets/poiMasterList.json`\n *     \"local://icons/\": \"/assets/icons/\"\n *        // will match only 'local//:icons/ANYPATH' (and similar) and\n *        // resolve to `/assets/icons/ANYPATH`\n * })\n * ```\n *\n * @see [[UriResolver]]  @See [[PrefixMapUriResolver]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "uriResolver?: "
                },
                {
                  "kind": "Reference",
                  "text": "UriResolver",
                  "canonicalReference": "@here/harp-utils!UriResolver:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "uriResolver",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!MapViewPoints:class",
          "docComment": "/**\n * `MapViewPoints` is a class to extend for the `\"circles\"` and `\"squares\"` [[Technique]]s to implement raycasting of [[THREE.Points]] as expected in [[MapView]], that are in screen space. It copies the behaviour of the `raycast` method in [[THREE.Points]] and dispatches it to its children classes, [[Circles]] and [[Squares]], who hold the intersection testing in the `testPoint` method. This class also has the ability to dismiss the testing via the `enableRayTesting` flag.\n *\n * Its main motivation is to handle the point styles of XYZ projects.\n *\n * @see https://github.com/mrdoob/three.js/blob/master/src/objects/Points.js\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class MapViewPoints extends "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "Points",
              "canonicalReference": "three!Points:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "MapViewPoints",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MapViewPoints#enableRayTesting:member",
              "docComment": "/**\n * This allows to discard the ray testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enableRayTesting: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enableRayTesting",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapViewPoints#raycast:member(1)",
              "docComment": "/**\n * This method is similar to the original method `raycast` in [[THREE.Points]] except that it then calls the tailored `testPoint` method in the children classes to test intersections depending on whether the points are circles or squares, which [[THREE.Points]] cannot do.\n *\n * @param raycaster - The raycaster.\n *\n * @param intersects - The array to fill with the results.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "raycast(raycaster: "
                },
                {
                  "kind": "Reference",
                  "text": "PickingRaycaster",
                  "canonicalReference": "@here/harp-mapview!PickingRaycaster:class"
                },
                {
                  "kind": "Content",
                  "text": ", intersects: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Intersection",
                  "canonicalReference": "three!Intersection:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "raycaster",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "intersects",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "raycast"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MapViewPoints#testPoint:member(1)",
              "docComment": "/**\n * Implements the intersection testing in screen space between the drawn points and the ray. The drawing of the points being different between [[Circles]] and [[Squares]], this method is implemented in these child classes.\n *\n * @param point - The point to test.\n *\n * @param screenPosition - The point position on screen.\n *\n * @param pickCoordinates - The picking position on screen.\n *\n * @param index - The index of the point in the [[THREE.Geometry]].\n *\n * @param distance - The distance between the point and the ray origin.\n *\n * @param intersects - The results array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract testPoint(point: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", screenPosition: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "three!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ", pickCoordinates: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "three!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ", index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", distance: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", intersects: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Intersection",
                  "canonicalReference": "three!Intersection:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 18,
                "endIndex": 19
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "point",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "screenPosition",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "pickCoordinates",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 10,
                    "endIndex": 11
                  }
                },
                {
                  "parameterName": "distance",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                },
                {
                  "parameterName": "intersects",
                  "parameterTypeTokenRange": {
                    "startIndex": 14,
                    "endIndex": 17
                  }
                }
              ],
              "name": "testPoint"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@here/harp-mapview!MapViewPowerPreference:enum",
          "docComment": "/**\n * Hint for the WebGL implementation on which power mode to prefer.\n *\n * @see https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.12\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum MapViewPowerPreference "
            }
          ],
          "releaseTag": "Public",
          "name": "MapViewPowerPreference",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MapViewPowerPreference.Default:member",
              "docComment": "/**\n * Default value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Default = "
                },
                {
                  "kind": "Content",
                  "text": "\"default\""
                }
              ],
              "releaseTag": "Public",
              "name": "Default",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MapViewPowerPreference.HighPerformance:member",
              "docComment": "/**\n * Maximum performance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "HighPerformance = "
                },
                {
                  "kind": "Content",
                  "text": "\"high-performance\""
                }
              ],
              "releaseTag": "Public",
              "name": "HighPerformance",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MapViewPowerPreference.LowPower:member",
              "docComment": "/**\n * Lower power mode, used to conserve energy.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "LowPower = "
                },
                {
                  "kind": "Content",
                  "text": "\"low-power\""
                }
              ],
              "releaseTag": "Public",
              "name": "LowPower",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@here/harp-mapview!MapViewUtils:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace MapViewUtils "
            }
          ],
          "releaseTag": "Public",
          "name": "MapViewUtils",
          "members": [
            {
              "kind": "Interface",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.Attitude:interface",
              "docComment": "/**\n * The anti clockwise rotation of an object along the axes of its tangent space, with itself as origin.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface Attitude "
                }
              ],
              "releaseTag": "Public",
              "name": "Attitude",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-mapview!MapViewUtils.Attitude#pitch:member",
                  "docComment": "/**\n * Rotation of the object along its horizontal axis.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "pitch: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "pitch",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-mapview!MapViewUtils.Attitude#roll:member",
                  "docComment": "/**\n * Rotation of the object along its forward axis.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "roll: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "roll",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-mapview!MapViewUtils.Attitude#yaw:member",
                  "docComment": "/**\n * Rotation of the object along its vertical axis.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "yaw: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "yaw",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.calculateDepthFromClipDistance:function(1)",
              "docComment": "/**\n * Translates a linear clip-space distance value to the actual value stored in the depth buffer. This is useful as the depth values are not stored in the depth buffer linearly, and this can lead into confusing behavior when not taken into account.\n *\n * @param clipDistance - Distance from the camera in clip space (range: [0, 1]).\n *\n * @param camera - Camera applying the perspective projection.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function calculateDepthFromClipDistance(clipDistance: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "three!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "clipDistance",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "name": "calculateDepthFromClipDistance"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.calculateDistanceFromZoomLevel:function(1)",
              "docComment": "/**\n * Calculates and returns the distance to the target point.\n *\n * @param options - Necessary subset of MapView properties to compute the distance.\n *\n * @param zoomLevel - The zoom level to get the equivalent height to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function calculateDistanceFromZoomLevel(options: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        focalLength: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ", zoomLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "zoomLevel",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "calculateDistanceFromZoomLevel"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.calculateDistanceToGroundFromZoomLevel:function(1)",
              "docComment": "/**\n * Calculates and returns the distance from the ground, which is needed to put the camera to this height, to see the size of the area that would be covered by one tile for the given zoom level.\n *\n * @param mapView - Instance of MapView.\n *\n * @param options - Subset of necessary [[MapView]] properties.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function calculateDistanceToGroundFromZoomLevel(options: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n        focalLength: number;\n        camera: THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Object3D",
                  "canonicalReference": "three!Object3D:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ", zoomLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "zoomLevel",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "calculateDistanceToGroundFromZoomLevel"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.calculateFocalLengthByVerticalFov:function(1)",
              "docComment": "/**\n * Calculates the focal length based on the vertical FOV and height.\n *\n * @param vFov - Vertical field of view in rad.\n *\n * @param height - Height of canvas in pixels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function calculateFocalLengthByVerticalFov(vFov: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vFov",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "height",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "calculateFocalLengthByVerticalFov"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.calculateFovByFocalLength:function(1)",
              "docComment": "/**\n * Calculates the vertical field of view based on the focal length and the height.\n *\n * @param focalLength - Focal length in pixels (see [[calculateFocalLengthByVerticalFov]])\n *\n * @param height - Height of canvas in pixels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function calculateFovByFocalLength(focalLength: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "focalLength",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "height",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "calculateFovByFocalLength"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.calculateHorizontalFovByVerticalFov:function(1)",
              "docComment": "/**\n * Calculates horizontal field of view for given vertical field of vision and aspect ratio.\n *\n * @param hFov - Vertical field of view in rad.\n *\n * @param aspect - Aspect ratio.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function calculateHorizontalFovByVerticalFov(vFov: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", aspect: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "vFov",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "aspect",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "calculateHorizontalFovByVerticalFov"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.calculateScreenSizeByFocalLength:function(1)",
              "docComment": "/**\n * Calculates object's screen size based on the focal length and it's camera distance.\n *\n * @param focalLength - Focal length in pixels (see [[calculateFocalLengthByVerticalFov]])\n *\n * @param distance - Object distance in world space.\n *\n * @param worldSize - Object size in world space.  @return object size in screen space.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function calculateScreenSizeByFocalLength(focalLength: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", distance: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", worldSize: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "focalLength",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "distance",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "worldSize",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "calculateScreenSizeByFocalLength"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.calculateVerticalFovByHorizontalFov:function(1)",
              "docComment": "/**\n * Calculates vertical field of view for given horizontal field of vision and aspect ratio.\n *\n * @param hFov - Horizontal field of view in rad.\n *\n * @param aspect - Aspect ratio.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function calculateVerticalFovByHorizontalFov(hFov: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", aspect: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "hFov",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "aspect",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "calculateVerticalFovByHorizontalFov"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.calculateWorldSizeByFocalLength:function(1)",
              "docComment": "/**\n * Calculates object's world size based on the focal length and it's camera distance.\n *\n * @param focalLength - Focal length in pixels (see [[calculateFocalLengthByVerticalFov]])\n *\n * @param distance - Object distance in world space.\n *\n * @param screenSize - Object size in screen space.  @return object size in world space.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function calculateWorldSizeByFocalLength(focalLength: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", distance: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", screenSize: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "focalLength",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "distance",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "screenSize",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "calculateWorldSizeByFocalLength"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.calculateZoomLevelFromDistance:function(1)",
              "docComment": "/**\n * Calculates the zoom level, which corresponds to the current distance from camera to lookAt point. Therefore the zoom level is a `float` and not an `int`. The height of the camera can be in between zoom levels. By setting the zoom level, you change the height position of the camera in away that the field of view of the camera should be able to cover one tile for the given zoom level.\n *\n * As an example for this, when you have a tile of zoom level 14 in front of the camera and you set the zoom level of the camera to 14, then you are able to see the whole tile in front of you.\n *\n * @param options - Subset of necessary [[MapView]] properties.\n *\n * @param distance - The distance in meters, which are scene units in [[MapView]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function calculateZoomLevelFromDistance(options: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        focalLength: number;\n        minZoomLevel: number;\n        maxZoomLevel: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ", distance: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "distance",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "calculateZoomLevelFromDistance"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.cameraToWorldDistance:function(1)",
              "docComment": "/**\n * Translates a linear distance value [0..1], where 1 is the distance to the far plane, into [0..cameraFar].\n *\n * @param distance - Distance from the camera (range: [0, 1]).\n *\n * @param camera - Camera applying the perspective projection.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function cameraToWorldDistance(distance: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "three!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "distance",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "name": "cameraToWorldDistance"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.estimateObject3dSize:function(1)",
              "docComment": "/**\n * Computes estimate for size of a THREE.Object3D object and its children. Shared materials and/or attributes will be counted multiple times.\n *\n * @param object - The mesh object to evaluate\n *\n * @param size - The [[MemoryUsage]] to update.\n *\n * @param visitedObjects - Optional map to store large objects that could be shared.\n *\n * @returns Estimate of object size in bytes for heap and GPU.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function estimateObject3dSize(object: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Object3D",
                  "canonicalReference": "three!Object3D:class"
                },
                {
                  "kind": "Content",
                  "text": ", parentSize?: "
                },
                {
                  "kind": "Reference",
                  "text": "MemoryUsage",
                  "canonicalReference": "@here/harp-mapview!MapViewUtils.MemoryUsage:interface"
                },
                {
                  "kind": "Content",
                  "text": ", visitedObjects?: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, boolean>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MemoryUsage",
                  "canonicalReference": "@here/harp-mapview!MapViewUtils.MemoryUsage:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "parentSize",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "visitedObjects",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  }
                }
              ],
              "name": "estimateObject3dSize"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.extractAttitude:function(1)",
              "docComment": "/**\n * Extracts yaw, pitch, and roll rotation in radians. - Yaw : Rotation around the vertical axis, counter-clockwise (as opposed to azimuth), starting north. - Pitch :Rotation around the horizontal axis. - Roll : Rotation around the view axis.\n *\n * @see https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles\n *\n * @param options - Subset of necessary [[MapView]] properties.\n *\n * @param object - The [[THREE.Object3D]] instance to extract the rotations from.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function extractAttitude(options: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ", object: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Object3D",
                  "canonicalReference": "three!Object3D:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Attitude",
                  "canonicalReference": "@here/harp-mapview!MapViewUtils.Attitude:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  }
                }
              ],
              "name": "extractAttitude"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.extractCameraTilt:function(1)",
              "docComment": "/**\n * Extracts current camera tilt angle in radians.\n *\n * @deprecated\n *\n * Use MapView.tilt\n *\n * @param camera - The [[Camera]] in use.\n *\n * @param projection - The [[Projection]] used to convert between geo and world coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function extractCameraTilt(camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "three!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": ", projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "extractCameraTilt"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.extractSphericalCoordinatesFromLocation:function(1)",
              "docComment": "/**\n * Gets the spherical coordinates in radian of the object to the coordinates of `point`.\n *\n * Note: this method can be used to get the direction that an object points to, when `location` is the target of that object, by adding PI to it. Otherwise it only returns the spherical coordinates of `object` in the tangent space of `location`.\n *\n * @param mapView - The [[MapView]] instance to consider.\n *\n * @param object - The object to get the coordinates from.\n *\n * @param location - The reference point.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function extractSphericalCoordinatesFromLocation(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ", object: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Object3D",
                  "canonicalReference": "three!Object3D:class"
                },
                {
                  "kind": "Content",
                  "text": ", location: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        azimuth: number;\n        tilt: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "location",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "extractSphericalCoordinatesFromLocation"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.extractTiltAngleFromLocation:function(1)",
              "docComment": "/**\n * Gets the tilt angle (in radians) of the object relative to the coordinates of `location`.\n *\n * Note: this method can be used to get the direction that an object points to, when `location` is the target of that object, by adding PI to it. Otherwise it only returns the tilt angle (in radians) of `object` in the tangent space of `location`.\n *\n * @param projection - The [[Projection]] used when converting from geo to world coordinates.\n *\n * @param object - The object to get the coordinates from.\n *\n * @param location - The reference point.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function extractTiltAngleFromLocation(projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ", object: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Object3D",
                  "canonicalReference": "three!Object3D:class"
                },
                {
                  "kind": "Content",
                  "text": ", location: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "location",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "extractTiltAngleFromLocation"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.getBrowserLanguages:function(1)",
              "docComment": "/**\n * Gets language list used by the browser\n *\n * @returns Array of iso language codes\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getBrowserLanguages(): "
                },
                {
                  "kind": "Content",
                  "text": "string[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getBrowserLanguages"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.getCameraCoordinatesFromTargetCoordinates:function(1)",
              "docComment": "/**\n * @deprecated\n *\n * use getCameraPositionFromTargetCoordinates instead\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getCameraCoordinatesFromTargetCoordinates(targetCoordinates: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ", distance: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", yawDeg: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", pitchDeg: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "targetCoordinates",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "distance",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "yawDeg",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "pitchDeg",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "getCameraCoordinatesFromTargetCoordinates"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.getCameraFrustumPlanes:function(1)",
              "docComment": "/**\n * Get perspective camera frustum planes distances.  @return all plane distances in helper object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getCameraFrustumPlanes(camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "PerspectiveCamera",
                  "canonicalReference": "three!PerspectiveCamera:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        left: number;\n        right: number;\n        top: number;\n        bottom: number;\n        near: number;\n        far: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "getCameraFrustumPlanes"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.getCameraPositionFromTargetCoordinates:function(1)",
              "docComment": "/**\n * Returns the [[GeoCoordinates]] of the camera, given its target coordinates on the map and its zoom, yaw and pitch.\n *\n * @param targetCoordinates - Coordinates of the center of the view.\n *\n * @param distance - Distance to the target in meters.\n *\n * @param yawDeg - Camera yaw in degrees.\n *\n * @param pitchDeg - Camera pitch in degrees.\n *\n * @param projection - Active MapView, needed to get the camera fov and map projection.\n *\n * @param result - Optional output vector.\n *\n * @returns Camera position in world space.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getCameraPositionFromTargetCoordinates(targetCoordinates: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ", distance: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", yawDeg: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", pitchDeg: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ", result?: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "targetCoordinates",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "distance",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "yawDeg",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "pitchDeg",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 13
                  }
                }
              ],
              "name": "getCameraPositionFromTargetCoordinates"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.getCameraRotationAtTarget:function(1)",
              "docComment": "/**\n * Computes the rotation of the camera according to yaw and pitch in degrees. The computations hinge on the current `projection` and `target`, because yaw and pitch are defined in tangent space of the target point.\n *\n * **Note:** `yaw == 0 && pitch == 0` will north up the map and you will look downwards onto the map.\n *\n * @param projection - Current projection.\n *\n * @param target - The camera target.\n *\n * @param yawDeg - Yaw in degrees, counter-clockwise (as opposed to azimuth), starting north.\n *\n * @param pitchDeg - Pitch in degrees.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getCameraRotationAtTarget(projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ", yawDeg: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", pitchDeg: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result?: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "three!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "three!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "yawDeg",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "pitchDeg",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 11
                  }
                }
              ],
              "name": "getCameraRotationAtTarget"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.getGeoTargetFromCamera:function(1)",
              "docComment": "/**\n * Calculate target (focus) point geo-coordinates for given camera.  @see getTargetPositionFromCamera\n *\n * @deprecated\n *\n * This function is for internal use only and will be removed in the future. Use MapView.worldTarget instead.\n *\n * @param camera - The camera looking on target point.\n *\n * @param projection - The geo-projection used.\n *\n * @param elevation - Optional elevation above (or below) sea level measured in world units.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getGeoTargetFromCamera(camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "three!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": ", projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ", elevation?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "elevation",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "getGeoTargetFromCamera"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.getWorldTargetFromCamera:function(1)",
              "docComment": "/**\n * Calculate target (focus) point world coordinates for given camera position and orientation.\n *\n * @deprecated\n *\n * This function is for internal use only and will be removed in the future.\n *\n * @param camera - The camera looking on target point.\n *\n * @param projection - The geo-projection used.\n *\n * @param elevation - Optional elevation above (or below) sea level in world units.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getWorldTargetFromCamera(camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "three!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": ", projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ", elevation?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "elevation",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "getWorldTargetFromCamera"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.mapViewIsLoading:function(1)",
              "docComment": "/**\n * Check if tiles or other content is currently being loaded.\n *\n * This method can be removed once HARP-7932 is implemented.\n *\n * @returns `true` if MapView has visible tiles or other content that is being loaded.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function mapViewIsLoading(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "mapViewIsLoading"
            },
            {
              "kind": "Variable",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.MAX_TILT_DEG:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MAX_TILT_DEG = 89"
                }
              ],
              "releaseTag": "Public",
              "name": "MAX_TILT_DEG",
              "variableTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.MAX_TILT_RAD:var",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MAX_TILT_RAD: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                }
              ],
              "releaseTag": "Public",
              "name": "MAX_TILT_RAD",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Interface",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.MemoryUsage:interface",
              "docComment": "/**\n * Describes estimated usage of memory on heap and GPU.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface MemoryUsage "
                }
              ],
              "releaseTag": "Public",
              "name": "MemoryUsage",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-mapview!MapViewUtils.MemoryUsage#gpuSize:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "gpuSize: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "gpuSize",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@here/harp-mapview!MapViewUtils.MemoryUsage#heapSize:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "heapSize: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "heapSize",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.orbitFocusPoint:function(1)",
              "docComment": "/**\n * Orbits the camera around the focus point of the camera.\n *\n * @param mapView - The [[MapView]] instance to manipulate.\n *\n * @param deltaAzimuthDeg - Delta azimuth in degrees.\n *\n * @param deltaTiltDeg - Delta tilt in degrees.\n *\n * @param maxTiltAngleRad - The maximum tilt between the camera and its target in radian.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function orbitFocusPoint(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ", deltaAzimuthDeg: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", deltaTiltDeg: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", maxTiltAngleRad?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "deltaAzimuthDeg",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "deltaTiltDeg",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "maxTiltAngleRad",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "orbitFocusPoint"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.panCameraAboveFlatMap:function(1)",
              "docComment": "/**\n * Pans the camera according to the projection.\n *\n * @param mapView - Instance of MapView.\n *\n * @param xOffset - In world space. Value > 0 will pan the map to the right, value < 0 will pan the map to the left in default camera orientation.\n *\n * @param yOffset - In world space. Value > 0 will pan the map upwards, value < 0 will pan the map downwards in default camera orientation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function panCameraAboveFlatMap(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ", offsetX: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", offsetY: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "offsetX",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "offsetY",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "panCameraAboveFlatMap"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.panCameraAroundGlobe:function(1)",
              "docComment": "/**\n * The function doing a pan in the spherical space when [[MapView]]'s active [[ProjectionType]] is spherical. In other words, the function that rotates the camera around the globe.\n *\n * @param mapView - MapView instance.\n *\n * @param fromWorld - Start vector representing the scene position of a geolocation.\n *\n * @param toWorld - End vector representing the scene position of a geolocation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function panCameraAroundGlobe(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ", fromWorld: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", toWorld: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "fromWorld",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "toWorld",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  }
                }
              ],
              "name": "panCameraAroundGlobe"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.rayCastGeoCoordinates:function(1)",
              "docComment": "/**\n * Casts a ray in NDC space from the current view of the camera and returns the intersection point of that ray against the map in geo coordinates. The return value can be `null` when the raycast is above the horizon.\n *\n * @param mapView - Instance of MapView.\n *\n * @param pointOnScreenXNDC - Abscissa in NDC space.\n *\n * @param pointOnScreenYNDC - Ordinate in NDC space.\n *\n * @returns Intersection geo coordinates, or `null` if raycast is above the horizon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rayCastGeoCoordinates(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ", pointOnScreenXinNDC: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", pointOnScreenYinNDC: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "pointOnScreenXinNDC",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "pointOnScreenYinNDC",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "rayCastGeoCoordinates"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.rayCastWorldCoordinates:function(1)",
              "docComment": "/**\n * Casts a ray in NDC space from the current map view and returns the intersection point of that ray wih the map in world space.\n *\n * @param mapView - Instance of MapView.\n *\n * @param pointOnScreenXinNDC - X coordinate in NDC space.\n *\n * @param pointOnScreenYinNDC - Y coordinate in NDC space.\n *\n * @param elevation - Optional param used to offset the ground plane. Used when wanting to pan based on a plane at some altitude. Necessary for example when panning with terrain.\n *\n * @returns Intersection coordinates, or `null` if raycast failed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rayCastWorldCoordinates(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ", pointOnScreenXinNDC: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", pointOnScreenYinNDC: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", elevation?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "pointOnScreenXinNDC",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "pointOnScreenYinNDC",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "elevation",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "rayCastWorldCoordinates"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.rotate:function(1)",
              "docComment": "/**\n * Rotates the camera by the given delta yaw and delta pitch. The pitch will be clamped to the maximum possible tilt to the new target, and under the horizon in sphere projection.\n *\n * @param mapView - The [[MapView]] instance in use.\n *\n * @param deltaYawDeg - Delta yaw in degrees.\n *\n * @param deltaPitchDeg - Delta pitch in degrees.\n *\n * @param maxTiltAngleRad - Max tilt angle in radians.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function rotate(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ", deltaYawDeg: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", deltaPitchDeg?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", maxTiltAngleRad?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "deltaYawDeg",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "deltaPitchDeg",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "maxTiltAngleRad",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "rotate"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.setRotation:function(1)",
              "docComment": "/**\n * Sets the rotation of the camera according to yaw and pitch in degrees. The computations hinge on the current projection and `geoCenter`, because yaw and pitch are defined in tangent space. In particular, `MapView#geoCenter` needs to be set before calling `setRotation`.\n *\n * **Note:** `yaw == 0 && pitch == 0` will north up the map and you will look downwards onto the map.\n *\n * @param mapView - Instance of MapView.\n *\n * @param yawDeg - Yaw in degrees, counter-clockwise (as opposed to azimuth), starting north.\n *\n * @param pitchDeg - Pitch in degrees.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function setRotation(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ", yawDeg: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", pitchDeg: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "yawDeg",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "pitchDeg",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "setRotation"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!MapViewUtils.zoomOnTargetPosition:function(1)",
              "docComment": "/**\n * Zooms and moves the map in such a way that the given target position remains at the same position after the zoom.\n *\n * @param mapView - Instance of MapView.\n *\n * @param targetNDCx - Target x position in NDC space.\n *\n * @param targetNDCy - Target y position in NDC space.\n *\n * @param zoomLevel - The desired zoom level.\n *\n * @param maxTiltAngle - The maximum tilt angle to comply by, in globe projection, in radian.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function zoomOnTargetPosition(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ", targetNDCx: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", targetNDCy: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zoomLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", maxTiltAngle?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "targetNDCx",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "targetNDCy",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "zoomLevel",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "maxTiltAngle",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "zoomOnTargetPosition"
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-mapview!MaterialConstructor:type",
          "docComment": "/**\n * Generic material type constructor.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MaterialConstructor = "
            },
            {
              "kind": "Content",
              "text": "new (params?: {}) => THREE."
            },
            {
              "kind": "Reference",
              "text": "Material",
              "canonicalReference": "three!Material:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MaterialConstructor",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!MaterialOptions:interface",
          "docComment": "/**\n * The structure of the options to pass into [[createMaterial]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MaterialOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "MaterialOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MaterialOptions#env:member",
              "docComment": "/**\n * Environment used to evaluate dynamic technique attributes.\n *\n * Usually [[MapView.mapEnv]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "env: "
                },
                {
                  "kind": "Reference",
                  "text": "Env",
                  "canonicalReference": "@here/harp-datasource-protocol!Env:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "env",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MaterialOptions#fog:member",
              "docComment": "/**\n * `RawShaderMaterial` instances need to know about the fog at instantiation in order to avoid recompiling them manually later (ThreeJS does not update fog for `RawShaderMaterial`s).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fog?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fog",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MaterialOptions#shadowsEnabled:member",
              "docComment": "/**\n * Whether shadows are enabled or not, this is required because we change the material used.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shadowsEnabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shadowsEnabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MaterialOptions#skipExtraProps:member",
              "docComment": "/**\n * Properties to skip.\n *\n * @see [[applyTechniqueToMaterial]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "skipExtraProps?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "skipExtraProps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!MaterialOptions#technique:member",
              "docComment": "/**\n * The shader [[Technique]] to choose.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "technique: "
                },
                {
                  "kind": "Reference",
                  "text": "Technique",
                  "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "technique",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!MSAARenderPass:class",
          "docComment": "/**\n * [[MapView]]'s MSAA implementation. MSAA stands for Multi Sampling Anti-Aliasing, and its concept is to provide a rendering engine with additional color values for each pixel, so they can include the missing bits between them on a screen. WebGL already comes with a native MSAA implementation with four samples. Because of its native nature, it is more efficient and one may not want to use MapView's MSAA implementation when these four samples are satisfying. However in some situations they are not: on low devices, MSAA can impact the framerate and we may desire to reduce the number of samples at runtime. On the other hand, when the interaction stops, the engine also stops rendering the map, and because a map relies on many line-like patterns, aliasing can then turn very noticeable. In such static renders, the number of samples could be dramatically increased on a last frame to render.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class MSAARenderPass extends "
            },
            {
              "kind": "Reference",
              "text": "Pass",
              "canonicalReference": "@here/harp-mapview!Pass:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "MSAARenderPass",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!MSAARenderPass:constructor(1)",
              "docComment": "/**\n * The constructor for `MSAARenderPass`. It builds an internal scene with a camera looking at a quad.\n *\n * @param m_scene - The scene to render.\n *\n * @param m_camera - The camera to render the scene through.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MSAARenderPass#dispose:member(1)",
              "docComment": "/**\n * Releases all used resources.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispose(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "dispose"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MSAARenderPass.OffsetVectors:member",
              "docComment": "/**\n * The list of offsets to apply to the camera, per sampling level, adapted from :\n *\n * @see https://msdn.microsoft.com/en-us/library/windows/desktop/ff476218%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly OffsetVectors: "
                },
                {
                  "kind": "Content",
                  "text": "number[][][]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "OffsetVectors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MSAARenderPass#render:member(1)",
              "docComment": "/**\n * The render function of `MSAARenderPass`. At each call of this method, and for each sample, the [[MapView]] camera provided in the `render` method is offset within the dimension of a pixel on screen. It then renders the whole scene with this offset to a local `WebGLRenderTarget` instance, via a `WebGLRenderer` instance. Finally the local camera created in the constructor shoots the quad and renders to the write buffer or to the frame buffer. The quad material's opacity is modified so the renders can accumulate in the targetted buffer.\n *\n * The number of samples can be modified at runtime through the enum [[SamplingLevel]].\n *\n * If there is no further pass, the [[Pass.renderToScreen]] flag can be set to `true` to output directly to the framebuffer.\n *\n * @param renderer - The ThreeJS WebGLRenderer instance to render the scene with.\n *\n * @param scene - The ThreeJS Scene instance to render the scene with.\n *\n * @param camera - The ThreeJS Camera instance to render the scene with.\n *\n * @param writeBuffer - A ThreeJS WebGLRenderTarget instance to render the scene to.\n *\n * @param readBuffer - A ThreeJS WebGLRenderTarget instance to render the scene.\n *\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(renderer: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "WebGLRenderer",
                  "canonicalReference": "three!WebGLRenderer:class"
                },
                {
                  "kind": "Content",
                  "text": ", scene: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Scene",
                  "canonicalReference": "three!Scene:class"
                },
                {
                  "kind": "Content",
                  "text": ", camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "PerspectiveCamera",
                  "canonicalReference": "three!PerspectiveCamera:class"
                },
                {
                  "kind": "Content",
                  "text": " | THREE."
                },
                {
                  "kind": "Reference",
                  "text": "OrthographicCamera",
                  "canonicalReference": "three!OrthographicCamera:class"
                },
                {
                  "kind": "Content",
                  "text": ", writeBuffer: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "WebGLRenderTarget",
                  "canonicalReference": "three!WebGLRenderTarget:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ", readBuffer: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "WebGLRenderTarget",
                  "canonicalReference": "three!WebGLRenderTarget:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 19,
                "endIndex": 20
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "renderer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "scene",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 11
                  }
                },
                {
                  "parameterName": "writeBuffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 15
                  }
                },
                {
                  "parameterName": "readBuffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 16,
                    "endIndex": 18
                  }
                }
              ],
              "name": "render"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MSAARenderPass#samplingLevel:member",
              "docComment": "/**\n * The sampling level determines the number of samples that will be performed per frame. Renders will happen `2 ^ samplingLevel` time(s). `samplingLevel` stands between `0` and `5`. Therefore there can be between 1 and 32 samples.\n *\n * @default `SamplingLevel.Level_1`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "samplingLevel: "
                },
                {
                  "kind": "Reference",
                  "text": "MSAASampling",
                  "canonicalReference": "@here/harp-mapview!MSAASampling:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "samplingLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MSAARenderPass#setSize:member(1)",
              "docComment": "/**\n * Resize the internal render target to match the new size specified.\n *\n * @param width - New width to apply to the render target.\n *\n * @param height - New height to apply to the render target.\n *\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSize(width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "width",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "height",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setSize"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@here/harp-mapview!MSAASampling:enum",
          "docComment": "/**\n * This enum represents the sampling level to apply to a [[MSAARenderPass]] instance. At level 0, only one sample is performed, which is like disabling the MSAA pass.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum MSAASampling "
            }
          ],
          "releaseTag": "Public",
          "name": "MSAASampling",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MSAASampling.Level_0:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "\"Level_0\" = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Level_0",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MSAASampling.Level_1:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "\"Level_1\" = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Level_1",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MSAASampling.Level_2:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "\"Level_2\" = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "Level_2",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MSAASampling.Level_3:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "\"Level_3\" = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "Level_3",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MSAASampling.Level_4:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "\"Level_4\" = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Public",
              "name": "Level_4",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!MSAASampling.Level_5:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "\"Level_5\" = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "releaseTag": "Public",
              "name": "Level_5",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!MultiStageTimer:class",
          "docComment": "/**\n * Measures a sequence of connected events, such as multiple processing stages in a function. Each stage is identified with a timer name, that must be a valid timer in the statistics object. Additionally, all timers within a `MultiStageTimer` must be unique.\n *\n * Internally, the `MultiStageTimer` manages a list of timers where at the end of each stage, one timer stops and the next timer starts.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class MultiStageTimer "
            }
          ],
          "releaseTag": "Public",
          "name": "MultiStageTimer",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!MultiStageTimer:constructor(1)",
              "docComment": "/**\n * Defines the `MultiStageTimer` with a list of timer names that represent its stages.\n *\n * @param statistics - The statistics object that manages the timers.\n *\n * @param name - Name of this `MultiStageTimer`.\n *\n * @param stages - List of timer names.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(statistics: "
                },
                {
                  "kind": "Reference",
                  "text": "Statistics",
                  "canonicalReference": "@here/harp-mapview!Statistics:class"
                },
                {
                  "kind": "Content",
                  "text": ", name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", stages: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "statistics",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "stages",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MultiStageTimer#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MultiStageTimer#reset:member(1)",
              "docComment": "/**\n * Resets the timers across all stages.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reset(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "reset"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MultiStageTimer#stage:member",
              "docComment": "/**\n * Gets the current stage.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get stage(): "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset stage(stage: string | undefined);"
                }
              ],
              "releaseTag": "Public",
              "name": "stage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MultiStageTimer#stages:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stages: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stages",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MultiStageTimer#start:member(1)",
              "docComment": "/**\n * Starts the `MultiStageTimer` at its first stage.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "start(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "start"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!MultiStageTimer#stop:member(1)",
              "docComment": "/**\n * Stops the `MultiStageTimer`. Returns the measurement of the last stage, which may be `undefined` if not all stages started.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stop(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "stop"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!MultiStageTimer#value:member",
              "docComment": "/**\n * Gets the timer value for the last stage. If the `MultiStageTimer` did not finish its last stage, the value is `undefined`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get value(): "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!Pass:class",
          "docComment": "/**\n * The base class to extend for further passes in [[MapView]], like the [[MSAARenderPass]], possibly a text pass, an AO effect etc. `Pass` provides the core logic for both : - render passes (proper scene renders), - and shader passes (quad renders, i.e. effects added on top of the render output as a postprocess).\n *\n * Even some shader passes still actually fall within the render pass category as they need to re-render the scene to then deduce an effect, such as masking, AO, DoF etc. Others just need the previous input image to apply a shader on top of it, as for bloom or NVIDIA's FXAA for example. These only are proper shader passes.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Pass implements "
            },
            {
              "kind": "Reference",
              "text": "IPass",
              "canonicalReference": "@here/harp-mapview!IPass:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Pass",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Pass#enabled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Pass#render:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "render(renderer: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "WebGLRenderer",
                  "canonicalReference": "three!WebGLRenderer:class"
                },
                {
                  "kind": "Content",
                  "text": ", scene: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Scene",
                  "canonicalReference": "three!Scene:class"
                },
                {
                  "kind": "Content",
                  "text": ", camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "three!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": ", writeBuffer: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "WebGLRenderTarget",
                  "canonicalReference": "three!WebGLRenderTarget:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ", readBuffer: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "WebGLRenderTarget",
                  "canonicalReference": "three!WebGLRenderTarget:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ", delta?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 20,
                "endIndex": 21
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "renderer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "scene",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "writeBuffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 10,
                    "endIndex": 13
                  }
                },
                {
                  "parameterName": "readBuffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 14,
                    "endIndex": 17
                  }
                },
                {
                  "parameterName": "delta",
                  "parameterTypeTokenRange": {
                    "startIndex": 18,
                    "endIndex": 19
                  }
                }
              ],
              "name": "render"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Pass#renderToScreen:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderToScreen: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderToScreen",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Pass#setSize:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setSize(width: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", height: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "width",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "height",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setSize"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!PerformanceStatistics:class",
          "docComment": "/**\n * Performance measurement central. Maintains the current [[FrameStats]], which holds all individual performance numbers.\n *\n * Implemented as an instance for easy access.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class PerformanceStatistics "
            }
          ],
          "releaseTag": "Public",
          "name": "PerformanceStatistics",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!PerformanceStatistics:constructor(1)",
              "docComment": "/**\n * Creates an instance of PerformanceStatistics. Overrides the current `instance`.\n *\n * @param enabled - If `false` the performance values will not be stored.\n *\n * @param maxNumFrames - The maximum number of frames that are to be stored.  @memberof PerformanceStatistics\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(enabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ", maxNumFrames?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "enabled",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "maxNumFrames",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PerformanceStatistics#addMemoryInfo:member(1)",
              "docComment": "/**\n * Add memory statistics to the current frame if available.  @note Currently only supported on Chrome\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addMemoryInfo(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "addMemoryInfo"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PerformanceStatistics#addWebGLInfo:member(1)",
              "docComment": "/**\n * Add the render state information from [[THREE.WebGLInfo]] to the current frame.\n *\n * @param webGlInfo - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addWebGLInfo(webGlInfo: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "WebGLInfo",
                  "canonicalReference": "three!WebGLInfo:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "webGlInfo",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "addWebGLInfo"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!PerformanceStatistics#appResults:member",
              "docComment": "/**\n * Additional results stored for the current application run, not per frame. Only the last value is stored.\n *\n * @type {(Map<string, number>)}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly appResults: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "appResults",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PerformanceStatistics#clear:member(1)",
              "docComment": "/**\n * Clears all settings, all stored frame events as well as the current frame values.\n *\n * @memberof PerformanceStatistics\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clear"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PerformanceStatistics#clearFrames:member(1)",
              "docComment": "/**\n * Clears only all stored frame events as well as the current frame values.\n *\n * @memberof PerformanceStatistics\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearFrames(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clearFrames"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!PerformanceStatistics#configs:member",
              "docComment": "/**\n * Additional configuration values stored for the current application run, not per frame. Only the last value is stored.\n *\n * @type {(Map<string, string>)}  @memberof PerformanceStatistics\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly configs: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "configs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!PerformanceStatistics#currentFrame:member",
              "docComment": "/**\n * Current frame statistics. Contains all values for the current frame. Will be cleared when [[PerformanceStatistics#storeFrameInfo]] is called.\n *\n * @type {FrameStats}  @memberof PerformanceStatistics\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly currentFrame: "
                },
                {
                  "kind": "Reference",
                  "text": "FrameStats",
                  "canonicalReference": "@here/harp-mapview!FrameStats:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "currentFrame",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!PerformanceStatistics#enabled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!PerformanceStatistics#frameEvents:member",
              "docComment": "/**\n * @ignore Only exported for testing.\n *\n * Return the array of frame events.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get frameEvents(): "
                },
                {
                  "kind": "Reference",
                  "text": "FrameStatsArray",
                  "canonicalReference": "@here/harp-mapview!FrameStatsArray:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "frameEvents",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PerformanceStatistics#getAsPlainObject:member(1)",
              "docComment": "/**\n * Convert to a plain object that can be serialized. Required to copy the test results over to nightwatch.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAsPlainObject(onlyLastFrame?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "onlyLastFrame",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getAsPlainObject"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PerformanceStatistics#getAsSimpleFrameStatistics:member(1)",
              "docComment": "/**\n * Convert to a plain object that can be serialized. Required to copy the test results over to nightwatch.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAsSimpleFrameStatistics(onlyLastFrame?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "SimpleFrameStatistics",
                  "canonicalReference": "@here/harp-mapview!SimpleFrameStatistics:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "onlyLastFrame",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getAsSimpleFrameStatistics"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PerformanceStatistics#getLastFrameStatistics:member(1)",
              "docComment": "/**\n * Convert the last frame values to a plain object that can be serialized. Required to copy the test results over to nightwatch.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getLastFrameStatistics(): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getLastFrameStatistics"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!PerformanceStatistics.instance:member",
              "docComment": "/**\n * Global instance to the instance. The current instance can be overridden by creating a new `PerformanceStatistics`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static get instance(): "
                },
                {
                  "kind": "Reference",
                  "text": "PerformanceStatistics",
                  "canonicalReference": "@here/harp-mapview!PerformanceStatistics:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "instance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!PerformanceStatistics#isFull:member",
              "docComment": "/**\n * Returns `true` when the maximum number of storable frames is reached.\n *\n * @type {boolean}  @memberof PerformanceStatistics\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get isFull(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isFull",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PerformanceStatistics#log:member(1)",
              "docComment": "/**\n * Logs all values to the logger.\n *\n * @param header - Optional header line.\n *\n * @param footer - Optional footer line.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "log(header?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", footer?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "header",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "footer",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "log"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!PerformanceStatistics#maxNumFrames:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxNumFrames: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxNumFrames",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PerformanceStatistics#storeAndClearFrameInfo:member(1)",
              "docComment": "/**\n * Stores the current frame events into the array of events and clears all values.\n *\n * @returns {boolean} Returns `false` if the maximum number of storable frames has been reached.  @memberof PerformanceStatistics\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "storeAndClearFrameInfo(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "storeAndClearFrameInfo"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@here/harp-mapview!PickObjectType:enum",
          "docComment": "/**\n * Describes the general type of a picked object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum PickObjectType "
            }
          ],
          "releaseTag": "Public",
          "name": "PickObjectType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!PickObjectType.Area:member",
              "docComment": "/**\n * An area object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Area = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "Area",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!PickObjectType.Icon:member",
              "docComment": "/**\n * The Icon of a [[TextElement]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Icon = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "releaseTag": "Public",
              "name": "Icon",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!PickObjectType.Line:member",
              "docComment": "/**\n * A line object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Line = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "Line",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!PickObjectType.Object3D:member",
              "docComment": "/**\n * Any general 3D object, for example, a landmark.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Object3D = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "releaseTag": "Public",
              "name": "Object3D",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!PickObjectType.Point:member",
              "docComment": "/**\n * A point object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Point = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Point",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!PickObjectType.Text:member",
              "docComment": "/**\n * The text part of a [[TextElement]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Text = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Public",
              "name": "Text",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!PickObjectType.Unspecified:member",
              "docComment": "/**\n * Unspecified.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Unspecified = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Unspecified",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!PickResult:interface",
          "docComment": "/**\n * A general pick result. You can access the details of a picked geometry from the property `intersection`, which is available if a geometry was hit. If a road was hit, a [[RoadPickResult]] is returned, which has additional information, but no `intersection`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PickResult "
            }
          ],
          "releaseTag": "Public",
          "name": "PickResult",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PickResult#distance:member",
              "docComment": "/**\n * Distance from the camera to the picking point; used to determine the closest object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "distance: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "distance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PickResult#featureId:member",
              "docComment": "/**\n * An optional feature ID of the picked object; typically applies to the Optimized Map Vector (OMV) format.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "featureId?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "featureId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PickResult#intersection:member",
              "docComment": "/**\n * Defined for geometry only.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "intersection?: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Intersection",
                  "canonicalReference": "three!Intersection:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "intersection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PickResult#point:member",
              "docComment": "/**\n * A 2D point in screen coordinates, or a 3D point in world coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "point: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "three!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": " | THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "point",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PickResult#technique:member",
              "docComment": "/**\n * Defined for roads or if `enableTechniqueInfo` option is enabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "technique?: "
                },
                {
                  "kind": "Reference",
                  "text": "Technique",
                  "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "technique",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PickResult#type:member",
              "docComment": "/**\n * General type of object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Reference",
                  "text": "PickObjectType",
                  "canonicalReference": "@here/harp-mapview!PickObjectType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PickResult#userData:member",
              "docComment": "/**\n * Optional user data that has been defined in the picked object. This object points directly to information contained in the original [[TileFeatureData]] stored in [[MapView]], and should not be modified.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "userData?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "userData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!PoiInfo:interface",
          "docComment": "/**\n * Additional information for an icon that is to be rendered along with a [[TextElement]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PoiInfo "
            }
          ],
          "releaseTag": "Public",
          "name": "PoiInfo",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#computedHeight:member",
              "docComment": "/**\n * @hidden Should be computed during loading/initializing of `ImageTexture`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "computedHeight?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "computedHeight",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#computedWidth:member",
              "docComment": "/**\n * @hidden Should be computed during loading/initializing of `ImageTexture`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "computedWidth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "computedWidth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#featureId:member",
              "docComment": "/**\n * ID to identify the (POI) icon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "featureId?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "featureId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#iconBrightness:member",
              "docComment": "/**\n * Icon brightness.\n *\n * @see [[MarkerTechniqueParams.iconBrightness]];\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconBrightness?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconBrightness",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#iconColor:member",
              "docComment": "/**\n * Icon color override\n *\n * @see [[MarkerTechniqueParams.iconColor]];\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconColor?: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Color",
                  "canonicalReference": "three!Color:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconColor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#iconIsOptional:member",
              "docComment": "/**\n * If true, the text will appear even if the icon cannot be rendered because of missing icon graphics. Defaults to `true`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconIsOptional?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconIsOptional",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#iconMaxZoomLevel:member",
              "docComment": "/**\n * Maximum zoomLevel at which to display the label icon. No default.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconMaxZoomLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconMaxZoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#iconMinZoomLevel:member",
              "docComment": "/**\n * Minimum zoomLevel at which to display the label icon. No default.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iconMinZoomLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "iconMinZoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#imageItem:member",
              "docComment": "/**\n * @hidden Direct access to [[ImageItem]] once it is resolved.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageItem?: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageItem",
                  "canonicalReference": "@here/harp-mapview!ImageItem:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageItem",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#imageTexture:member",
              "docComment": "/**\n * @hidden Direct access to [[ImageTexture]] once it is resolved.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageTexture?: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageTexture",
                  "canonicalReference": "@here/harp-datasource-protocol!ImageTexture:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageTexture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#imageTextureName:member",
              "docComment": "/**\n * Name of the [[ImageTexture]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "imageTextureName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "imageTextureName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#isValid:member",
              "docComment": "/**\n * If isValid is `false`, the icon will no longer be placed or rendered. The reason may be a missing resource.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isValid?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isValid",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#mayOverlap:member",
              "docComment": "/**\n * If `true`, icon is allowed to overlap other labels or icons of lower priority.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mayOverlap?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mayOverlap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#poiName:member",
              "docComment": "/**\n * Name of the POI description in the [[PoiTable]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "poiName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "poiName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#poiRenderBatch:member",
              "docComment": "/**\n * @hidden Internal reference to a render batch, made up of all icons that use the same Material.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "poiRenderBatch?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "poiRenderBatch",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#poiTableName:member",
              "docComment": "/**\n * Name of the POI table [[PoiTable]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "poiTableName?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "poiTableName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#renderOrder:member",
              "docComment": "/**\n * @hidden Computed from owning [[TextElement]]. Value is set when `PoiInfo` is assigned to [[TextElement]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderOrder?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderOrder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#renderTextDuringMovements:member",
              "docComment": "/**\n * @hidden If false, text will not be rendered during camera movements. Defaults to `true`;\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderTextDuringMovements?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderTextDuringMovements",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#reserveSpace:member",
              "docComment": "/**\n * If `true`, icon will reserve screen space, other markers of lower priority will not be able to overlap.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reserveSpace?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "reserveSpace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#shieldGroupIndex:member",
              "docComment": "/**\n * @hidden Layout help: A shield group is for all [[LineMarker]]s that have the same icon and text, making them the same road shield icon.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shieldGroupIndex?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shieldGroupIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#stackMode:member",
              "docComment": "/**\n * Specify stack mode. Defaults to `ShowInStack`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stackMode?: "
                },
                {
                  "kind": "Reference",
                  "text": "PoiStackMode",
                  "canonicalReference": "@here/harp-datasource-protocol!PoiStackMode:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "stackMode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#technique:member",
              "docComment": "/**\n * Technique defining the POI or LineMarker\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "technique: "
                },
                {
                  "kind": "Reference",
                  "text": "PoiTechnique",
                  "canonicalReference": "@here/harp-datasource-protocol!PoiTechnique:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "LineMarkerTechnique",
                  "canonicalReference": "@here/harp-datasource-protocol!LineMarkerTechnique:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "technique",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#textElement:member",
              "docComment": "/**\n * Reference back to owning [[TextElement]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textElement: "
                },
                {
                  "kind": "Reference",
                  "text": "TextElement",
                  "canonicalReference": "@here/harp-mapview!TextElement:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textElement",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#textIsOptional:member",
              "docComment": "/**\n * If true, the text icon will appear even if the text part is blocked by other labels. Defaults to `false`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textIsOptional?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textIsOptional",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#textMaxZoomLevel:member",
              "docComment": "/**\n * Maximum zoomLevel at which to display the label text. No default.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textMaxZoomLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textMaxZoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#textMinZoomLevel:member",
              "docComment": "/**\n * Minimum zoomLevel at which to display the label text. No default.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textMinZoomLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textMinZoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PoiInfo#uvBox:member",
              "docComment": "/**\n * @hidden Should be computed during loading/initializing of `ImageTexture`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "uvBox?: "
                },
                {
                  "kind": "Reference",
                  "text": "Math2D.UvBox",
                  "canonicalReference": "@here/harp-utils!Math2D.UvBox:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "uvBox",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-mapview!poiIsRenderable:function(1)",
          "docComment": "/**\n * Return 'true' if the POI has been successfully prepared for rendering.\n *\n * @param poiInfo - PoiInfo containing information for rendering the POI icon.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function poiIsRenderable(poiInfo: "
            },
            {
              "kind": "Reference",
              "text": "PoiInfo",
              "canonicalReference": "@here/harp-mapview!PoiInfo:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "poiInfo",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "poiIsRenderable"
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!PoiManager:class",
          "docComment": "/**\n * POI manager class, responsible for loading the [[PoiGeometry]] objects from the [[DecodedTile]], and preparing them for rendering. Also loads and manages the texture atlases for the icons.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class PoiManager "
            }
          ],
          "releaseTag": "Public",
          "name": "PoiManager",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!PoiManager:constructor(1)",
              "docComment": "/**\n * The constructor of the `PoiManager`.\n *\n * @param mapView - The [[MapView]] instance that should display the POIs.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PoiManager#addImageTexture:member(1)",
              "docComment": "/**\n * Add an [[ImageTexture]] such that it is available as a named entity for techniques in theme files.\n *\n * @param imageTexture - [[ImageTexture]] that should be available for POIs.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addImageTexture(imageTexture: "
                },
                {
                  "kind": "Reference",
                  "text": "ImageTexture",
                  "canonicalReference": "@here/harp-datasource-protocol!ImageTexture:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "imageTexture",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addImageTexture"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PoiManager#addPois:member(1)",
              "docComment": "/**\n * Add all POIs from a decoded tile and store them as [[TextElement]]s in the [[Tile]].\n *\n * Also handles LineMarkers, which is a recurring marker along a line (road).\n *\n * @param tile - Tile to add POIs to.\n *\n * @param decodedTile - DecodedTile containing the raw [[PoiGeometry]] objects describing the POIs.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addPois(tile: "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": ", decodedTile: "
                },
                {
                  "kind": "Reference",
                  "text": "DecodedTile",
                  "canonicalReference": "@here/harp-datasource-protocol!DecodedTile:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tile",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "decodedTile",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "addPois"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PoiManager#addTextureAtlas:member(1)",
              "docComment": "/**\n * Load the texture atlas that defines the segments of the texture that should be used for specific icons. Creates an [[ImageTexture]] for every element in the atlas, such that it can be addressed in the theme file.\n *\n * @param imageName - Name of the image from the theme (NOT the url!).\n *\n * @param atlas - URL of the JSON file defining the texture atlas.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addTextureAtlas(imageName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", atlas: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "imageName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "atlas",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "addTextureAtlas"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PoiManager#clear:member(1)",
              "docComment": "/**\n * Clear internal state. Applicable when switching themes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clear"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PoiManager#getImageTexture:member(1)",
              "docComment": "/**\n * Return the [[ImageTexture]] registered under the specified name.\n *\n * @param name - Name of the [[ImageTexture]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getImageTexture(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ImageTexture",
                  "canonicalReference": "@here/harp-datasource-protocol!ImageTexture:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getImageTexture"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!PoiManager#mapView:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mapView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PoiManager#updatePoiFromPoiTable:member(1)",
              "docComment": "/**\n * Update the [[TextElement]] with the information taken from the [[PoiTable]] which is referenced in the [[PoiInfo]] of the pointLabel.\n *\n * If the requested [[PoiTable]] is not available yet, the function returns `false`. If the [[PoiTable]] is not defined, or if the references POI has no entry in the [[PoiTable]], no action is taken, and the function returns `false`.\n *\n * If the [[PoiTable]] has been processed, it returns `true`, indicating that this function doesn't have to be called again.\n *\n * @param pointLabel - The [[TextElement]] to update.\n *\n * @returns `true` if the [[PoiTable]] has been processed, and the function does not have to be called again.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updatePoiFromPoiTable(pointLabel: "
                },
                {
                  "kind": "Reference",
                  "text": "TextElement",
                  "canonicalReference": "@here/harp-mapview!TextElement:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "pointLabel",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "updatePoiFromPoiTable"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!PoiTable:class",
          "docComment": "/**\n * The `PoiTable` stores individual information for each POI type. If a [[TextElement]] has a reference to a PoiTable (if TextElement.poiInfo.poiTableName is set), information for the TextElement and its icon are read from the PoiTable.\n *\n * The key to look up the POI is taken from the data, in case of OSM data with TileZen data, the `poiNameField` is set to `kind`, which makes the content of the field `kind` in the data the key to look up the POIs in the [[PoiTable]].\n *\n * On the side of the [[PoiTable]], the key to look up the PoiTableEntry is either the property \"name\" of the [[PoiTableEntry]] (which should be unique), or the alternative list of names `altNames`, where each value should also be unique. If the property `useAltNamesForKey` is set to `true`, the `altNames` will be used.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class PoiTable "
            }
          ],
          "releaseTag": "Public",
          "name": "PoiTable",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!PoiTable:constructor(1)",
              "docComment": "/**\n * Creates an instance of PoiTable.\n *\n * @param name - Name of the `PoiTable`. Must be unique.\n *\n * @param useAltNamesForKey - Pass `true` to use the contents of the property `altNames` to find a [[PoiTableEntry]] in the table.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", useAltNamesForKey: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "useAltNamesForKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PoiTable#getEntry:member(1)",
              "docComment": "/**\n * Gets [[PoiTableEntry]] for poi name specified.\n *\n * @param poiName - poi name or one of its alternative names if [[useAltNamesForKey]] is set to `true`.\n *\n * @returns [[PoiTableEntry]] object or undefined if name was not found in dictionary.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getEntry(poiName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PoiTableEntry",
                  "canonicalReference": "@here/harp-mapview!~PoiTableEntry:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "poiName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getEntry"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!PoiTable#isLoading:member",
              "docComment": "/**\n * Returns `true` if the table is currently being loaded, `false` otherwise.\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get isLoading(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "isLoading",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PoiTable#load:member(1)",
              "docComment": "/**\n * Start to load the PoiTable from the specified URL. Can only be called once per table.\n *\n * @param poiTableUrl - URL that points to the JSON file.\n *\n * @returns {Promise<boolean>} Promise is being resolved once the JSON file has been fetched and the `PoiTable` has been set up.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "load(poiTableUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "poiTableUrl",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "load"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!PoiTable#loadedOk:member",
              "docComment": "/**\n * Returns `true` if the table has been loaded correctly, `false` otherwise.\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get loadedOk(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "loadedOk",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!PoiTable#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!PoiTable#useAltNamesForKey:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly useAltNamesForKey: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "useAltNamesForKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!PoiTableManager:class",
          "docComment": "/**\n * The `PoiTableManager` manages the list of [[PoiTables]] that can be defined in the [[Theme]] file.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class PoiTableManager "
            }
          ],
          "releaseTag": "Public",
          "name": "PoiTableManager",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!PoiTableManager:constructor(1)",
              "docComment": "/**\n * Creates an instance of PoiTableManager.\n *\n * @param mapView - Owning [[MapView]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mapView",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PoiTableManager#addTable:member(1)",
              "docComment": "/**\n * Manually add a [[PoiTable]]. Normally, the [[PoiTables]]s are specified in the [[Theme]]. Ensure that the name is unique.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addTable(poiTable: "
                },
                {
                  "kind": "Reference",
                  "text": "PoiTable",
                  "canonicalReference": "@here/harp-mapview!PoiTable:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "poiTable",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addTable"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PoiTableManager#clear:member(1)",
              "docComment": "/**\n * Clear the list of [[PoiTable]]s.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clear"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!PoiTableManager#finishedLoading:member",
              "docComment": "/**\n * Return `true` if the [[PoiTable]]s have finished loading.\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get finishedLoading(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "finishedLoading",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PoiTableManager#getPoiTable:member(1)",
              "docComment": "/**\n * Retrieve a [[PoiTable]] by name.\n *\n * @param poiTableName - Name of the [[PoiTable]].\n *\n * @returns {(PoiTable | undefined)} The found [[poiTable]] if it could be found, `undefined` otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getPoiTable(poiTableName: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PoiTable",
                  "canonicalReference": "@here/harp-mapview!PoiTable:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "poiTableName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getPoiTable"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PoiTableManager#loadPoiTables:member(1)",
              "docComment": "/**\n * Load the [[PoiTable]]s that are stored in the [[MapView]]s [[Theme]]. Note that duplicate names of [[PoiTable]]s in the [[Theme]] will lead to inaccessible [[PoiTable]]s.\n *\n * @param theme - [[Theme]] containing all [[PoiTable]]s to load.\n *\n * @returns {Promise<void>} Resolved once all the [[PoiTable]]s in the [[Theme]] have been loaded.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadPoiTables(theme: "
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@here/harp-datasource-protocol!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "theme",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "loadPoiTables"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!PoiTableManager#mapView:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly mapView: "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mapView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!PoiTableManager#poiTables:member",
              "docComment": "/**\n * Return the map of [[PoiTable]]s.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get poiTables(): "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "PoiTable",
                  "canonicalReference": "@here/harp-mapview!PoiTable:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "poiTables",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!PolarTileDataSource:class",
          "docComment": "/**\n * [[DataSource]] providing geometry for poles\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class PolarTileDataSource extends "
            },
            {
              "kind": "Reference",
              "text": "DataSource",
              "canonicalReference": "@here/harp-mapview!DataSource:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PolarTileDataSource",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!PolarTileDataSource:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `PolarTileDataSource` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor({ name, styleSetName, minDataLevel, maxDataLevel, minDisplayLevel, maxDisplayLevel, storageLevelOffset, geometryLevelOffset, debugTiles }: "
                },
                {
                  "kind": "Reference",
                  "text": "PolarTileDataSourceOptions",
                  "canonicalReference": "@here/harp-mapview!PolarTileDataSourceOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "{ name, styleSetName, minDataLevel, maxDataLevel, minDisplayLevel, maxDisplayLevel, storageLevelOffset, geometryLevelOffset, debugTiles }",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PolarTileDataSource#canGetTile:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "canGetTile(zoomLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "zoomLevel",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "canGetTile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PolarTileDataSource#createTechiqueEntry:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createTechiqueEntry(kind: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TechniqueEntry",
                  "canonicalReference": "@here/harp-mapview!~TechniqueEntry:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "kind",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "createTechiqueEntry"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PolarTileDataSource#dispose:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispose(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "dispose"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!PolarTileDataSource#geometryLevelOffset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get geometryLevelOffset(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset geometryLevelOffset(geometryLevelOffset: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "geometryLevelOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PolarTileDataSource#getTile:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTile(tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getTile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PolarTileDataSource#getTilingScheme:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTilingScheme(): "
                },
                {
                  "kind": "Reference",
                  "text": "TilingScheme",
                  "canonicalReference": "@here/harp-geoutils!TilingScheme:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getTilingScheme"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PolarTileDataSource#setStyleSet:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setStyleSet(styleSet?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleSet",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleSet:type"
                },
                {
                  "kind": "Content",
                  "text": ", definitions?: "
                },
                {
                  "kind": "Reference",
                  "text": "Definitions",
                  "canonicalReference": "@here/harp-datasource-protocol!Definitions:interface"
                },
                {
                  "kind": "Content",
                  "text": ", languages?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "styleSet",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "definitions",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "languages",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "setStyleSet"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PolarTileDataSource#setTheme:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setTheme(theme: "
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@here/harp-datasource-protocol!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": ", languages?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "theme",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "languages",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setTheme"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!PolarTileDataSource#shouldSubdivide:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldSubdivide(zoomLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "zoomLevel",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "shouldSubdivide"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!PolarTileDataSourceOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PolarTileDataSourceOptions extends "
            },
            {
              "kind": "Reference",
              "text": "DataSourceOptions",
              "canonicalReference": "@here/harp-mapview!DataSourceOptions:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PolarTileDataSourceOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PolarTileDataSourceOptions#debugTiles:member",
              "docComment": "/**\n * Enable debug display for generated tiles. Default is false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "debugTiles?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "debugTiles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!PolarTileDataSourceOptions#geometryLevelOffset:member",
              "docComment": "/**\n * Optional level offset of regular tiles from reference datasource to align tiles to. Default is -1.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "geometryLevelOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "geometryLevelOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!RenderEvent:interface",
          "docComment": "/**\n * The type of `RenderEvent`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RenderEvent extends "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "Event",
              "canonicalReference": "three!Event:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "RenderEvent",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!RenderEvent#time:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "time?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "time",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!RenderEvent#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Reference",
                  "text": "MapViewEventNames.Render",
                  "canonicalReference": "@here/harp-mapview!MapViewEventNames.Render:member"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "MapViewEventNames.FirstFrame",
                  "canonicalReference": "@here/harp-mapview!MapViewEventNames.FirstFrame:member"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "MapViewEventNames.FrameComplete",
                  "canonicalReference": "@here/harp-mapview!MapViewEventNames.FrameComplete:member"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "MapViewEventNames.ThemeLoaded",
                  "canonicalReference": "@here/harp-mapview!MapViewEventNames.ThemeLoaded:member"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "MapViewEventNames.AnimationStarted",
                  "canonicalReference": "@here/harp-mapview!MapViewEventNames.AnimationStarted:member"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "MapViewEventNames.AnimationFinished",
                  "canonicalReference": "@here/harp-mapview!MapViewEventNames.AnimationFinished:member"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "MapViewEventNames.MovementStarted",
                  "canonicalReference": "@here/harp-mapview!MapViewEventNames.MovementStarted:member"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "MapViewEventNames.MovementFinished",
                  "canonicalReference": "@here/harp-mapview!MapViewEventNames.MovementFinished:member"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "MapViewEventNames.ContextLost",
                  "canonicalReference": "@here/harp-mapview!MapViewEventNames.ContextLost:member"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "MapViewEventNames.ContextRestored",
                  "canonicalReference": "@here/harp-mapview!MapViewEventNames.ContextRestored:member"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "MapViewEventNames.CopyrightChanged",
                  "canonicalReference": "@here/harp-mapview!MapViewEventNames.CopyrightChanged:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 22
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!RequestHeaders:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RequestHeaders "
            }
          ],
          "releaseTag": "Public",
          "name": "RequestHeaders",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@here/harp-mapview!RequestHeaders:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "[field: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "field",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@here/harp-mapview!ResourceComputationType:enum",
          "docComment": "/**\n * Way the memory consumption of a tile is computed. Either in number of tiles, or in MegaBytes. If it is in MB, an estimation is used.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ResourceComputationType "
            }
          ],
          "releaseTag": "Public",
          "name": "ResourceComputationType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!ResourceComputationType.EstimationInMb:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "EstimationInMb = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "EstimationInMb",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!ResourceComputationType.NumberOfTiles:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NumberOfTiles = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "NumberOfTiles",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!RingBuffer:class",
          "docComment": "/**\n * A simple ring buffer to store the last `n` values of the timer. The buffer works on a First-In-First-Out (FIFO) basis.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class RingBuffer<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "RingBuffer",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!RingBuffer:constructor(1)",
              "docComment": "/**\n * Sets up the ring buffer.\n *\n * @param capacity - The buffer's capacity.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(capacity: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "capacity",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!RingBuffer#asArray:member(1)",
              "docComment": "/**\n * Returns a copy of the buffer, where the elements are properly sorted from oldest to newest.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "asArray(): "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "asArray"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!RingBuffer#bottom:member",
              "docComment": "/**\n * Obtains the latest element (LIFO) without removing it. Throws an exception if a buffer is empty. Before calling this method, make sure that `size > 0`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get bottom(): "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bottom",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!RingBuffer#buffer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "buffer: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "buffer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!RingBuffer#capacity:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly capacity: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "capacity",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!RingBuffer#clear:member(1)",
              "docComment": "/**\n * Clears the contents, removes all elements.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clear"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!RingBuffer#deq:member(1)",
              "docComment": "/**\n * Obtains the oldest element (FIFO). May throw an exception if a buffer underrun occurs. Before calling this method, make sure that `size > 0`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deq(): "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "deq"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!RingBuffer#enq:member(1)",
              "docComment": "/**\n * Adds one or more elements.\n *\n * @param data - The elements to add.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enq(...data: "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "enq"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!RingBuffer#enqOne:member(1)",
              "docComment": "/**\n * Adds a single element to the ring buffer.\n *\n * @param data - Data element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enqOne(data: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "enqOne"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!RingBuffer#head:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "head: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "head",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!RingBuffer#iterator:member(1)",
              "docComment": "/**\n * Creates an iterator for the buffer.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "iterator(): "
                },
                {
                  "kind": "Reference",
                  "text": "RingBuffer.Iterator",
                  "canonicalReference": "@here/harp-mapview!RingBuffer.Iterator:class"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "iterator"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!RingBuffer#size:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "size: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!RingBuffer#tail:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tail: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tail",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!RingBuffer#top:member",
              "docComment": "/**\n * Obtains the oldest element (FIFO) without removing it. Throws an exception if a buffer is empty. Before calling this method, make sure that `size > 0`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get top(): "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "top",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@here/harp-mapview!RingBuffer:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace RingBuffer "
            }
          ],
          "releaseTag": "Public",
          "name": "RingBuffer",
          "members": [
            {
              "kind": "Class",
              "canonicalReference": "@here/harp-mapview!RingBuffer.Iterator:class",
              "docComment": "/**\n * A local class for RingBuffer<T>\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "class Iterator<T> "
                }
              ],
              "releaseTag": "Public",
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "Iterator",
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@here/harp-mapview!RingBuffer.Iterator:constructor(1)",
                  "docComment": "/**\n * Creates an iterator for the ring buffer.\n *\n * @param m_buffer - `Ringbuffer` to iterate over.\n *\n * @param m_index - Start index.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(m_buffer: "
                    },
                    {
                      "kind": "Reference",
                      "text": "RingBuffer",
                      "canonicalReference": "@here/harp-mapview!RingBuffer:class"
                    },
                    {
                      "kind": "Content",
                      "text": "<T>"
                    },
                    {
                      "kind": "Content",
                      "text": ", m_index?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "m_buffer",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 3
                      }
                    },
                    {
                      "parameterName": "m_index",
                      "parameterTypeTokenRange": {
                        "startIndex": 4,
                        "endIndex": 5
                      }
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@here/harp-mapview!RingBuffer.Iterator#next:member(1)",
                  "docComment": "/**\n * Advances the iterator to the next element.\n *\n * @returns `true` if the iterator is still valid; `false` if an overrun occurs.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "next(): "
                    },
                    {
                      "kind": "Content",
                      "text": "boolean"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [],
                  "name": "next"
                },
                {
                  "kind": "Property",
                  "canonicalReference": "@here/harp-mapview!RingBuffer.Iterator#value:member",
                  "docComment": "/**\n * Gets the iterator's current value. This function does not fail even if an overrun occurs. To detect an overrun, watch the result for [[next]].\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "get value(): "
                    },
                    {
                      "kind": "Content",
                      "text": "T"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "value",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false
                }
              ],
              "implementsTokenRanges": []
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!SampledTimer:class",
          "docComment": "/**\n * A timer that stores the last `n` samples in a ring buffer.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SampledTimer extends "
            },
            {
              "kind": "Reference",
              "text": "SimpleTimer",
              "canonicalReference": "@here/harp-mapview!SimpleTimer:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SampledTimer",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!SampledTimer:constructor(1)",
              "docComment": "/**\n * Creates a `SampledTimer` instance. Must still be added to statistics if it should be logged!\n *\n * @param statistics - Statistics to use for management.\n *\n * @param name - Name of the timer. Use colons to build a hierarchy.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(statistics: "
                },
                {
                  "kind": "Reference",
                  "text": "Statistics",
                  "canonicalReference": "@here/harp-mapview!Statistics:class"
                },
                {
                  "kind": "Content",
                  "text": ", name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "statistics",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!SampledTimer#getStats:member(1)",
              "docComment": "/**\n * Updates the `min`, `max`, `avg`, and `median` values. Currently, this function is expensive, as it requires a copy of the sampled values.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getStats(): "
                },
                {
                  "kind": "Reference",
                  "text": "Stats",
                  "canonicalReference": "@here/harp-mapview!Stats:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getStats"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!SampledTimer#maxNumSamples:member",
              "docComment": "/**\n * Maximum samples until the statistics are reset and updated, which may destroy a median computation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxNumSamples: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxNumSamples",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!SampledTimer#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!SampledTimer#numResets:member",
              "docComment": "/**\n * The number of times the timer has reset.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "numResets: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "numResets",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!SampledTimer#reset:member(1)",
              "docComment": "/**\n * Resets the timer and clears all of its historical values.\n *\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reset(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "reset"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!SampledTimer#samples:member",
              "docComment": "/**\n * The array of sampled values, its length cannot exceed `maxNumSamples`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "samples: "
                },
                {
                  "kind": "Reference",
                  "text": "RingBuffer",
                  "canonicalReference": "@here/harp-mapview!RingBuffer:class"
                },
                {
                  "kind": "Content",
                  "text": "<number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "samples",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!SampledTimer#setValue:member(1)",
              "docComment": "/**\n * Add a single measurement to the sample.\n *\n * @param val - A measurement to add.\n *\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setValue(val: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "val",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setValue"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!SampledTimer#statistics:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "statistics: "
                },
                {
                  "kind": "Reference",
                  "text": "Statistics",
                  "canonicalReference": "@here/harp-mapview!Statistics:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "statistics",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-mapview!setDepthPrePassStencil:function(1)",
          "docComment": "/**\n * Sets up all the needed stencil logic needed for the depth pre-pass.\n *\n * This logic is in place to avoid z-fighting artifacts that can appear in geometries that have coplanar triangles inside the same mesh.\n *\n * @param depthMesh - Mesh created by `createDepthPrePassMesh`.\n *\n * @param colorMesh - Original mesh.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setDepthPrePassStencil(depthMesh: "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "Mesh",
              "canonicalReference": "three!Mesh:class"
            },
            {
              "kind": "Content",
              "text": ", colorMesh: "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "Mesh",
              "canonicalReference": "three!Mesh:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "depthMesh",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "colorMesh",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              }
            }
          ],
          "name": "setDepthPrePassStencil"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!SimpleFrameStatistics:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SimpleFrameStatistics "
            }
          ],
          "releaseTag": "Public",
          "name": "SimpleFrameStatistics",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!SimpleFrameStatistics#appResults:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "appResults: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, number>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "appResults",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!SimpleFrameStatistics#configs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "configs: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "configs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!SimpleFrameStatistics#frames:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "frames: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, number | number[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "frames",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!SimpleFrameStatistics#frameStats:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "frameStats?: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "Stats",
                  "canonicalReference": "@here/harp-mapview!Stats:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "frameStats",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!SimpleFrameStatistics#messages:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "messages: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string[] | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "messages",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!SimpleFrameStatistics#zoomLevelData:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "zoomLevelData?: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, number | number[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "zoomLevelData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!SimpleFrameStatistics#zoomLevelLabels:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "zoomLevelLabels?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "zoomLevelLabels",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!SimpleTimer:class",
          "docComment": "/**\n * A simple timer that stores only the latest measurement.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SimpleTimer implements "
            },
            {
              "kind": "Reference",
              "text": "Timer",
              "canonicalReference": "@here/harp-mapview!Timer:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SimpleTimer",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!SimpleTimer:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `SimpleTimer` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(statistics: "
                },
                {
                  "kind": "Reference",
                  "text": "Statistics",
                  "canonicalReference": "@here/harp-mapview!Statistics:class"
                },
                {
                  "kind": "Content",
                  "text": ", name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "statistics",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!SimpleTimer#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!SimpleTimer#now:member(1)",
              "docComment": "/**\n * Samples the timer. Requires that the timer has started.\n *\n * @returns the current timer value; `-1` if statistics are disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "now(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "now"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!SimpleTimer#reset:member(1)",
              "docComment": "/**\n * Resets the value to be able to start again.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reset(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "reset"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!SimpleTimer#running:member",
              "docComment": "/**\n * `true` if timer has been started.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "running: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "running",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!SimpleTimer#setValue:member(1)",
              "docComment": "/**\n * Sets the measurement value for the amount of time that has elapsed from start() to stop(). Use this function to override the timer's duration.\n *\n * @param val - The timer's duration.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setValue(val: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "val",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setValue"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!SimpleTimer#start:member(1)",
              "docComment": "/**\n * Starts the timer. Returns the current time, based on `Performance.now()`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "start(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "start"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!SimpleTimer#statistics:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "statistics: "
                },
                {
                  "kind": "Reference",
                  "text": "Statistics",
                  "canonicalReference": "@here/harp-mapview!Statistics:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "statistics",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!SimpleTimer#stop:member(1)",
              "docComment": "/**\n * Stops the timer. Requires that the timer has started.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stop(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "stop"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!SimpleTimer#value:member",
              "docComment": "/**\n * Gets the latest measurement. This function may return `undefined` if no measurement was done.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get value(): "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!Squares:class",
          "docComment": "/**\n * Point object that implements the raycasting of squares in screen space.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Squares extends "
            },
            {
              "kind": "Reference",
              "text": "MapViewPoints",
              "canonicalReference": "@here/harp-mapview!MapViewPoints:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Squares",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Squares#testPoint:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "testPoint(point: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", screenPosition: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "three!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ", pickCoordinates: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "three!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ", index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", distance: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", intersects: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Intersection",
                  "canonicalReference": "three!Intersection:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 18,
                "endIndex": 19
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "point",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "screenPosition",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "pickCoordinates",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 10,
                    "endIndex": 11
                  }
                },
                {
                  "parameterName": "distance",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                },
                {
                  "parameterName": "intersects",
                  "parameterTypeTokenRange": {
                    "startIndex": 14,
                    "endIndex": 17
                  }
                }
              ],
              "name": "testPoint"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!Statistics:class",
          "docComment": "/**\n * Manages a set of timers. The main objective of `Statistics` is to log these timers. You can disable statistics to minimize their impact on performance.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Statistics "
            }
          ],
          "releaseTag": "Public",
          "name": "Statistics",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!Statistics:constructor(1)",
              "docComment": "/**\n * Sets up a group of timers.\n *\n * @param name - The statistics name, for logging purposes.\n *\n * @param enabled - If `false`, the timers do not measure the performance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(name?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", enabled?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "enabled",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Statistics#addTimer:member(1)",
              "docComment": "/**\n * Adds the timer specified.\n *\n * @param timer - The timer's name, which must be unique within this statistics object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addTimer(timer: "
                },
                {
                  "kind": "Reference",
                  "text": "Timer",
                  "canonicalReference": "@here/harp-mapview!Timer:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Timer",
                  "canonicalReference": "@here/harp-mapview!Timer:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "timer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addTimer"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Statistics#createTimer:member(1)",
              "docComment": "/**\n * Adds a timer, based on the name specified.\n *\n * @param name - The timer's name; must be unique.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createTimer(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", keepSamples?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Timer",
                  "canonicalReference": "@here/harp-mapview!Timer:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "keepSamples",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "createTimer"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Statistics#enabled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enabled: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "enabled",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Statistics#getTimer:member(1)",
              "docComment": "/**\n * Gets a timer by name.\n *\n * @param name - The timer's name.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTimer(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Timer",
                  "canonicalReference": "@here/harp-mapview!Timer:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getTimer"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Statistics#hasTimer:member(1)",
              "docComment": "/**\n * Checks if a timer with the specified name already exists.\n *\n * @param name - The timer's name.\n *\n * @returns `true` if a timer with `name` already exists; `false` otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasTimer(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "hasTimer"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Statistics#log:member(1)",
              "docComment": "/**\n * Prints all values to the console.\n *\n * @param header - Optional header line.\n *\n * @param footer - Optional footer line.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "log(header?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", footer?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "header",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "footer",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "log"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Statistics#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Statistics#reset:member(1)",
              "docComment": "/**\n * Resets all timers.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reset(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "reset"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!Stats:interface",
          "docComment": "/**\n * Simple statistics about the values in an array.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Stats "
            }
          ],
          "releaseTag": "Public",
          "name": "Stats",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!Stats#avg:member",
              "docComment": "/**\n * The average duration of all values in the array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "avg: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "avg",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!Stats#max:member",
              "docComment": "/**\n * The highest value in the array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "max",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!Stats#median:member",
              "docComment": "/**\n * The median duration of all values in the array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "median: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "median",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!Stats#median75:member",
              "docComment": "/**\n * The 75th percentile median of all values in the array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "median75: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "median75",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!Stats#median90:member",
              "docComment": "/**\n * The 90th percentile median of all values in the array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "median90: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "median90",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!Stats#median95:member",
              "docComment": "/**\n * The 95th percentile median of all values in the array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "median95: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "median95",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!Stats#median97:member",
              "docComment": "/**\n * The 97th percentile median of all values in the array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "median97: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "median97",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!Stats#median99:member",
              "docComment": "/**\n * The 99th percentile median of all values in the array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "median99: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "median99",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!Stats#median999:member",
              "docComment": "/**\n * The 99.9th percentile median of all values in the array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "median999: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "median999",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!Stats#min:member",
              "docComment": "/**\n * The lowest value in the array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "min",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!Stats#numSamples:member",
              "docComment": "/**\n * The number of values in the array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "numSamples: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "numSamples",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!TextElement:class",
          "docComment": "/**\n * `TextElement` is used to create 2D text elements (for example, labels).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TextElement "
            }
          ],
          "releaseTag": "Public",
          "name": "TextElement",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!TextElement:constructor(1)",
              "docComment": "/**\n * Creates a new `TextElement`.\n *\n * @param text - The text to display.\n *\n * @param points - The position or a list of points for a curved text, both in world space.\n *\n * @param renderParams - `TextElement` text rendering parameters.\n *\n * @param layoutParams - `TextElement` text layout parameters.\n *\n * @param priority - The priority of the `TextElement. Elements with the highest priority get placed first, elements with priority of `0` are placed last, elements with a negative value are always rendered, ignoring priorities and allowing overrides.\n *\n * @param xOffset - Optional X offset of this `TextElement` in screen coordinates.\n *\n * @param yOffset - Optional Y offset of this `TextElement` in screen coordinates.\n *\n * @param featureId - Optional number to identify feature (originated from `OmvDataSource`).\n *\n * @param fadeNear - Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the label starts fading out (opacity decreases).\n *\n * @param fadeFar - Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the label becomes transparent. A value of <= 0.0 disables fading.\n *\n * @param offsetDirection - Direction represented as an angle in degrees clockwise from north to offset the icon in world space.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", points: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "[] | THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", renderParams: "
                },
                {
                  "kind": "Reference",
                  "text": "TextRenderParameters",
                  "canonicalReference": "@here/harp-text-canvas!TextRenderParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "TextRenderStyle",
                  "canonicalReference": "@here/harp-text-canvas!TextRenderStyle:class"
                },
                {
                  "kind": "Content",
                  "text": ", layoutParams: "
                },
                {
                  "kind": "Reference",
                  "text": "TextLayoutParameters",
                  "canonicalReference": "@here/harp-text-canvas!TextLayoutParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "TextLayoutStyle",
                  "canonicalReference": "@here/harp-text-canvas!TextLayoutStyle:class"
                },
                {
                  "kind": "Content",
                  "text": ", priority?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", xOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", yOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", featureId?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", style?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", fadeNear?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", fadeFar?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", tileOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", offsetDirection?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "points",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "renderParams",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 11
                  }
                },
                {
                  "parameterName": "layoutParams",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 15
                  }
                },
                {
                  "parameterName": "priority",
                  "parameterTypeTokenRange": {
                    "startIndex": 16,
                    "endIndex": 17
                  }
                },
                {
                  "parameterName": "xOffset",
                  "parameterTypeTokenRange": {
                    "startIndex": 18,
                    "endIndex": 19
                  }
                },
                {
                  "parameterName": "yOffset",
                  "parameterTypeTokenRange": {
                    "startIndex": 20,
                    "endIndex": 21
                  }
                },
                {
                  "parameterName": "featureId",
                  "parameterTypeTokenRange": {
                    "startIndex": 22,
                    "endIndex": 23
                  }
                },
                {
                  "parameterName": "style",
                  "parameterTypeTokenRange": {
                    "startIndex": 24,
                    "endIndex": 25
                  }
                },
                {
                  "parameterName": "fadeNear",
                  "parameterTypeTokenRange": {
                    "startIndex": 26,
                    "endIndex": 27
                  }
                },
                {
                  "parameterName": "fadeFar",
                  "parameterTypeTokenRange": {
                    "startIndex": 28,
                    "endIndex": 29
                  }
                },
                {
                  "parameterName": "tileOffset",
                  "parameterTypeTokenRange": {
                    "startIndex": 30,
                    "endIndex": 31
                  }
                },
                {
                  "parameterName": "offsetDirection",
                  "parameterTypeTokenRange": {
                    "startIndex": 32,
                    "endIndex": 33
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#alwaysOnTop:member",
              "docComment": "/**\n * If `true`, the label will always be rendered on top. If overlapping with other labels, the render order is undefined;  @default `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "alwaysOnTop?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "alwaysOnTop",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#bounds:member",
              "docComment": "/**\n * Screen space bounds for this `TextElement`. Used by point labels in [[TextElementsRenderer]]. Valid after `loadingState` is `Initialized`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bounds?: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Box2",
                  "canonicalReference": "three!Box2:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "bounds",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#dbgPathTooSmall:member",
              "docComment": "/**\n * @hidden If `true`, the estimated bounding box of the path is too small for the label to fit, so it is being ignored for rendering in the latest frame.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dbgPathTooSmall?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dbgPathTooSmall",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#distanceScale:member",
              "docComment": "/**\n * Scaling factor of text. Defaults to 0.5, reducing the size ot 50% in the distance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "distanceScale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "distanceScale",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#elevated:member",
              "docComment": "/**\n * If set to `true` the geometry has been already overlaid on elevation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "elevated: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "elevated",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#fadeFar:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fadeFar?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fadeFar",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#fadeNear:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fadeNear?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fadeNear",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#featureId:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "featureId?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "featureId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#glyphCaseArray:member",
              "docComment": "/**\n * @hidden Array storing the casing (`true`: uppercase, `false`: lowercase) for this `TextElement`. Used by labels in [[TextElementsRenderer]] to support `SmallCaps`. Valid after `loadingState` is `Initialized`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "glyphCaseArray?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "glyphCaseArray",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#glyphs:member",
              "docComment": "/**\n * @hidden Array storing the style [[GlyphData]] for this `TextElement` to speed up label placement in [[TextElementsRenderer]]. Valid after `loadingState` is `Initialized`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "glyphs?: "
                },
                {
                  "kind": "Reference",
                  "text": "GlyphData",
                  "canonicalReference": "@here/harp-text-canvas!GlyphData:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "glyphs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TextElement#hasFeatureId:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasFeatureId(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "hasFeatureId"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement.HIGHEST_PRIORITY:member",
              "docComment": "/**\n * Text elements with this priority are placed on screen before any others.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly HIGHEST_PRIORITY: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "HIGHEST_PRIORITY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#ignoreDistance:member",
              "docComment": "/**\n * Ignore distance limit. Used for label in labeled-icons.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ignoreDistance?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ignoreDistance",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#kind:member",
              "docComment": "/**\n * Specified kind of geometry. One kind is set as default in the technique, and can be overridden in the style.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "kind?: "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryKind",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryKind:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryKindSet",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryKindSet:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "kind",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#layoutParams:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly layoutParams: "
                },
                {
                  "kind": "Reference",
                  "text": "TextLayoutParameters",
                  "canonicalReference": "@here/harp-text-canvas!TextLayoutParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "TextLayoutStyle",
                  "canonicalReference": "@here/harp-text-canvas!TextLayoutStyle:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "layoutParams",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#layoutStyle:member",
              "docComment": "/**\n * @returns The style used to layout this text element, undefined if not set yet.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get layoutStyle(): "
                },
                {
                  "kind": "Reference",
                  "text": "TextLayoutStyle",
                  "canonicalReference": "@here/harp-text-canvas!TextLayoutStyle:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset layoutStyle(style: "
                },
                {
                  "kind": "Reference",
                  "text": "TextLayoutStyle",
                  "canonicalReference": "@here/harp-text-canvas!TextLayoutStyle:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined);"
                }
              ],
              "releaseTag": "Public",
              "name": "layoutStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#loadingState:member",
              "docComment": "/**\n * @hidden Used during rendering.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadingState?: "
                },
                {
                  "kind": "Reference",
                  "text": "LoadingState",
                  "canonicalReference": "@here/harp-mapview!LoadingState:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "loadingState",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#maxZoomLevel:member",
              "docComment": "/**\n * Determines maximum zoom level for visibility. Can be used to reduce the number of visible `TextElement`s based on zoom level.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxZoomLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxZoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#mayOverlap:member",
              "docComment": "/**\n * If `true`, label is allowed to overlap other labels or icons of lower priority.  @default `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mayOverlap?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mayOverlap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#minZoomLevel:member",
              "docComment": "/**\n * Determines minimum zoom level for visibility. Can be used to reduce the number of visible `TextElement`s based on zoom level.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "minZoomLevel?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minZoomLevel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#offsetDirection:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly offsetDirection?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "offsetDirection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#path:member",
              "docComment": "/**\n * The list of points in world space used to render the text along a path or `undefined`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get path(): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "path",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#pathLengthSqr:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pathLengthSqr?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "pathLengthSqr",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#poiInfo:member",
              "docComment": "/**\n * Contains additional information about icon to be rendered along with text.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get poiInfo(): "
                },
                {
                  "kind": "Reference",
                  "text": "PoiInfo",
                  "canonicalReference": "@here/harp-mapview!PoiInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset poiInfo(poiInfo: "
                },
                {
                  "kind": "Reference",
                  "text": "PoiInfo",
                  "canonicalReference": "@here/harp-mapview!PoiInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined);"
                }
              ],
              "releaseTag": "Public",
              "name": "poiInfo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#points:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly points: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "[] | THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "points",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#position:member",
              "docComment": "/**\n * The text element position or the first point of the path used to render a curved text, both in world space.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get position(): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "position",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#priority:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "priority: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "priority",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#renderOrder:member",
              "docComment": "/**\n * If specified, determines the render order between `TextElement`s. The number different renderOrders should be as small as possible, because every specific `renderOrder` may result in one or more draw calls.\n *\n * TextElements with the same integer `renderOrder` will be rendered in the same batch.\n *\n * The `renderOrder` of `TextElement`s are only relative to other `TextElement`s, and not other map elements.\n *\n * A `TextElement` with a higher `renderOrder` will be rendered after a `TextElement` with a lower `renderOrder`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderOrder?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderOrder",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#renderParams:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly renderParams: "
                },
                {
                  "kind": "Reference",
                  "text": "TextRenderParameters",
                  "canonicalReference": "@here/harp-text-canvas!TextRenderParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "TextRenderStyle",
                  "canonicalReference": "@here/harp-text-canvas!TextRenderStyle:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderParams",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#renderStyle:member",
              "docComment": "/**\n * @returns The style used to render this text element, undefined if not set yet.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get renderStyle(): "
                },
                {
                  "kind": "Reference",
                  "text": "TextRenderStyle",
                  "canonicalReference": "@here/harp-text-canvas!TextRenderStyle:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset renderStyle(style: "
                },
                {
                  "kind": "Reference",
                  "text": "TextRenderStyle",
                  "canonicalReference": "@here/harp-text-canvas!TextRenderStyle:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined);"
                }
              ],
              "releaseTag": "Public",
              "name": "renderStyle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#reserveSpace:member",
              "docComment": "/**\n * If `true`, label will reserve screen space, other markers of lower priority will not be able to overlap.  @default `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reserveSpace?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "reserveSpace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#style:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "style?: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "style",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#text:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#textBufferObject:member",
              "docComment": "/**\n * @hidden Pre-computed text vertex buffer. Used by point labels in [[TextElementsRenderer]]. Valid after label becomes visible for the first time.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textBufferObject?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextBufferObject",
                  "canonicalReference": "@here/harp-text-canvas!TextBufferObject:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textBufferObject",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#textFadeTime:member",
              "docComment": "/**\n * Time to fade in text in milliseconds.  @default [[DEFAULT_FADE_TIME]] 800\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textFadeTime?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textFadeTime",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#textMayOverlap:member",
              "docComment": "/**\n * If `true`, `TextElement` is allowed to overlap other labels or icons of lower priority.\n *\n * @default `false`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get textMayOverlap(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset textMayOverlap(mayOverlap: boolean);"
                }
              ],
              "releaseTag": "Public",
              "name": "textMayOverlap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#textReservesSpace:member",
              "docComment": "/**\n * If `true`, `TextElement` will reserve screen space, other markers of lower priority will not be able to overlap.\n *\n * @default `true`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get textReservesSpace(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset textReservesSpace(reserveSpace: boolean);"
                }
              ],
              "releaseTag": "Public",
              "name": "textReservesSpace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#tileOffset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly tileOffset?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tileOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Reference",
                  "text": "TextElementType",
                  "canonicalReference": "@here/harp-mapview!TextElementType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TextElement#updateMinMaxZoomLevelsFromPoiInfo:member(1)",
              "docComment": "/**\n * Update the minZoomLevel and maxZoomLevel from the values set in [[PoiInfo]]. Selects the smaller/larger one of the two min/max values for icon and text, because the TextElement is a container for both.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateMinMaxZoomLevelsFromPoiInfo(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "updateMinMaxZoomLevelsFromPoiInfo"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#userData:member",
              "docComment": "/**\n * Optional user data. Will be retrieved during picking.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "userData?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "userData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#visible:member",
              "docComment": "/**\n * Determines visibility. If set to `false`, it will not be rendered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visible: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "visible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#xOffset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "xOffset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "xOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElement#yOffset:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "yOffset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "yOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!TextElementIndex:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextElementIndex "
            }
          ],
          "releaseTag": "Public",
          "name": "TextElementIndex",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TextElementIndex#elementIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "elementIndex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "elementIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TextElementIndex#groupIndex:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "groupIndex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "groupIndex",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!TextElementsRenderer:class",
          "docComment": "/**\n * Internal class to manage all text rendering.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TextElementsRenderer "
            }
          ],
          "releaseTag": "Public",
          "name": "TextElementsRenderer",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer:constructor(1)",
              "docComment": "/**\n * Create the `TextElementsRenderer` which selects which labels should be placed on screen as a preprocessing step, which is not done every frame, and also renders the placed [[TextElement]]s every frame.\n *\n * @param m_viewState - State of the view for which this renderer will draw text.\n *\n * @param m_viewCamera - Camera used by the view for which this renderer will draw text.\n *\n * @param m_viewUpdateCallback - To be called whenever the view needs to be updated.\n *\n * @param m_screenCollisions - General 2D screen occlusion management, may be shared between instances.\n *\n * @param m_screenProjector - Projects 3D coordinates into screen space.\n *\n * @param m_textCanvasFactory - To create TextCanvas instances.\n *\n * @param m_poiRendererFactory - To create PoiRenderer instances.\n *\n * @param m_poiManager - To prepare pois for rendering.\n *\n * @param m_fontCatalogLoader - To load font catalogs.\n *\n * @param m_theme - Theme defining text styles.\n *\n * @param options - Configuration options for the text renderer. See [[TextElementsRendererOptions]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(m_viewState: "
                },
                {
                  "kind": "Reference",
                  "text": "ViewState",
                  "canonicalReference": "@here/harp-mapview!ViewState:interface"
                },
                {
                  "kind": "Content",
                  "text": ", m_viewCamera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "three!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": ", m_viewUpdateCallback: "
                },
                {
                  "kind": "Reference",
                  "text": "ViewUpdateCallback",
                  "canonicalReference": "@here/harp-mapview!ViewUpdateCallback:type"
                },
                {
                  "kind": "Content",
                  "text": ", m_screenCollisions: "
                },
                {
                  "kind": "Reference",
                  "text": "ScreenCollisions",
                  "canonicalReference": "@here/harp-mapview!ScreenCollisions:class"
                },
                {
                  "kind": "Content",
                  "text": ", m_screenProjector: "
                },
                {
                  "kind": "Reference",
                  "text": "ScreenProjector",
                  "canonicalReference": "@here/harp-mapview!ScreenProjector:class"
                },
                {
                  "kind": "Content",
                  "text": ", m_textCanvasFactory: "
                },
                {
                  "kind": "Reference",
                  "text": "TextCanvasFactory",
                  "canonicalReference": "@here/harp-mapview!TextCanvasFactory:class"
                },
                {
                  "kind": "Content",
                  "text": ", m_poiManager: "
                },
                {
                  "kind": "Reference",
                  "text": "PoiManager",
                  "canonicalReference": "@here/harp-mapview!PoiManager:class"
                },
                {
                  "kind": "Content",
                  "text": ", m_poiRendererFactory: "
                },
                {
                  "kind": "Reference",
                  "text": "PoiRendererFactory",
                  "canonicalReference": "@here/harp-mapview!PoiRendererFactory:class"
                },
                {
                  "kind": "Content",
                  "text": ", m_fontCatalogLoader: "
                },
                {
                  "kind": "Reference",
                  "text": "FontCatalogLoader",
                  "canonicalReference": "@here/harp-mapview!FontCatalogLoader:class"
                },
                {
                  "kind": "Content",
                  "text": ", m_theme: "
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@here/harp-datasource-protocol!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "TextElementsRendererOptions",
                  "canonicalReference": "@here/harp-mapview!TextElementsRendererOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "m_viewState",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "m_viewCamera",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "m_viewUpdateCallback",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "m_screenCollisions",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "m_screenProjector",
                  "parameterTypeTokenRange": {
                    "startIndex": 10,
                    "endIndex": 11
                  }
                },
                {
                  "parameterName": "m_textCanvasFactory",
                  "parameterTypeTokenRange": {
                    "startIndex": 12,
                    "endIndex": 13
                  }
                },
                {
                  "parameterName": "m_poiManager",
                  "parameterTypeTokenRange": {
                    "startIndex": 14,
                    "endIndex": 15
                  }
                },
                {
                  "parameterName": "m_poiRendererFactory",
                  "parameterTypeTokenRange": {
                    "startIndex": 16,
                    "endIndex": 17
                  }
                },
                {
                  "parameterName": "m_fontCatalogLoader",
                  "parameterTypeTokenRange": {
                    "startIndex": 18,
                    "endIndex": 19
                  }
                },
                {
                  "parameterName": "m_theme",
                  "parameterTypeTokenRange": {
                    "startIndex": 20,
                    "endIndex": 21
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 22,
                    "endIndex": 23
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer#addOverlayText:member(1)",
              "docComment": "/**\n * Adds new overlay text elements to this `MapView`.\n *\n * @param textElements - Array of [[TextElement]] to be added.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addOverlayText(textElements: "
                },
                {
                  "kind": "Reference",
                  "text": "TextElement",
                  "canonicalReference": "@here/harp-mapview!TextElement:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "textElements",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "addOverlayText"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer#clearOverlayText:member(1)",
              "docComment": "/**\n * Adds new overlay text elements to this `MapView`.\n *\n * @param textElements - Array of [[TextElement]] to be added.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearOverlayText(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clearOverlayText"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer#clearRenderStates:member(1)",
              "docComment": "/**\n * Reset the current text render states of all visible tiles. All [[TextElement]]s will fade in after that as if they have just been added.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearRenderStates(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clearRenderStates"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer#delayLabelsUntilMovementFinished:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get delayLabelsUntilMovementFinished(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset delayLabelsUntilMovementFinished(delay: boolean);"
                }
              ],
              "releaseTag": "Public",
              "name": "delayLabelsUntilMovementFinished",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer#disableFading:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get disableFading(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset disableFading(disable: boolean);"
                }
              ],
              "releaseTag": "Public",
              "name": "disableFading",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer#getMemoryUsage:member(1)",
              "docComment": "/**\n * Return memory used by all objects managed by `TextElementsRenderer`.\n *\n * @returns `MemoryUsage` Heap and GPU memory used by this `TextElementsRenderer`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMemoryUsage(): "
                },
                {
                  "kind": "Reference",
                  "text": "MapViewUtils.MemoryUsage",
                  "canonicalReference": "@here/harp-mapview!MapViewUtils.MemoryUsage:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getMemoryUsage"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer#hasOverlayText:member(1)",
              "docComment": "/**\n * @returns Whether there's overlay text to be rendered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasOverlayText(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "hasOverlayText"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer#initialized:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get initialized(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "initialized",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer#initializing:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get initializing(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "initializing",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer#invalidateCache:member(1)",
              "docComment": "/**\n * Forces update of text elements in the next call to [[placeText]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "invalidateCache(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "invalidateCache"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer#loading:member",
              "docComment": "/**\n * `true` if any resource used by any `FontCatalog` is still loading.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get loading(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "loading",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer#movementFinished:member(1)",
              "docComment": "/**\n * Notify `TextElementsRenderer` that the camera has finished its movement.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "movementFinished(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "movementFinished"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer#movementStarted:member(1)",
              "docComment": "/**\n * Notify `TextElementsRenderer` that the camera has started a movement.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "movementStarted(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "movementStarted"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer#overlayText:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get overlayText(): "
                },
                {
                  "kind": "Reference",
                  "text": "TextElement",
                  "canonicalReference": "@here/harp-mapview!TextElement:class"
                },
                {
                  "kind": "Content",
                  "text": "[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overlayText",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer#overloaded:member",
              "docComment": "/**\n * Is `true` if number of [[TextElement]]s in visible tiles is larger than the recommended number `OVERLOAD_LABEL_LIMIT`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get overloaded(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "overloaded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer#pickTextElements:member(1)",
              "docComment": "/**\n * Fill the picking results for the pixel with the given screen coordinate. If multiple [[TextElement]]s are found, the order of the results is unspecified.\n *\n * Note: [[TextElement]]s with identical `featureId` or identical `userData` will only appear once in the list `pickResults`.\n *\n * @param screenPosition - Screen coordinate of picking position.\n *\n * @param pickResults - Array filled with pick results.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pickTextElements(screenPosition: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector2",
                  "canonicalReference": "three!Vector2:class"
                },
                {
                  "kind": "Content",
                  "text": ", pickResults: "
                },
                {
                  "kind": "Reference",
                  "text": "PickResult",
                  "canonicalReference": "@here/harp-mapview!PickResult:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "screenPosition",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "pickResults",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 6
                  }
                }
              ],
              "name": "pickTextElements"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer#placeText:member(1)",
              "docComment": "/**\n * Places text elements for the current frame.\n *\n * @param dataSourceTileList - List of tiles to be rendered for each data source.\n *\n * @param time - Current frame time.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "placeText(dataSourceTileList: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSourceTileList",
                  "canonicalReference": "@here/harp-mapview!DataSourceTileList:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ", time: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dataSourceTileList",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "time",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "placeText"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer#renderText:member(1)",
              "docComment": "/**\n * Render the text using the specified camera into the current canvas.\n *\n * @param camera - Orthographic camera to use.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderText(camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "OrthographicCamera",
                  "canonicalReference": "three!OrthographicCamera:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "renderText"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer#styleCache:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get styleCache(): "
                },
                {
                  "kind": "Reference",
                  "text": "TextStyleCache",
                  "canonicalReference": "@here/harp-mapview!TextStyleCache:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "styleCache",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer#waitInitialized:member(1)",
              "docComment": "/**\n * Waits until initialization is done.\n *\n * @returns Promise resolved to true if initialization was done, false otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitInitialized(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "waitInitialized"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TextElementsRenderer#waitLoaded:member(1)",
              "docComment": "/**\n * Waits till all pending resources from any `FontCatalog` are loaded.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitLoaded(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "waitLoaded"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!TextElementStyle:interface",
          "docComment": "/**\n * [[TextElementsRenderer]] representation of a [[Theme]]'s TextStyle.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextElementStyle "
            }
          ],
          "releaseTag": "Public",
          "name": "TextElementStyle",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TextElementStyle#fontCatalog:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fontCatalog: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "fontCatalog",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TextElementStyle#layoutParams:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "layoutParams: "
                },
                {
                  "kind": "Reference",
                  "text": "TextLayoutParameters",
                  "canonicalReference": "@here/harp-text-canvas!TextLayoutParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "layoutParams",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TextElementStyle#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TextElementStyle#poiRenderer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "poiRenderer?: "
                },
                {
                  "kind": "Reference",
                  "text": "PoiRenderer",
                  "canonicalReference": "@here/harp-mapview!PoiRenderer:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "poiRenderer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TextElementStyle#renderParams:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "renderParams: "
                },
                {
                  "kind": "Reference",
                  "text": "TextRenderParameters",
                  "canonicalReference": "@here/harp-text-canvas!TextRenderParameters:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "renderParams",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TextElementStyle#textCanvas:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "textCanvas?: "
                },
                {
                  "kind": "Reference",
                  "text": "TextCanvas",
                  "canonicalReference": "@here/harp-text-canvas!TextCanvas:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textCanvas",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!TextPickResult:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TextPickResult extends "
            },
            {
              "kind": "Reference",
              "text": "PickResult",
              "canonicalReference": "@here/harp-mapview!PickResult:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TextPickResult",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TextPickResult#text:member",
              "docComment": "/**\n * Text of the picked [[TextElement]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "text",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!TextStyleCache:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TextStyleCache "
            }
          ],
          "releaseTag": "Public",
          "name": "TextStyleCache",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!TextStyleCache:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `TextStyleCache` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(m_theme: "
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@here/harp-datasource-protocol!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "m_theme",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TextStyleCache#createLayoutStyle:member(1)",
              "docComment": "/**\n * Create the appropriate [[TextLayoutStyle]] to use for a label. Depends heavily on the label's [[Technique]] and the current zoomLevel.\n *\n * @param tile - The [[Tile]] to process.\n *\n * @param technique - Label's technique.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createLayoutStyle(tile: "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": ", technique: "
                },
                {
                  "kind": "Reference",
                  "text": "TextTechnique",
                  "canonicalReference": "@here/harp-datasource-protocol!TextTechnique:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "PoiTechnique",
                  "canonicalReference": "@here/harp-datasource-protocol!PoiTechnique:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "LineMarkerTechnique",
                  "canonicalReference": "@here/harp-datasource-protocol!LineMarkerTechnique:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TextLayoutStyle",
                  "canonicalReference": "@here/harp-text-canvas!TextLayoutStyle:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tile",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "technique",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  }
                }
              ],
              "name": "createLayoutStyle"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TextStyleCache#createRenderStyle:member(1)",
              "docComment": "/**\n * Gets the appropriate [[TextRenderStyle]] to use for a label. Depends heavily on the label's [[Technique]] and the current zoomLevel.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createRenderStyle(tile: "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": ", technique: "
                },
                {
                  "kind": "Reference",
                  "text": "TextTechnique",
                  "canonicalReference": "@here/harp-datasource-protocol!TextTechnique:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "PoiTechnique",
                  "canonicalReference": "@here/harp-datasource-protocol!PoiTechnique:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "LineMarkerTechnique",
                  "canonicalReference": "@here/harp-datasource-protocol!LineMarkerTechnique:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TextRenderStyle",
                  "canonicalReference": "@here/harp-text-canvas!TextRenderStyle:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tile",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "technique",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  }
                }
              ],
              "name": "createRenderStyle"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TextStyleCache#getTextElementStyle:member(1)",
              "docComment": "/**\n * Retrieves a [[TextElementStyle]] for [[Theme]]'s [[TextStyle]] id.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTextElementStyle(styleId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TextElementStyle",
                  "canonicalReference": "@here/harp-mapview!TextElementStyle:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "styleId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getTextElementStyle"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TextStyleCache#initializeDefaultTextElementStyle:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "initializeDefaultTextElementStyle(defaultFontCatalogName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "defaultFontCatalogName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "initializeDefaultTextElementStyle"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TextStyleCache#initializeTextElementStyles:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "initializeTextElementStyles(defaultPoiRenderer: "
                },
                {
                  "kind": "Reference",
                  "text": "PoiRenderer",
                  "canonicalReference": "@here/harp-mapview!PoiRenderer:class"
                },
                {
                  "kind": "Content",
                  "text": ", defaultTextCanvas: "
                },
                {
                  "kind": "Reference",
                  "text": "TextCanvas",
                  "canonicalReference": "@here/harp-text-canvas!TextCanvas:class"
                },
                {
                  "kind": "Content",
                  "text": ", textRenderers: "
                },
                {
                  "kind": "Reference",
                  "text": "TextCanvasRenderer",
                  "canonicalReference": "@here/harp-mapview!TextCanvasRenderer:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "defaultPoiRenderer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "defaultTextCanvas",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "textRenderers",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  }
                }
              ],
              "name": "initializeTextElementStyles"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!TextureLoader:class",
          "docComment": "/**\n * A texture loader that supports request headers(e.g. for Authorization)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TextureLoader "
            }
          ],
          "releaseTag": "Public",
          "name": "TextureLoader",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TextureLoader#load:member(1)",
              "docComment": "/**\n * Load an image from url and create a texture\n *\n * @param url - URL to the image\n *\n * @param requestHeaders - Optional request headers to load image(e.g. Authorization)\n *\n * @param crossOrigin - Enable/disable CORS\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "load(url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", requestHeaders?: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestHeaders",
                  "canonicalReference": "@here/harp-mapview!RequestHeaders:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", crossOrigin?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Texture",
                  "canonicalReference": "three!Texture:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "requestHeaders",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "crossOrigin",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "load"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!ThemeLoader:class",
          "docComment": "/**\n * Loads and validates a theme from URL objects.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ThemeLoader "
            }
          ],
          "releaseTag": "Public",
          "name": "ThemeLoader",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!ThemeLoader.isThemeLoaded:member(1)",
              "docComment": "/**\n * Checks if `theme` instance is completely loaded, meaning that `extends` property is resolved.\n *\n * @param theme - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static isThemeLoaded(theme: "
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@here/harp-datasource-protocol!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "FlatTheme",
                  "canonicalReference": "@here/harp-datasource-protocol!FlatTheme:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "theme",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "isThemeLoaded"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!ThemeLoader.load:member(1)",
              "docComment": "/**\n * Loads a [[Theme]] from a remote resource, provided as a URL that points to a JSON-encoded theme.\n *\n * By default, resolves following features of theme:\n *\n * - `extends` - loads and merges all inherited themes (see [[resolveBaseTheme]]) - `ref` - resolves all `ref` instances to their values defined in `definitions` section of theme (see [[resolveThemeReferences]])\n *\n * Relative URIs of reference resources are resolved to full URL using the document's base URL (see [[resolveUrls]]).\n *\n * Custom URIs (of theme itself and of resources referenced by theme) may be resolved with by providing [[UriResolver]] using [[ThemeLoadOptions.uriResolver]] option.\n *\n * @param theme - [[Theme]] instance or theme URL to the theme.\n *\n * @param options - Optional, a [[ThemeLoadOptions]] objects containing any custom settings for this load request.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static load(theme: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@here/harp-datasource-protocol!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "FlatTheme",
                  "canonicalReference": "@here/harp-datasource-protocol!FlatTheme:type"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "ThemeLoadOptions",
                  "canonicalReference": "@here/harp-mapview!ThemeLoadOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@here/harp-datasource-protocol!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "theme",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "load"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!ThemeLoader.loadAsync:member(1)",
              "docComment": "/**\n * @deprecated\n *\n * Please use `ThemeLoader.load`\n *\n * Loads a [[Theme]] from a remote resource, provided as a URL that points to a JSON-encoded theme.\n *\n * @param themeUrl - The URL to the theme.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static loadAsync(themeUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Theme",
                  "canonicalReference": "@here/harp-datasource-protocol!Theme:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "themeUrl",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "loadAsync"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!ThemeLoadOptions:interface",
          "docComment": "/**\n * Options to customize [[Theme]] loading process.\n *\n * @see [[ThemeLoader.load]]\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ThemeLoadOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "ThemeLoadOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ThemeLoadOptions#logger:member",
              "docComment": "/**\n * Custom logging channel on which diagnostics and warnings will be reported.\n *\n * If not specified, [[ThemeLoader.load]] will log to `console`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "logger?: "
                },
                {
                  "kind": "Reference",
                  "text": "ISimpleChannel",
                  "canonicalReference": "@here/harp-utils!ISimpleChannel:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "logger",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ThemeLoadOptions#maxInheritanceDepth:member",
              "docComment": "/**\n * Maximum recursion depth when resolving base themes through [[[Theme]]s `extends` property.\n *\n * @default [[DEFAULT_MAX_THEME_INTHERITANCE_DEPTH]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxInheritanceDepth?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxInheritanceDepth",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ThemeLoadOptions#resolveDefinitions:member",
              "docComment": "/**\n * Whether to resolve `ref` expressions in `definition` and `styles` elements.\n *\n * @default `false`, as datasources resolve definitions in [[StyleSetEvaluator]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resolveDefinitions?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "resolveDefinitions",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ThemeLoadOptions#resolveIncludeUris:member",
              "docComment": "/**\n * Resolve the URIs of inherited themes (using `extends` feature). If true, [[uriResolver]] will be used to resolve the URI  @default true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resolveIncludeUris?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "resolveIncludeUris",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ThemeLoadOptions#resolveResourceUris:member",
              "docComment": "/**\n * Resolve the URIs to resources like fonts, icons, ... If true, [[uriResolver]] will be used to resolve the URI  @default true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resolveResourceUris?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "resolveResourceUris",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ThemeLoadOptions#signal:member",
              "docComment": "/**\n * An `AbortSignal` object instance; allows you to communicate with a loading process (including fetch requests) request and abort it if desired via an `AbortController`.\n *\n * Modeled after Web APIs `fetch`s `init.signal`.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch  @see https://developer.mozilla.org/en-US/docs/Web/API/AbortController\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "signal?: "
                },
                {
                  "kind": "Reference",
                  "text": "AbortSignal",
                  "canonicalReference": "!AbortSignal:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "signal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!ThemeLoadOptions#uriResolver:member",
              "docComment": "/**\n * Resolve asset `URI`s referenced in `Theme` assets using this resolver.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "uriResolver?: "
                },
                {
                  "kind": "Reference",
                  "text": "UriResolver",
                  "canonicalReference": "@here/harp-utils!UriResolver:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "uriResolver",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!Tile:class",
          "docComment": "/**\n * The class that holds the tiled data for a [[DataSource]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Tile implements "
            },
            {
              "kind": "Reference",
              "text": "CachedResource",
              "canonicalReference": "@here/harp-utils!CachedResource:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Tile",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!Tile:constructor(1)",
              "docComment": "/**\n * Creates a new [[Tile]].\n *\n * @param dataSource - The [[DataSource]] that created this [[Tile]].\n *\n * @param tileKey - The unique identifier for this [[Tile]]. Currently only up to level 24 is supported, because of the use of the upper bits for the offset.\n *\n * @param offset - The optional offset, this is an integer which represents what multiple of 360 degrees to shift, only useful for flat projections, hence optional.\n *\n * @param localTangentSpace - Whether the tile geometry is in local tangent space or not.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(dataSource: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSource",
                  "canonicalReference": "@here/harp-mapview!DataSource:class"
                },
                {
                  "kind": "Content",
                  "text": ", tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", localTangentSpace?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dataSource",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "localTangentSpace",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#addBlockingElement:member(1)",
              "docComment": "/**\n * Adds a [[PathBlockingElement]] to this `Tile`. This path has the highest priority and blocks all other labels. There maybe in future a use case to give it a priority, but as that isn't yet required, it is left to be implemented later if required.\n *\n * @param blockingElement - Element which should block all other labels.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addBlockingElement(blockingElement: "
                },
                {
                  "kind": "Reference",
                  "text": "PathBlockingElement",
                  "canonicalReference": "@here/harp-mapview!PathBlockingElement:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "blockingElement",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addBlockingElement"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#addOwnedTexture:member(1)",
              "docComment": "/**\n * Add ownership of a texture to this tile. The texture will be disposed if the `Tile` is disposed.\n *\n * @param texture - Texture to be owned by the `Tile`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addOwnedTexture(texture: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Texture",
                  "canonicalReference": "three!Texture:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "texture",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "addOwnedTexture"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#addTextElement:member(1)",
              "docComment": "/**\n * Adds a [[TextElement]] to this `Tile`, which is added to the visible set of [[TextElement]]s based on the capacity and visibility. The [[TextElement]]'s priority controls if or when it becomes visible.\n *\n * To ensure that a TextElement is visible, use a high value for its priority, such as `TextElement.HIGHEST_PRIORITY`. Since the number of visible TextElements is limited by the screen space, not all TextElements are visible at all times.\n *\n * @param textElement - The TextElement to add.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addTextElement(textElement: "
                },
                {
                  "kind": "Reference",
                  "text": "TextElement",
                  "canonicalReference": "@here/harp-mapview!TextElement:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "textElement",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addTextElement"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#addUserTextElement:member(1)",
              "docComment": "/**\n * Adds a developer-defined [[TextElement]] to this `Tile`. The [[TextElement]] is always visible, if it's in the map's currently visible area.\n *\n * @deprecated\n *\n * use [[addTextElement]].\n *\n * @param textElement - The Text element to add.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addUserTextElement(textElement: "
                },
                {
                  "kind": "Reference",
                  "text": "TextElement",
                  "canonicalReference": "@here/harp-mapview!TextElement:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "textElement",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addUserTextElement"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#allGeometryLoaded:member",
              "docComment": "/**\n * `True` if all geometry of the `Tile` has been loaded.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get allGeometryLoaded(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "allGeometryLoaded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#animatedExtrusionTileHandler:member",
              "docComment": "/**\n * Handler for animation of `Tile` geometries.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get animatedExtrusionTileHandler(): "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedExtrusionTileHandler",
                  "canonicalReference": "@here/harp-mapview!AnimatedExtrusionTileHandler:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset animatedExtrusionTileHandler(handler: "
                },
                {
                  "kind": "Reference",
                  "text": "AnimatedExtrusionTileHandler",
                  "canonicalReference": "@here/harp-mapview!AnimatedExtrusionTileHandler:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined);"
                }
              ],
              "releaseTag": "Public",
              "name": "animatedExtrusionTileHandler",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#basicGeometryLoaded:member",
              "docComment": "/**\n * `True` if the basic geometry has been loaded, and the `Tile` is ready for display.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get basicGeometryLoaded(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "basicGeometryLoaded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#blockingElements:member",
              "docComment": "/**\n * Get the current blocking elements.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get blockingElements(): "
                },
                {
                  "kind": "Reference",
                  "text": "PathBlockingElement",
                  "canonicalReference": "@here/harp-mapview!PathBlockingElement:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "blockingElements",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#boundingBox:member",
              "docComment": "/**\n * Gets the tile's bounding box.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get boundingBox(): "
                },
                {
                  "kind": "Reference",
                  "text": "OrientedBox3",
                  "canonicalReference": "@here/harp-geoutils!OrientedBox3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "boundingBox",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#center:member",
              "docComment": "/**\n * The center of this `Tile` in world coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get center(): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "center",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#clear:member(1)",
              "docComment": "/**\n * Frees the rendering resources allocated by this `Tile`.\n *\n * The default implementation of this method frees the geometries and the materials for all the reachable objects. Textures are freed if they are owned by this `Tile` (i.e. if they where created by this `Tile`or if the ownership was explicitely set to this `Tile` by [[addOwnedTexture]]).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clear(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clear"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#clearTextElements:member(1)",
              "docComment": "/**\n * Removes all [[TextElement]] from the tile.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearTextElements(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clearTextElements"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#computeWorldOffsetX:member(1)",
              "docComment": "/**\n * Computes the offset in the x world coordinates corresponding to this tile, based on its [[offset]].\n *\n * @returns The x offset.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "computeWorldOffsetX(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "computeWorldOffsetX"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#copyrightInfo:member",
              "docComment": "/**\n * Copyright information of this `Tile`'s data.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copyrightInfo?: "
                },
                {
                  "kind": "Reference",
                  "text": "CopyrightInfo",
                  "canonicalReference": "@here/harp-mapview!CopyrightInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "copyrightInfo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#dataSource:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly dataSource: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSource",
                  "canonicalReference": "@here/harp-mapview!DataSource:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dataSource",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#decodedTile:member",
              "docComment": "/**\n * Gets the decoded tile; it is removed after geometry handling.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get decodedTile(): "
                },
                {
                  "kind": "Reference",
                  "text": "DecodedTile",
                  "canonicalReference": "@here/harp-datasource-protocol!DecodedTile:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset decodedTile(decodedTile: "
                },
                {
                  "kind": "Reference",
                  "text": "DecodedTile",
                  "canonicalReference": "@here/harp-datasource-protocol!DecodedTile:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined);"
                }
              ],
              "releaseTag": "Public",
              "name": "decodedTile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#dependencies:member",
              "docComment": "/**\n * The optional list of HERE TileKeys of tiles with geometries that cross the boundaries of this `Tile`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly dependencies: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dependencies",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#didRender:member(1)",
              "docComment": "/**\n * Called after [[MapView]] has rendered this `Tile`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "didRender(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "didRender"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#dispose:member(1)",
              "docComment": "/**\n * Disposes this `Tile`, freeing all geometries and materials for the reachable objects.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispose(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "dispose"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#disposed:member",
              "docComment": "/**\n * Returns `true` if this `Tile` has been disposed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get disposed(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "disposed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#forceHasGeometry:member(1)",
              "docComment": "/**\n * Overrides the default value for [[hasGeometry]] if value is not `undefined`.\n *\n * @param value - A new value for the [[hasGeometry]] flag.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forceHasGeometry(value: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "forceHasGeometry"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#frameNumLastRequested:member",
              "docComment": "/**\n * Keeping some stats for the individual [[Tile]]s to analyze caching behavior.\n *\n * The frame the [[Tile]] was last requested. This is required to know when the given [[Tile]] can be removed from the cache.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "frameNumLastRequested: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "frameNumLastRequested",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#frameNumLastVisible:member",
              "docComment": "/**\n * The last frame this `Tile` has been rendered (or was in the visible set). Used to determine visibility of `Tile` at the end of a frame, if the number is the current frame number, it is visible.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "frameNumLastVisible: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "frameNumLastVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#frameNumVisible:member",
              "docComment": "/**\n * The frame the `Tile` was first visible.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "frameNumVisible: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "frameNumVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#geoBox:member",
              "docComment": "/**\n * The bounding box of this `Tile` in geocoordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly geoBox: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoBox",
                  "canonicalReference": "@here/harp-geoutils!GeoBox:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "geoBox",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#getResourceInfo:member(1)",
              "docComment": "/**\n * Compute [[TileResourceInfo]] of this `Tile`. May be using a cached value. The method `invalidateResourceInfo` can be called beforehand to force a recalculation.\n *\n * @returns `TileResourceInfo` for this `Tile`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getResourceInfo(): "
                },
                {
                  "kind": "Reference",
                  "text": "TileResourceInfo",
                  "canonicalReference": "@here/harp-mapview!TileResourceInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getResourceInfo"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#hasGeometry:member",
              "docComment": "/**\n * MapView checks if this `Tile` is ready to be rendered while culling.\n *\n * By default, MapView checks if the [[objects]] list is not empty. However, you can override this check by manually setting this property.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get hasGeometry(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "hasGeometry",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#hasTextElements:member(1)",
              "docComment": "/**\n * Returns true if the `Tile` has any text elements to render.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasTextElements(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "hasTextElements"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#invalidateResourceInfo:member(1)",
              "docComment": "/**\n * Force invalidation of the cached [[TileResourceInfo]]. Useful after the `Tile` has been modified.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "invalidateResourceInfo(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "invalidateResourceInfo"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#isVisible:member",
              "docComment": "/**\n * The visibility status of the [[Tile]]. It is actually visible or planned to become visible.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get isVisible(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset isVisible(visible: boolean);"
                }
              ],
              "releaseTag": "Public",
              "name": "isVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#levelOffset:member",
              "docComment": "/**\n * @hidden\n *\n * Used to tell if the Tile is used temporarily as a fallback tile.\n *\n * levelOffset is in in the range [-quadTreeSearchDistanceUp, quadTreeSearchDistanceDown], where these values come from the [[VisibleTileSetOptions]]\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "levelOffset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "levelOffset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#load:member(1)",
              "docComment": "/**\n * Loads this `Tile` geometry.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "load(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "load"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#loadingFinished:member(1)",
              "docComment": "/**\n * Called by the [[TileLoader]] after the `Tile` has finished loading its map data. Can be used to add content to the `Tile`. The [[DecodedTile]] should still be available.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadingFinished(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "loadingFinished"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#localTangentSpace:member",
              "docComment": "/**\n * Whether the data of this tile is in local tangent space or not. If the data is in local tangent space (i.e. up vector is (0,0,1) for high zoomlevels) then [[MapView]] will rotate the objects before rendering using the rotation matrix of the oriented [[boundingBox]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get localTangentSpace(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "localTangentSpace",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#mapView:member",
              "docComment": "/**\n * The [[MapView]] this `Tile` belongs to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get mapView(): "
                },
                {
                  "kind": "Reference",
                  "text": "MapView",
                  "canonicalReference": "@here/harp-mapview!MapView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "mapView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#memoryUsage:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get memoryUsage(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "memoryUsage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#numFramesVisible:member",
              "docComment": "/**\n * After removing from cache, this is the number of frames the `Tile` was visible.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "numFramesVisible: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "numFramesVisible",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#objects:member",
              "docComment": "/**\n * A list of the THREE.js objects stored in this `Tile`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly objects: "
                },
                {
                  "kind": "Reference",
                  "text": "TileObject",
                  "canonicalReference": "@here/harp-mapview!TileObject:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "objects",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#offset:member",
              "docComment": "/**\n * The optional offset, this is an integer which represents what multiple of 360 degrees to shift, only useful for flat projections, hence optional.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get offset(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset offset(offset: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "offset",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#preparedTextPaths:member",
              "docComment": "/**\n * @hidden\n *\n * Prepared text geometries optimized for display.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected preparedTextPaths: "
                },
                {
                  "kind": "Reference",
                  "text": "TextPathGeometry",
                  "canonicalReference": "@here/harp-datasource-protocol!TextPathGeometry:interface"
                },
                {
                  "kind": "Content",
                  "text": "[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "preparedTextPaths",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#projection:member",
              "docComment": "/**\n * The [[Projection]] currently used by the [[MapView]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get projection(): "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "projection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#removeDecodedTile:member(1)",
              "docComment": "/**\n * Remove the decodedTile when no longer needed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeDecodedTile(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "removeDecodedTile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#removeTextElement:member(1)",
              "docComment": "/**\n * Removes a [[TextElement]] from this `Tile`. For the element to be removed successfully, the priority of the [[TextElement]] has to be equal to its priority when it was added.\n *\n * @param textElement - The TextElement to remove.\n *\n * @returns `true` if the TextElement has been removed successfully; `false` otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeTextElement(textElement: "
                },
                {
                  "kind": "Reference",
                  "text": "TextElement",
                  "canonicalReference": "@here/harp-mapview!TextElement:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "textElement",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "removeTextElement"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#removeUserTextElement:member(1)",
              "docComment": "/**\n * Removes a developer-defined [[TextElement]] from this `Tile`.\n *\n * @deprecated\n *\n * use [[removeTextElement]].\n *\n * @param textElement - A developer-defined TextElement to remove.\n *\n * @returns `true` if the element has been removed successfully; `false` otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeUserTextElement(textElement: "
                },
                {
                  "kind": "Reference",
                  "text": "TextElement",
                  "canonicalReference": "@here/harp-mapview!TextElement:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "textElement",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "removeUserTextElement"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#resetVisibilityCounter:member(1)",
              "docComment": "/**\n * Reset the visibility counter. This will force the visibility check to be rerun on all objects in this `Tile`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resetVisibilityCounter(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "resetVisibilityCounter"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#shouldDisposeObjectGeometry:member(1)",
              "docComment": "/**\n * Called when the default implementation of `dispose()` needs to free the geometry of a `Tile` object.\n *\n * @param object - The object that references the geometry.\n *\n * @returns `true` if the geometry can be disposed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldDisposeObjectGeometry(object: "
                },
                {
                  "kind": "Reference",
                  "text": "TileObject",
                  "canonicalReference": "@here/harp-mapview!TileObject:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "shouldDisposeObjectGeometry"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#shouldDisposeObjectMaterial:member(1)",
              "docComment": "/**\n * Called when the default implementation of `dispose()` needs to free a `Tile` object's material.\n *\n * @param object - The object referencing the geometry.\n *\n * @returns `true` if the material can be disposed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldDisposeObjectMaterial(object: "
                },
                {
                  "kind": "Reference",
                  "text": "TileObject",
                  "canonicalReference": "@here/harp-mapview!TileObject:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "shouldDisposeObjectMaterial"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#shouldDisposeTexture:member(1)",
              "docComment": "/**\n * Called when the default implementation of `dispose()` needs to free a Texture that is part of a `Tile` object's material.\n *\n * @param texture - The texture about to be disposed.\n *\n * @returns `true` if the texture can be disposed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shouldDisposeTexture(texture: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Texture",
                  "canonicalReference": "three!Texture:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "texture",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "shouldDisposeTexture"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#skipRendering:member",
              "docComment": "/**\n * If the tile should not be rendered, this is used typically when the tile in question is completely covered by another tile and therefore can be skipped without any visual impact. Setting this value directly affects the [[willRender]] method, unless overriden by deriving classes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "skipRendering: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "skipRendering",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#textElementsChanged:member",
              "docComment": "/**\n * Gets the current modification state for the list of [[TextElement]]s in the `Tile`. If the value is `true` the TextElement is placed for rendering during the next frame.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get textElementsChanged(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset textElementsChanged(changed: boolean);"
                }
              ],
              "releaseTag": "Public",
              "name": "textElementsChanged",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#textStyleCache:member",
              "docComment": "/**\n * Text style cache for this tile.  @hidden\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get textStyleCache(): "
                },
                {
                  "kind": "Reference",
                  "text": "TileTextStyleCache",
                  "canonicalReference": "@here/harp-mapview!TileTextStyleCache:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "textStyleCache",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#tileGeometryLoader:member",
              "docComment": "/**\n * Gets the [[TileGeometryLoader]] that manages this tile.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get tileGeometryLoader(): "
                },
                {
                  "kind": "Reference",
                  "text": "TileGeometryLoader",
                  "canonicalReference": "@here/harp-mapview!TileGeometryLoader:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset tileGeometryLoader(tileGeometryLoader: "
                },
                {
                  "kind": "Reference",
                  "text": "TileGeometryLoader",
                  "canonicalReference": "@here/harp-mapview!TileGeometryLoader:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined);"
                }
              ],
              "releaseTag": "Public",
              "name": "tileGeometryLoader",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#tileKey:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tileKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#tileLoader:member",
              "docComment": "/**\n * Gets the [[ITileLoader]] that manages this tile.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get tileLoader(): "
                },
                {
                  "kind": "Reference",
                  "text": "ITileLoader",
                  "canonicalReference": "@here/harp-mapview!ITileLoader:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset tileLoader(tileLoader: "
                },
                {
                  "kind": "Reference",
                  "text": "ITileLoader",
                  "canonicalReference": "@here/harp-mapview!ITileLoader:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined);"
                }
              ],
              "releaseTag": "Public",
              "name": "tileLoader",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#uniqueKey:member",
              "docComment": "/**\n * Gets the key to uniquely represent this tile (based on the [[tileKey]] and [[offset]]), note this key is only unique within the given [[DataSource]], to get a key which is unique across [[DataSource]]s see [[DataSourceCache.getKeyForTile]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get uniqueKey(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "uniqueKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#update:member(1)",
              "docComment": "/**\n * Update tile for current map view zoom level\n *\n * @param zoomLevel - Zoom level of the map view\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "update(zoomLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "zoomLevel",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "update"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#visibilityCounter:member",
              "docComment": "/**\n * Version stamp of the visibility set in the [[TileManager]]. If the counter is different, the visibility of the Tile's objects has to be calculated. Optimization to reduce overhead of computing visibility.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visibilityCounter: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "visibilityCounter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!Tile#visibleArea:member",
              "docComment": "/**\n * Estimated visible area of tile used for sorting the priorities during loading.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get visibleArea(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset visibleArea(area: number);"
                }
              ],
              "releaseTag": "Public",
              "name": "visibleArea",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!Tile#willRender:member(1)",
              "docComment": "/**\n * Called before [[MapView]] starts rendering this `Tile`.\n *\n * @param zoomLevel - The current zoom level.\n *\n * @returns Returns `true` if this `Tile` should be rendered. Influenced directly by the [[skipRendering]] property unless specifically overriden in deriving classes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "willRender(_zoomLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "_zoomLevel",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "willRender"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!TileDataAccessor:class",
          "docComment": "/**\n * An accessor for all geometries in a tile. This class uses a client-provided [[ITileDataVisitor]] to visit all objects, based on filtering options specified by both, the `TileDataAccessor` and the visitor itself.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TileDataAccessor "
            }
          ],
          "releaseTag": "Public",
          "name": "TileDataAccessor",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!TileDataAccessor:constructor(1)",
              "docComment": "/**\n * Constructs a `TileDataAccessor` instance.\n *\n * @param tile - The tile to access.\n *\n * @param visitor - The visitor.\n *\n * @param options - Options for the tile.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(tile: "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": ", visitor: "
                },
                {
                  "kind": "Reference",
                  "text": "ITileDataVisitor",
                  "canonicalReference": "@here/harp-mapview!ITileDataVisitor:interface"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "TileDataAccessorOptions",
                  "canonicalReference": "@here/harp-mapview!TileDataAccessorOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tile",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "visitor",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TileDataAccessor#getBufferGeometry:member(1)",
              "docComment": "/**\n * Gets the `BufferGeometry` from the specified object. This function requires the attribute `position` in `BufferGeometry` to be set.\n *\n * @param object - The object from which to get the geometry.\n *\n * @returns the geometry of the object, or `undefined`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getBufferGeometry(object: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "three!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "BufferGeometry",
                  "canonicalReference": "three!BufferGeometry:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "getBufferGeometry"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TileDataAccessor#getGeometryAccessor:member(1)",
              "docComment": "/**\n * Obtains an accessor for the nonindexed geometry. This function may return `undefined` if the accessor is not implemented.\n *\n * @param geometryType - The type of geometry.\n *\n * @param object - The object for which to access the attributes and geometry.\n *\n * @param bufferGeometry - The object's `BufferGeometry`.\n *\n * @returns an accessor for a specified object, if available.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getGeometryAccessor(geometryType: "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryType",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryType:enum"
                },
                {
                  "kind": "Content",
                  "text": ", object: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "three!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": ", bufferGeometry: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "BufferGeometry",
                  "canonicalReference": "three!BufferGeometry:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IGeometryAccessor",
                  "canonicalReference": "@here/harp-mapview!IGeometryAccessor:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "geometryType",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "bufferGeometry",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  }
                }
              ],
              "name": "getGeometryAccessor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TileDataAccessor#getIndexedGeometryAccessor:member(1)",
              "docComment": "/**\n * Obtains an accessor for the indexed geometry. This function may return `undefined` if the accessor is not implemented.\n *\n * @param geometryType - The type of geometry.\n *\n * @param object - The object for which to access the attributes and geometry.\n *\n * @param bufferGeometry - The object's `BufferGeometry`.\n *\n * @returns an accessor for a specified object, if available.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getIndexedGeometryAccessor(geometryType: "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryType",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryType:enum"
                },
                {
                  "kind": "Content",
                  "text": ", object: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "three!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": ", bufferGeometry: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "BufferGeometry",
                  "canonicalReference": "three!BufferGeometry:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "IGeometryAccessor",
                  "canonicalReference": "@here/harp-mapview!IGeometryAccessor:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "geometryType",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "bufferGeometry",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 8
                  }
                }
              ],
              "name": "getIndexedGeometryAccessor"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TileDataAccessor#tile:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tile: "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tile",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TileDataAccessor#visitAll:member(1)",
              "docComment": "/**\n * Calls the visitor on all objects in the tile.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visitAll(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "visitAll"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TileDataAccessor#visitMesh:member(1)",
              "docComment": "/**\n * Visit the object.\n *\n * @param meshObject - Object of type `Mesh`.\n *\n * @param featureData - Dataset stored along with the object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected visitMesh(meshObject: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Mesh",
                  "canonicalReference": "three!Mesh:class"
                },
                {
                  "kind": "Content",
                  "text": ", featureData: "
                },
                {
                  "kind": "Reference",
                  "text": "TileFeatureData",
                  "canonicalReference": "@here/harp-mapview!TileFeatureData:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "meshObject",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "featureData",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "visitMesh"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TileDataAccessor#visitObject:member(1)",
              "docComment": "/**\n * Visits a single object. This function should normally be called during visiting.\n *\n * @param object - The object to visit.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected visitObject(object: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Object3D",
                  "canonicalReference": "three!Object3D:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "visitObject"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!TileDataAccessorOptions:interface",
          "docComment": "/**\n * An interface that provides options for [[TileDataAccessor]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TileDataAccessorOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "TileDataAccessorOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileDataAccessorOptions#onlyWithFeatureIds:member",
              "docComment": "/**\n * Limit to objects that have `featureID`s.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onlyWithFeatureIds?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "onlyWithFeatureIds",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileDataAccessorOptions#wantsAll:member",
              "docComment": "/**\n * Sets and overrides `wantPoints`, `wantLines`, `wantAreas`, `wantObject3D`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wantsAll?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "wantsAll",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileDataAccessorOptions#wantsAreas:member",
              "docComment": "/**\n * `true` to visit area objects.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wantsAreas?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "wantsAreas",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileDataAccessorOptions#wantsLines:member",
              "docComment": "/**\n * `true` to visit lines.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wantsLines?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "wantsLines",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileDataAccessorOptions#wantsObject3D:member",
              "docComment": "/**\n * `true` to visit general 3D objects.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wantsObject3D?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "wantsObject3D",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileDataAccessorOptions#wantsPoints:member",
              "docComment": "/**\n * `true` to visit points.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wantsPoints?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "wantsPoints",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!TileDisplacementMap:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TileDisplacementMap "
            }
          ],
          "releaseTag": "Public",
          "name": "TileDisplacementMap",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileDisplacementMap#displacementMap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "displacementMap: "
                },
                {
                  "kind": "Reference",
                  "text": "DisplacementMap",
                  "canonicalReference": "@here/harp-mapview!DisplacementMap:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "displacementMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileDisplacementMap#geoBox:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "geoBox: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoBox",
                  "canonicalReference": "@here/harp-geoutils!GeoBox:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "geoBox",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileDisplacementMap#texture:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "texture: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "DataTexture",
                  "canonicalReference": "three!DataTexture:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "texture",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileDisplacementMap#tileKey:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tileKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!TileFeatureData:interface",
          "docComment": "/**\n * An interface for optional feature data that is saved in a `THREE.Object3D`'s `userData` property.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TileFeatureData "
            }
          ],
          "releaseTag": "Public",
          "name": "TileFeatureData",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileFeatureData#geometryType:member",
              "docComment": "/**\n * The original type of geometry.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "geometryType?: "
                },
                {
                  "kind": "Reference",
                  "text": "GeometryType",
                  "canonicalReference": "@here/harp-datasource-protocol!GeometryType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "geometryType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileFeatureData#objInfos:member",
              "docComment": "/**\n * An optional object containing properties defined by the developer. It has the same size as the list of IDs and the starting indices (starts).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "objInfos?: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<{} | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "objInfos",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileFeatureData#starts:member",
              "docComment": "/**\n * An optional array of sorted indices into geometry where the feature starts. The lists of IDs and starting indices (starts) must have the same size. Feature i starts at starts[i] and ends at starts[i+1]-1, except for the last feature, which ends at the last index in the object's geometry.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "starts?: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "starts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@here/harp-mapview!TileLoaderState:enum",
          "docComment": "/**\n * Missing Typedoc\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum TileLoaderState "
            }
          ],
          "releaseTag": "Public",
          "name": "TileLoaderState",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!TileLoaderState.Canceled:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Canceled = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "releaseTag": "Public",
              "name": "Canceled",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!TileLoaderState.Decoding:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Decoding = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "Decoding",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!TileLoaderState.Failed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Failed = "
                },
                {
                  "kind": "Content",
                  "text": "6"
                }
              ],
              "releaseTag": "Public",
              "name": "Failed",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!TileLoaderState.Initialized:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Initialized = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Initialized",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!TileLoaderState.Loaded:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Loaded = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "Loaded",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!TileLoaderState.Loading:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Loading = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Loading",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-mapview!TileLoaderState.Ready:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Ready = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Public",
              "name": "Ready",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-mapview!TileObject:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TileObject = "
            },
            {
              "kind": "Content",
              "text": "THREE."
            },
            {
              "kind": "Reference",
              "text": "Object3D",
              "canonicalReference": "three!Object3D:class"
            },
            {
              "kind": "Content",
              "text": " & {\n    displacement?: THREE."
            },
            {
              "kind": "Reference",
              "text": "Vector3",
              "canonicalReference": "three!Vector3:class"
            },
            {
              "kind": "Content",
              "text": ";\n    _backupRenderOrder?: number;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TileObject",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@here/harp-mapview!TileOffsetUtils:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace TileOffsetUtils "
            }
          ],
          "releaseTag": "Public",
          "name": "TileOffsetUtils",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!TileOffsetUtils.extractOffsetAndMortonKeyFromKey:function(1)",
              "docComment": "/**\n * Extracts the offset and morton key from the given key (must be created by: [[getKeyForTileKeyAndOffset]])\n *\n * Note, we can't use bitshift operators in Javascript because they work on 32-bit integers, and would truncate the numbers, hence using powers of two.\n *\n * @param key - Key to extract offset and morton key.\n *\n * @param bitshift - How many bits to shift by, must be the same as was used when creating the key.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function extractOffsetAndMortonKeyFromKey(key: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", bitshift?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        offset: number;\n        mortonCode: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "bitshift",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "extractOffsetAndMortonKeyFromKey"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!TileOffsetUtils.getKeyForTileKeyAndOffset:function(1)",
              "docComment": "/**\n * Creates a unique key based on the supplied parameters. Note, the uniqueness is bounded by the bitshift. The [[TileKey.mortonCode()]] supports currently up to 26 levels (this is because 26*2 equals 52, and 2^52 is the highest bit that can be set in an integer in Javascript), the bitshift reduces this accordingly, so given the default bitshift of four, we support up to 24 levels. Given the current support up to level 19 this should be fine.\n *\n * @param tileKey - The unique [[TileKey]] from which to compute the unique key.\n *\n * @param offset - How much the given [[TileKey]] is offset\n *\n * @param bitshift - How much space we have to store the offset. The default of 4 means we have enough space to store 16 unique tiles in a single view.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getKeyForTileKeyAndOffset(tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ", offset: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", bitshift?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "bitshift",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "getKeyForTileKeyAndOffset"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-mapview!TileOffsetUtils.getParentKeyFromKey:function(1)",
              "docComment": "/**\n * Returns the key of the parent. Key must have been computed using the function [[getKeyForTileKeyAndOffset]].\n *\n * @param calculatedKey - Key to decompose\n *\n * @param bitshift - Bit shift used to create the key\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function getParentKeyFromKey(calculatedKey: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", bitshift?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "calculatedKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "bitshift",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getParentKeyFromKey"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!TileResourceInfo:interface",
          "docComment": "/**\n * Simple information about resource usage by the [[Tile]]. Heap and GPU information are estimations.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TileResourceInfo "
            }
          ],
          "releaseTag": "Public",
          "name": "TileResourceInfo",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileResourceInfo#gpuSize:member",
              "docComment": "/**\n * Estimated number of bytes used on the GPU.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gpuSize: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "gpuSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileResourceInfo#heapSize:member",
              "docComment": "/**\n * Estimated number of bytes used on the heap.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "heapSize: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "heapSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileResourceInfo#num3dObjects:member",
              "docComment": "/**\n * Number of [[THREE.Object3D]] in this tile.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "num3dObjects: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "num3dObjects",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileResourceInfo#numTextElements:member",
              "docComment": "/**\n * Number of [[TextElement]]s in this tile.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "numTextElements: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "numTextElements",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileResourceInfo#numUserTextElements:member",
              "docComment": "/**\n * @deprecated\n *\n * This counter has been merged with numTextElements. Number of user [[TextElement]]s in this tile.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "numUserTextElements: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "numUserTextElements",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!TileResourceUsage:interface",
          "docComment": "/**\n * An object that contains information about resources used by a tile.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TileResourceUsage "
            }
          ],
          "releaseTag": "Public",
          "name": "TileResourceUsage",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileResourceUsage#estimatedMemoryUsage:member",
              "docComment": "/**\n * The estimated memory usage, in bytes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "estimatedMemoryUsage: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "estimatedMemoryUsage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileResourceUsage#numColors:member",
              "docComment": "/**\n * The amount of colors used by a tile.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "numColors: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "numColors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileResourceUsage#numGeometries:member",
              "docComment": "/**\n * The amount of geometries used by a tile.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "numGeometries: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "numGeometries",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileResourceUsage#numMaterials:member",
              "docComment": "/**\n * The amount of materials used by a tile.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "numMaterials: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "numMaterials",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileResourceUsage#numObjects:member",
              "docComment": "/**\n * The amount of objects used by a tile.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "numObjects: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "numObjects",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!TileResourceUsage#numVertices:member",
              "docComment": "/**\n * The amount of vertices used by a tile.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "numVertices: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "numVertices",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!TiltViewClipPlanesEvaluator:class",
          "docComment": "/**\n * Evaluates camera clipping planes taking into account ground distance and camera angles.\n *\n * This evaluator provides support for camera with varying tilt (pitch) angle, the angle between camera __look at__ vector and the ground surface normal.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TiltViewClipPlanesEvaluator extends "
            },
            {
              "kind": "Reference",
              "text": "TopViewClipPlanesEvaluator",
              "canonicalReference": "@here/harp-mapview!TopViewClipPlanesEvaluator:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TiltViewClipPlanesEvaluator",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TiltViewClipPlanesEvaluator#evaluateDistancePlanarProj:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected evaluateDistancePlanarProj(camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "three!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": ", projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ", elevationProvider?: "
                },
                {
                  "kind": "Reference",
                  "text": "ElevationProvider",
                  "canonicalReference": "@here/harp-mapview!ElevationProvider:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ViewRanges",
                  "canonicalReference": "@here/harp-datasource-protocol!ViewRanges:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "elevationProvider",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "evaluateDistancePlanarProj"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TiltViewClipPlanesEvaluator#evaluateDistanceSphericalProj:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected evaluateDistanceSphericalProj(camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "three!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": ", projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ", elevationProvider?: "
                },
                {
                  "kind": "Reference",
                  "text": "ElevationProvider",
                  "canonicalReference": "@here/harp-mapview!ElevationProvider:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ViewRanges",
                  "canonicalReference": "@here/harp-datasource-protocol!ViewRanges:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "elevationProvider",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "evaluateDistanceSphericalProj"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TiltViewClipPlanesEvaluator#getFrustumGroundIntersectionDist:member(1)",
              "docComment": "/**\n * Calculate the lengths of frustum planes intersection with the ground plane. This evaluates distances between eye vector (or eye plane in orthographic projection) and ground intersections of top and bottom frustum planes.  @note This method assumes the world surface (ground) to be flat and works only with planar projections.\n *\n * @param camera - The [[THREE.Camera]] instance in use,\n *\n * @param projection - The geo-projection used to convert geographic to world coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getFrustumGroundIntersectionDist(camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "three!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": ", projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        top: number;\n        bottom: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "getFrustumGroundIntersectionDist"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TiltViewClipPlanesEvaluator#getTiltedFovBasedFarPlane:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getTiltedFovBasedFarPlane(d: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", halfFovAngle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", cameraPitch: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "d",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "halfFovAngle",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "cameraPitch",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "getTiltedFovBasedFarPlane"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!Timer:interface",
          "docComment": "/**\n * An interface for a Timer class, that abstracts the basic functions of a Timer. Implemented by SimpleTimer, SampledTimer, and MultiStageTimer.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Timer "
            }
          ],
          "releaseTag": "Public",
          "name": "Timer",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!Timer#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!Timer#now:member(1)",
              "docComment": "/**\n * Samples the timer. Requires that the timer has started. This function does not modify the timer's internal state.\n *\n * @returns Current timer value. `-1` if statistics are disabled.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "now(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "now"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!Timer#reset:member(1)",
              "docComment": "/**\n * Resets value to be able to start again.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reset(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "reset"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!Timer#setValue:member(1)",
              "docComment": "/**\n * Sets the measurement value for the amount of time that has elapsed from start() to stop(). Use this function to override the timer's duration.\n *\n * @param val - The timer's duration.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setValue(val: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "val",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setValue"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!Timer#start:member(1)",
              "docComment": "/**\n * Starts the timer. Returns the current time, based on `Performance.now()`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "start(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "start"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-mapview!Timer#stop:member(1)",
              "docComment": "/**\n * Stops the timer. Requires that the timer has started.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stop(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "stop"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!Timer#value:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly value?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!TopViewClipPlanesEvaluator:class",
          "docComment": "/**\n * Top view, clip planes evaluator that computes view ranges based on ground distance and elevation.\n *\n * This evaluator supports both planar and spherical projections, although it behavior is slightly different in each case. General algorithm sets near plane and far plane close to ground level, but taking into account maximum and minimum elevation of features on the ground.\n *\n * @note This evaluator supports only cameras which are always looking down the ground surface (top-down view) along surface normal and does not preserve correct clip planes when modifying camera pitch (tilt) angle. In simple words it is suitable only for top view camera settings.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TopViewClipPlanesEvaluator extends "
            },
            {
              "kind": "Reference",
              "text": "ElevationBasedClipPlanesEvaluator",
              "canonicalReference": "@here/harp-mapview!ElevationBasedClipPlanesEvaluator:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TopViewClipPlanesEvaluator",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!TopViewClipPlanesEvaluator:constructor(1)",
              "docComment": "/**\n * Allows to setup near/far offsets (margins), rendered geometry elevation relative to sea level as also minimum near plane and maximum far plane distance constraints. It is strongly recommended to set some reasonable [[nearFarMargin]] (offset) between near and far planes to avoid flickering.\n *\n * @param maxElevation - defines near plane offset from the ground in the surface normal direction, positive values allows to render elevated terrain features (mountains, buildings). Defaults to Burj Khalifa building height.\n *\n * @param minElevation - defines far plane offset from the ground surface, negative values moves far plane below the ground level (use it to render depressions). Default zero - sea level.\n *\n * @param nearMin - minimum allowable near plane distance from camera, must be bigger than zero.\n *\n * @param nearFarMarginRatio - minimum distance between near and far plane, as a ratio of average near/far plane distance, it have to be significantly bigger than zero (especially if [[maxElevation]] and [[minElevation]] are equal), otherwise you may notice flickering when rendering, or even render empty scene if frustum planes are almost equal.\n *\n * @param farMaxRatio - maximum ratio between ground and far plane distance, allows to limit viewing distance at overall. Have to be bigger than 1.0.  @note Keep in mind that this evaluator does not evaluate terrain (or building) elevation automatically, to keep such features rendered (between frustum planes) use [[minElevation]], [[maxElevation]] constraints. You may change this parameters at any time, but it requires repeating [[evaluatePlanes]] step, if your camera is moving you need to evaluate planes anyway.  @note You may treat [[minElevation]] and [[maxElevation]] parameters as the maximum and minimum renderable elevation respectively along the surface normal, when camera is constantly looking downwards (top-down view). If you need [[ClipPlanesEvaluator]] for cameras that support tilt or yaw please use [[TiltViewClipPlanesEvaluator]].  @note [[nearFarMaxRatio]] does not limit far plane when spherical projection is in use, the algorithm used there estimates distance to point on tangent where line from camera touches the sphere horizon and there is no reason to clamp it.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(maxElevation?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", minElevation?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", nearMin?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", nearFarMarginRatio?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", farMaxRatio?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "maxElevation",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "minElevation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "nearMin",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "nearFarMarginRatio",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "farMaxRatio",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TopViewClipPlanesEvaluator#evaluateClipPlanes:member(1)",
              "docComment": "/**\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "evaluateClipPlanes(camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "three!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": ", projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ", elevationProvider?: "
                },
                {
                  "kind": "Reference",
                  "text": "ElevationProvider",
                  "canonicalReference": "@here/harp-mapview!ElevationProvider:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ViewRanges",
                  "canonicalReference": "@here/harp-datasource-protocol!ViewRanges:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "elevationProvider",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "evaluateClipPlanes"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TopViewClipPlanesEvaluator#evaluateDistancePlanarProj:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected evaluateDistancePlanarProj(camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "three!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": ", projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ", elevationProvider?: "
                },
                {
                  "kind": "Reference",
                  "text": "ElevationProvider",
                  "canonicalReference": "@here/harp-mapview!ElevationProvider:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ViewRanges",
                  "canonicalReference": "@here/harp-datasource-protocol!ViewRanges:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "elevationProvider",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "evaluateDistancePlanarProj"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TopViewClipPlanesEvaluator#evaluateDistanceSphericalProj:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected evaluateDistanceSphericalProj(camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "three!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": ", projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ", elevationProvider?: "
                },
                {
                  "kind": "Reference",
                  "text": "ElevationProvider",
                  "canonicalReference": "@here/harp-mapview!ElevationProvider:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ViewRanges",
                  "canonicalReference": "@here/harp-datasource-protocol!ViewRanges:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "elevationProvider",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "evaluateDistanceSphericalProj"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TopViewClipPlanesEvaluator#farMaxRatio:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly farMaxRatio: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "farMaxRatio",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TopViewClipPlanesEvaluator#getCameraAltitude:member(1)",
              "docComment": "/**\n * Calculate camera altitude (closest distance) to ground level in world units.\n *\n * @param camera - \n *\n * @param projection - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getCameraAltitude(camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Camera",
                  "canonicalReference": "three!Camera:class"
                },
                {
                  "kind": "Content",
                  "text": ", projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "getCameraAltitude"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TopViewClipPlanesEvaluator#getFovBasedFarPlane:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getFovBasedFarPlane(camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "PerspectiveCamera",
                  "canonicalReference": "three!PerspectiveCamera:class"
                },
                {
                  "kind": "Content",
                  "text": ", d: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", fovAngle: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "d",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "fovAngle",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                },
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 10,
                    "endIndex": 11
                  }
                }
              ],
              "name": "getFovBasedFarPlane"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TopViewClipPlanesEvaluator#getOrthoBasedFarPlane:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getOrthoBasedFarPlane(d: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "d",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getOrthoBasedFarPlane"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TopViewClipPlanesEvaluator#getTangentBasedFarPlane:member(1)",
              "docComment": "/**\n * Calculate far plane depending on furthest visible distance from camera position.\n *\n * Furthest visible distance is assumed to be distance from camera to horizon plus distance from elevated geometry to horizon(so that high objects behind horizon remain visible).\n *\n * @param camera - The camera of the mapview\n *\n * @param d - Distance from camera to origin\n *\n * @param r - Radius of earth\n *\n * @param alpha - Angle between camera eye vector and tangent\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getTangentBasedFarPlane(camera: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "PerspectiveCamera",
                  "canonicalReference": "three!PerspectiveCamera:class"
                },
                {
                  "kind": "Content",
                  "text": ", d: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", alpha: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "camera",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "d",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "alpha",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "name": "getTangentBasedFarPlane"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!TopViewClipPlanesEvaluator#getTangentDistance:member(1)",
              "docComment": "/**\n * Calculate distance from a point to the tangent point of a sphere.\n *\n * Returns zero if point is below surface or only very slightly above surface of sphere.\n *\n * @param d - Distance from point to center of sphere\n *\n * @param r - Radius of sphere\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected getTangentDistance(d: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", r: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "d",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "r",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getTangentDistance"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TopViewClipPlanesEvaluator#m_tmpQuaternion:member",
              "docComment": "/**\n * Helper object for reducing performance impact.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected m_tmpQuaternion: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Quaternion",
                  "canonicalReference": "three!Quaternion:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "m_tmpQuaternion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TopViewClipPlanesEvaluator#m_tmpVectors:member",
              "docComment": "/**\n * Helper for reducing number of objects created at runtime.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected m_tmpVectors: "
                },
                {
                  "kind": "Content",
                  "text": "THREE."
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "m_tmpVectors",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TopViewClipPlanesEvaluator#minimumViewRange:member",
              "docComment": "/**\n * Get minimum view range that is possible to achieve with current evaluator settings.  @note This value will not change after evaluator is constructed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected get minimumViewRange(): "
                },
                {
                  "kind": "Reference",
                  "text": "ViewRanges",
                  "canonicalReference": "@here/harp-datasource-protocol!ViewRanges:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minimumViewRange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TopViewClipPlanesEvaluator#nearFarMarginRatio:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly nearFarMarginRatio: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "nearFarMarginRatio",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!TopViewClipPlanesEvaluator#nearMin:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly nearMin: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "nearMin",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!UrlCopyrightProvider:class",
          "docComment": "/**\n * Copyright provider which retrieves copyright coverage information from provided URL.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class UrlCopyrightProvider extends "
            },
            {
              "kind": "Reference",
              "text": "CopyrightCoverageProvider",
              "canonicalReference": "@here/harp-mapview!CopyrightCoverageProvider:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "UrlCopyrightProvider",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!UrlCopyrightProvider:constructor(1)",
              "docComment": "/**\n * Default constructor.\n *\n * @param m_fetchURL - URL to fetch copyrights data from.\n *\n * @param m_baseScheme - Scheme to get copyrights from.\n *\n * @param m_requestHeaders - Optional request headers for requests(e.g. Authorization)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(m_fetchURL: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", m_baseScheme: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", m_requestHeaders?: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestHeaders",
                  "canonicalReference": "@here/harp-mapview!~RequestHeaders:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", m_transferManager?: "
                },
                {
                  "kind": "Reference",
                  "text": "ITransferManager",
                  "canonicalReference": "@here/harp-transfer-manager!ITransferManager:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "m_fetchURL",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "m_baseScheme",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "m_requestHeaders",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "m_transferManager",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!UrlCopyrightProvider#getCopyrightCoverageData:member(1)",
              "docComment": "/**\n * @inheritdoc\n *\n * @override\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCopyrightCoverageData(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "AreaCopyrightInfo",
                  "canonicalReference": "@here/harp-mapview!AreaCopyrightInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getCopyrightCoverageData"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!UrlCopyrightProvider#setRequestHeaders:member(1)",
              "docComment": "/**\n * Sets request headers.\n *\n * @param headers - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setRequestHeaders(headers: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestHeaders",
                  "canonicalReference": "@here/harp-mapview!~RequestHeaders:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "headers",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "setRequestHeaders"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-mapview!usesObject3D:function(1)",
          "docComment": "/**\n * Determines if a technique uses THREE.Object3D instances.\n *\n * @param technique - The technique to check.\n *\n * @returns true if technique uses THREE.Object3D, false otherwise.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function usesObject3D(technique: "
            },
            {
              "kind": "Reference",
              "text": "Technique",
              "canonicalReference": "@here/harp-datasource-protocol!Technique:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "technique",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "usesObject3D"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-mapview!ViewUpdateCallback:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ViewUpdateCallback = "
            },
            {
              "kind": "Content",
              "text": "() => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ViewUpdateCallback",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!VisibleTileSet:class",
          "docComment": "/**\n * Manages visible [[Tile]]s for [[MapView]].\n *\n * Responsible for election of rendered tiles: - quad-tree traversal - frustum culling - sorting tiles by relevance (visible area) to prioritize load - limiting number of visible tiles - caching tiles - searching cache to replace visible but yet empty tiles with already loaded siblings in nearby zoom levels\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class VisibleTileSet "
            }
          ],
          "releaseTag": "Public",
          "name": "VisibleTileSet",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `VisibleTileSet` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(m_frustumIntersection: "
                },
                {
                  "kind": "Reference",
                  "text": "FrustumIntersection",
                  "canonicalReference": "@here/harp-mapview!FrustumIntersection:class"
                },
                {
                  "kind": "Content",
                  "text": ", m_tileGeometryManager: "
                },
                {
                  "kind": "Reference",
                  "text": "TileGeometryManager",
                  "canonicalReference": "@here/harp-mapview!TileGeometryManager:class"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "VisibleTileSetOptions",
                  "canonicalReference": "@here/harp-mapview!VisibleTileSetOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "m_frustumIntersection",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "m_tileGeometryManager",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet#allVisibleTilesLoaded:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allVisibleTilesLoaded: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "allVisibleTilesLoaded",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet#clearTileCache:member(1)",
              "docComment": "/**\n * Clear the tile cache.\n *\n * Remove the [[Tile]] objects created by cacheable [[DataSource]]. If a [[DataSource]] name is provided, this method restricts the eviction the [[DataSource]] with the given name.\n *\n * @param dataSourceName - The name of the [[DataSource]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearTileCache(dataSource?: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSource",
                  "canonicalReference": "@here/harp-mapview!DataSource:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dataSource",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "clearTileCache"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet#dataSourceTileList:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dataSourceTileList: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSourceTileList",
                  "canonicalReference": "@here/harp-mapview!DataSourceTileList:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dataSourceTileList",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet#disposePendingTiles:member(1)",
              "docComment": "/**\n * Dispose tiles that are marked for removal by [[LRUCache]] algorithm.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disposePendingTiles(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "disposePendingTiles"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet#disposeTile:member(1)",
              "docComment": "/**\n * Dispose a `Tile` from cache, 'dispose()' is also called on the tile to free its resources.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disposeTile(tile: "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tile",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "disposeTile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet#forEachCachedTile:member(1)",
              "docComment": "/**\n * Process callback function [[fun]] with each tile in the cache.\n *\n * Optional [[dataSource]] parameter limits processing to the tiles that belongs to DataSource passed in.\n *\n * @param fun - The callback function to be called.\n *\n * @param dataSource - The optional DataSource reference for tiles selection.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forEachCachedTile(fun: "
                },
                {
                  "kind": "Content",
                  "text": "(tile: "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": ", dataSource?: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSource",
                  "canonicalReference": "@here/harp-mapview!DataSource:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fun",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "dataSource",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "forEachCachedTile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet#forEachVisibleTile:member(1)",
              "docComment": "/**\n * Process callback function [[fun]] with each visible tile in set.\n *\n * @param fun - The callback function to be called.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forEachVisibleTile(fun: "
                },
                {
                  "kind": "Content",
                  "text": "(tile: "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fun",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "forEachVisibleTile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet#getCachedTile:member(1)",
              "docComment": "/**\n * Gets the tile corresponding to the given data source, key and offset from the cache.\n *\n * @param dataSource - The data source the tile belongs to.\n *\n * @param tileKey - The key identifying the tile.\n *\n * @param offset - Tile offset.  @return The tile if found in cache, undefined otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCachedTile(dataSource: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSource",
                  "canonicalReference": "@here/harp-mapview!DataSource:class"
                },
                {
                  "kind": "Content",
                  "text": ", tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dataSource",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "getCachedTile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet#getDataSourceCacheSize:member(1)",
              "docComment": "/**\n * Returns cache size.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getDataSourceCacheSize(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getDataSourceCacheSize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet#getNumberOfVisibleTiles:member(1)",
              "docComment": "/**\n * Retrieves maximum number of visible tiles.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getNumberOfVisibleTiles(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getNumberOfVisibleTiles"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet#getRenderedTile:member(1)",
              "docComment": "/**\n * Gets the tile corresponding to the given data source, key and offset from the rendered tiles.\n *\n * @param dataSource - The data source the tile belongs to.\n *\n * @param tileKey - The key identifying the tile.\n *\n * @param offset - Tile offset.  @return The tile if found among the rendered tiles, undefined otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getRenderedTile(dataSource: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSource",
                  "canonicalReference": "@here/harp-mapview!DataSource:class"
                },
                {
                  "kind": "Content",
                  "text": ", tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dataSource",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "getRenderedTile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet#getRenderedTileAtLocation:member(1)",
              "docComment": "/**\n * Gets the tile corresponding to the given data source and location from the rendered tiles.\n *\n * @param dataSource - The data source the tile belongs to.\n *\n * @param geoPoint - The geolocation included within the tile.  @return The tile if found among the rendered tiles, undefined otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getRenderedTileAtLocation(dataSource: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSource",
                  "canonicalReference": "@here/harp-mapview!DataSource:class"
                },
                {
                  "kind": "Content",
                  "text": ", geoPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dataSource",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "geoPoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "getRenderedTileAtLocation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet#getTile:member(1)",
              "docComment": "/**\n * Gets the tile corresponding to the given data source, key and offset, creating it if necessary.\n *\n * @param dataSource - The data source the tile belongs to.\n *\n * @param tileKey - The key identifying the tile.\n *\n * @param offset - Tile offset.  @return The tile if it was found or created, undefined otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTile(dataSource: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSource",
                  "canonicalReference": "@here/harp-mapview!DataSource:class"
                },
                {
                  "kind": "Content",
                  "text": ", tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Tile",
                  "canonicalReference": "@here/harp-mapview!Tile:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dataSource",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "getTile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet#markTilesDirty:member(1)",
              "docComment": "/**\n * Visit each tile in visible, rendered, and cached sets.\n *\n * * Visible and temporarily rendered tiles will be marked for update and retained. * Cached but not rendered/visible will be evicted.\n *\n * @param dataSource - If passed, only the tiles from this [[DataSource]] instance are processed. If `undefined`, tiles from all [[DataSource]]s are processed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "markTilesDirty(dataSource?: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSource",
                  "canonicalReference": "@here/harp-mapview!DataSource:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dataSource",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "markTilesDirty"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet#options:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "options: "
                },
                {
                  "kind": "Reference",
                  "text": "VisibleTileSetOptions",
                  "canonicalReference": "@here/harp-mapview!VisibleTileSetOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet#removeDataSource:member(1)",
              "docComment": "/**\n * Removes all internal bookkeeping entries and cache related to specified datasource.\n *\n * Called by [[MapView]] when [[DataSource]] has been removed from [[MapView]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeDataSource(dataSource: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSource",
                  "canonicalReference": "@here/harp-mapview!DataSource:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dataSource",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "removeDataSource"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet#resourceComputationType:member",
              "docComment": "/**\n * The way the cache usage is computed, either based on size in MB (mega bytes) or in number of tiles.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get resourceComputationType(): "
                },
                {
                  "kind": "Reference",
                  "text": "ResourceComputationType",
                  "canonicalReference": "@here/harp-mapview!ResourceComputationType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset resourceComputationType(computationType: "
                },
                {
                  "kind": "Reference",
                  "text": "ResourceComputationType",
                  "canonicalReference": "@here/harp-mapview!ResourceComputationType:enum"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "name": "resourceComputationType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet#setDataSourceCacheSize:member(1)",
              "docComment": "/**\n * Sets cache size.\n *\n * @param size - cache size\n *\n * @param computationType - Optional value specifying the way a [[Tile]]s cache usage is computed, either based on size in MB (mega bytes) or in number of tiles. Defaults to `ResourceComputationType.EstimationInMb`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setDataSourceCacheSize(size: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", computationType?: "
                },
                {
                  "kind": "Reference",
                  "text": "ResourceComputationType",
                  "canonicalReference": "@here/harp-mapview!ResourceComputationType:enum"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "size",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "computationType",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setDataSourceCacheSize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet#setNumberOfVisibleTiles:member(1)",
              "docComment": "/**\n * Sets maximum number of visible tiles.\n *\n * @param size - size of visible tiles array\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setNumberOfVisibleTiles(size: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "size",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setNumberOfVisibleTiles"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet#updateClipPlanes:member(1)",
              "docComment": "/**\n * Evaluate frustum near/far clip planes and visibility ranges.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateClipPlanes(maxElevation?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", minElevation?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ViewRanges",
                  "canonicalReference": "@here/harp-datasource-protocol!ViewRanges:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "maxElevation",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "minElevation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "updateClipPlanes"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!VisibleTileSet#updateRenderList:member(1)",
              "docComment": "/**\n * Calculates a new set of visible tiles.\n *\n * @param storageLevel - The camera storage level, see [[MapView.storageLevel]].\n *\n * @param zoomLevel - The camera zoom level.\n *\n * @param dataSources - The data sources for which the visible tiles will be calculated.\n *\n * @param elevationRangeSource - Source of elevation range data if any.\n *\n * @returns view ranges and their status since last update (changed or not).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateRenderList(storageLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", zoomLevel: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", dataSources: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSource",
                  "canonicalReference": "@here/harp-mapview!DataSource:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ", elevationRangeSource?: "
                },
                {
                  "kind": "Reference",
                  "text": "ElevationRangeSource",
                  "canonicalReference": "@here/harp-mapview!ElevationRangeSource:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        viewRanges: "
                },
                {
                  "kind": "Reference",
                  "text": "ViewRanges",
                  "canonicalReference": "@here/harp-datasource-protocol!ViewRanges:interface"
                },
                {
                  "kind": "Content",
                  "text": ";\n        viewRangesChanged: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "storageLevel",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "zoomLevel",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "dataSources",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "elevationRangeSource",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  }
                }
              ],
              "name": "updateRenderList"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-mapview!VisibleTileSetOptions:interface",
          "docComment": "/**\n * Limited set of [[MapViewOptions]] used for [[VisibleTileSet]].\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface VisibleTileSetOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "VisibleTileSetOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!VisibleTileSetOptions#clipPlanesEvaluator:member",
              "docComment": "/**\n * User-defined camera clipping planes evaluator.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clipPlanesEvaluator: "
                },
                {
                  "kind": "Reference",
                  "text": "ClipPlanesEvaluator",
                  "canonicalReference": "@here/harp-mapview!ClipPlanesEvaluator:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "clipPlanesEvaluator",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!VisibleTileSetOptions#extendedFrustumCulling:member",
              "docComment": "/**\n * In addition to the simple frustum culling also do additional checks with [[MapTileCuller]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "extendedFrustumCulling: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "extendedFrustumCulling",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!VisibleTileSetOptions#maxVisibleDataSourceTiles:member",
              "docComment": "/**\n * Limit of tiles that can be visible per datasource.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxVisibleDataSourceTiles: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxVisibleDataSourceTiles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!VisibleTileSetOptions#projection:member",
              "docComment": "/**\n * The projection of the view.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "projection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!VisibleTileSetOptions#quadTreeSearchDistanceDown:member",
              "docComment": "/**\n * Number of levels to go down when searching for fallback tiles.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "quadTreeSearchDistanceDown: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "quadTreeSearchDistanceDown",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!VisibleTileSetOptions#quadTreeSearchDistanceUp:member",
              "docComment": "/**\n * Number of levels to go up when searching for fallback tiles.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "quadTreeSearchDistanceUp: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "quadTreeSearchDistanceUp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!VisibleTileSetOptions#resourceComputationType:member",
              "docComment": "/**\n * Missing Typedoc\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resourceComputationType: "
                },
                {
                  "kind": "Reference",
                  "text": "ResourceComputationType",
                  "canonicalReference": "@here/harp-mapview!ResourceComputationType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "resourceComputationType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-mapview!VisibleTileSetOptions#tileCacheSize:member",
              "docComment": "/**\n * Missing Typedoc\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tileCacheSize: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tileCacheSize",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!WorkerBasedDecoder:class",
          "docComment": "/**\n * Decoder based on [[ConcurrentWorkerSet]].\n *\n * Decodes tiles using workers running in separate contexts (also known as `WebWorkers`): - connection establishment, - sends decode requests, - configuration.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class WorkerBasedDecoder implements "
            },
            {
              "kind": "Reference",
              "text": "ITileDecoder",
              "canonicalReference": "@here/harp-datasource-protocol!ITileDecoder:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "WorkerBasedDecoder",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!WorkerBasedDecoder:constructor(1)",
              "docComment": "/**\n * Creates a new `WorkerBasedDecoder`.\n *\n * @param workerSet - [[ConcurrentWorkerSet]] this tiler will live in.\n *\n * @param decoderServiceType - Service type identifier.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(workerSet: "
                },
                {
                  "kind": "Reference",
                  "text": "ConcurrentWorkerSet",
                  "canonicalReference": "@here/harp-mapview!ConcurrentWorkerSet:class"
                },
                {
                  "kind": "Content",
                  "text": ", decoderServiceType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "workerSet",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "decoderServiceType",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!WorkerBasedDecoder#configure:member(1)",
              "docComment": "/**\n * Configure tile decoder service in workers.\n *\n * Broadcasts [[ConfigurationMessage]] to all [[TileDecoderService]]s running in worker pool.\n *\n * @param styleSet - new [[StyleSet]], undefined means no change\n *\n * @param languages - new list of languages\n *\n * @param options - new options, undefined options are not changed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "configure(styleSet?: "
                },
                {
                  "kind": "Reference",
                  "text": "StyleSet",
                  "canonicalReference": "@here/harp-datasource-protocol!StyleSet:type"
                },
                {
                  "kind": "Content",
                  "text": ", definitions?: "
                },
                {
                  "kind": "Reference",
                  "text": "Definitions",
                  "canonicalReference": "@here/harp-datasource-protocol!Definitions:interface"
                },
                {
                  "kind": "Content",
                  "text": ", languages?: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "OptionsMap",
                  "canonicalReference": "@here/harp-datasource-protocol!OptionsMap:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "styleSet",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "definitions",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "languages",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "configure"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!WorkerBasedDecoder#connect:member(1)",
              "docComment": "/**\n * Connects to [[WorkerServiceManager]]s in underlying [[ConcurrentWorkerSet]] and creates dedicated [[TileDecoderService]]s in all workers to serve decode requests.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "connect(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "connect"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!WorkerBasedDecoder#decodeTile:member(1)",
              "docComment": "/**\n * Get [[Tile]] from tile decoder service in worker.\n *\n * Invokes [[DecodeTileRequest]] on [[TileDecoderService]] running in worker pool.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "decodeTile(data: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayBufferLike",
                  "canonicalReference": "!ArrayBufferLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ", projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ", requestController?: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestController",
                  "canonicalReference": "@here/harp-datasource-protocol!RequestController:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "DecodedTile",
                  "canonicalReference": "@here/harp-datasource-protocol!DecodedTile:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "requestController",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "decodeTile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!WorkerBasedDecoder#dispose:member(1)",
              "docComment": "/**\n * Dispose of dedicated tile decoder services in workers and remove reference to underlying [[ConcurrentWorkerSet]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispose(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "dispose"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!WorkerBasedDecoder#getTileInfo:member(1)",
              "docComment": "/**\n * Get [[TileInfo]] from tile decoder service in worker.\n *\n * Invokes [[TileInfoRequest]] on [[TileDecoderService]] running in worker pool.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTileInfo(data: "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayBufferLike",
                  "canonicalReference": "!ArrayBufferLike:type"
                },
                {
                  "kind": "Content",
                  "text": ", tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ", projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ", requestController?: "
                },
                {
                  "kind": "Reference",
                  "text": "RequestController",
                  "canonicalReference": "@here/harp-datasource-protocol!RequestController:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TileInfo",
                  "canonicalReference": "@here/harp-datasource-protocol!TileInfo:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "requestController",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "getTileInfo"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!WorkerBasedDecoder#workerCount:member",
              "docComment": "/**\n * The number of workers started for this decoder. The value is `undefined` until the workers have been created.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get workerCount(): "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "workerCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!WorkerBasedTiler:class",
          "docComment": "/**\n * Tiler based on [[ConcurrentWorkerSet]].\n *\n * Tiles payloads using workers running in separate contexts (also known as `WebWorkers`): - connection establishment, - sends tile requests, - configuration.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class WorkerBasedTiler implements "
            },
            {
              "kind": "Reference",
              "text": "ITiler",
              "canonicalReference": "@here/harp-datasource-protocol!ITiler:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "WorkerBasedTiler",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-mapview!WorkerBasedTiler:constructor(1)",
              "docComment": "/**\n * Creates a new `WorkerBasedTiler`.\n *\n * @param workerSet - [[ConcurrentWorkerSet]] this tiler will live in.\n *\n * @param tilerServiceType - Service type identifier.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(workerSet: "
                },
                {
                  "kind": "Reference",
                  "text": "ConcurrentWorkerSet",
                  "canonicalReference": "@here/harp-mapview!ConcurrentWorkerSet:class"
                },
                {
                  "kind": "Content",
                  "text": ", tilerServiceType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "workerSet",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "tilerServiceType",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!WorkerBasedTiler#connect:member(1)",
              "docComment": "/**\n * Connects to [[WorkerServiceManager]]s in underlying [[ConcurrentWorkerSet]] and creates dedicated [[TilerService]]s in all workers to serve tiling requests.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "connect(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "connect"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!WorkerBasedTiler#dispose:member(1)",
              "docComment": "/**\n * Dispose of dedicated tiler services in workers and remove reference to underlying [[ConcurrentWorkerSet]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispose(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "dispose"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!WorkerBasedTiler#getTile:member(1)",
              "docComment": "/**\n * Retrieves a tile for a previously registered index.\n *\n * @param indexId - Index identifier.\n *\n * @param tileKey - The [[TileKey]] that identifies the tile.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTile(indexId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<{}>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "indexId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getTile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!WorkerBasedTiler#registerIndex:member(1)",
              "docComment": "/**\n * Register index in the tiler. Indexes registered in the tiler can be later used to retrieved tiled payloads using `getTile`.\n *\n * @param indexId - Index identifier.\n *\n * @param input - Url to the index payload, or direct GeoJSON.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "registerIndex(indexId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", input: "
                },
                {
                  "kind": "Reference",
                  "text": "URL",
                  "canonicalReference": "!URL:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "GeoJson",
                  "canonicalReference": "@here/harp-datasource-protocol!GeoJson:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "indexId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "registerIndex"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!WorkerBasedTiler#updateIndex:member(1)",
              "docComment": "/**\n * Update index in the tiler. Indexes registered in the tiler can be later used to retrieved tiled payloads using `getTile`.\n *\n * @param indexId - Index identifier.\n *\n * @param input - Url to the index payload, or direct GeoJSON.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updateIndex(indexId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", input: "
                },
                {
                  "kind": "Reference",
                  "text": "URL",
                  "canonicalReference": "!URL:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "GeoJson",
                  "canonicalReference": "@here/harp-datasource-protocol!GeoJson:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "indexId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "updateIndex"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-mapview!WorkerLoader:class",
          "docComment": "/**\n * Set of `Worker` loading and initialization helpers: - starting Worker from URL with fallback to XHR+blob [[WorkerLoader.startWorker]] - waiting for proper worker initialization, see [[WorkerLoader.waitWorkerInitialized]]\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class WorkerLoader "
            }
          ],
          "releaseTag": "Public",
          "name": "WorkerLoader",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!WorkerLoader.dependencyUrlMapping:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static dependencyUrlMapping: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [name: string]: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dependencyUrlMapping",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!WorkerLoader.directlyFallbackToBlobBasedLoading:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static directlyFallbackToBlobBasedLoading: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "directlyFallbackToBlobBasedLoading",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!WorkerLoader.fetchScriptSourceToBlobUrl:member(1)",
              "docComment": "/**\n * Fetch script source as `Blob` url.\n *\n * Reuses results, if there are many simultaneous requests.\n *\n * @param scriptUrl - web worker script URL  @return promise that resolves to url of a `Blob` with script source code\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fetchScriptSourceToBlobUrl(scriptUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scriptUrl",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fetchScriptSourceToBlobUrl"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-mapview!WorkerLoader.sourceLoaderCache:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static sourceLoaderCache: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sourceLoaderCache",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!WorkerLoader.startWorker:member(1)",
              "docComment": "/**\n * Starts worker by first attempting load from `scriptUrl` using native `Worker` constructor. Then waits (using [[waitWorkerInitialized]]) for first message that indicates successful initialization. If `scriptUrl`'s origin is different than `baseUrl`, then in case of error falls back to [[startWorkerBlob]].\n *\n * We must resolve/reject promise at some time, so it is expected that any sane application will be able to load worker code in some amount of time. By default, this method timeouts after 10 seconds (configurable using `timeout` argument).\n *\n * This method is needed as browsers in general forbid to load worker if it's not on 'same origin' regardless of Content-Security-Policy.\n *\n * For blob-based fallback work, one need to ensure that Content Security Policy (CSP) allows loading web worker code from `Blob`s. By default browsers, allow 'blob:' for workers, but this may change.\n *\n * Following snippet setups CSP, so workers can be started from blob urls:\n *\n * <head> <meta http-equiv=\"Content-Security-Policy\" content=\"child-src blob:\"> </head>\n *\n * Tested on: * Chrome 67 / Linux, Window, OSX, Android * Firefox 60 / Linux, Windows, OSX * Edge 41 / Windows * Safari 11 / OSX * Samsung Internet 7.2\n *\n * See * https://benohead.com/cross-domain-cross-browser-web-workers/ * MapBox * https://stackoverflow.com/questions/21913673/execute-web-worker-from-different-origin * https://github.com/mapbox/mapbox-gl-js/issues/2658 * https://github.com/mapbox/mapbox-gl-js/issues/559 * https://github.com/mapbox/mapbox-gl-js/issues/6058\n *\n * Findings:\n *\n * * Chrome reports CSP by exception when constructing [[Worker]] instance. * Firefox reports CSP errors when loading in first event: https://bugzilla.mozilla.org/show_bug.cgi?id=1241888 * Firefox 62, Chrome 67 obeys `<meta http-equiv=\"Content-Security-Policy\">` with `worker-src blob:` but doesn't obey `worker-src URL` when used * Chrome 67 doesn't obey CSP `worker-src URL` despite it's documented as supported (https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Security-Policy/worker-src)\n *\n * @param scriptUrl - web worker script URL\n *\n * @param timeout - timeout in milliseconds, in which worker should set initial message (default 10 seconds)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static startWorker(scriptUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", timeout?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Worker",
                  "canonicalReference": "!Worker:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scriptUrl",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "timeout",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "startWorker"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!WorkerLoader.startWorkerBlob:member(1)",
              "docComment": "/**\n * Start worker \"via blob\" by first loading worker script code with [[fetch]], creating `Blob` and attempting to start worker from blob url. Waits (using [[waitWorkerInitialized]]) for successful worker start.\n *\n * @param scriptUrl - web worker script URL\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static startWorkerBlob(scriptUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", timeout: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Worker",
                  "canonicalReference": "!Worker:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scriptUrl",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "timeout",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "startWorkerBlob"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!WorkerLoader.startWorkerImmediately:member(1)",
              "docComment": "/**\n * Start worker, loading it immediately from `scriptUrl`. Waits (using [[waitWorkerInitialized]]) for successful worker start.\n *\n * @param scriptUrl - web worker script URL\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static startWorkerImmediately(scriptUrl: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", timeout: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Worker",
                  "canonicalReference": "!Worker:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "scriptUrl",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "timeout",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "startWorkerImmediately"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-mapview!WorkerLoader.waitWorkerInitialized:member(1)",
              "docComment": "/**\n * Waits for successful Web Worker start.\n *\n * Expects that worker script sends initial message.\n *\n * If first event is `message` then assumes that worker has been loaded sussesfully and promise resolves to `worker` object passed as argument.\n *\n * If first event is 'error', then it is assumed that worker failed to load and promise is rejected.\n *\n * (NOTE: The initial 'message' - if received - is immediately replayed using worker's `dispatchEvent`, so application code can also consume it as confirmation of successful worker initialization.\n *\n * We must resolve/reject promise at some time, so it is expected that any sane application will be able to load worker code in some amount of time.\n *\n * @param worker - [[Worker]] instance to be checked\n *\n * @param timeout - timeout in milliseconds, in which worker should set initial message\n *\n * @returns `Promise` that resolves to `worker` on success\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static waitWorkerInitialized(worker: "
                },
                {
                  "kind": "Reference",
                  "text": "Worker",
                  "canonicalReference": "!Worker:interface"
                },
                {
                  "kind": "Content",
                  "text": ", timeout: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Worker",
                  "canonicalReference": "!Worker:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "worker",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "timeout",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "waitWorkerInitialized"
            }
          ],
          "implementsTokenRanges": []
        }
      ]
    }
  ]
}
