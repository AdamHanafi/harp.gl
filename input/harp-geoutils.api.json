{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.8.10",
    "schemaVersion": 1003,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "@here/harp-geoutils!",
  "docComment": "/**\n * Utility classes for working with geospatial data.\n *\n * @remarks\n *\n * @packageDocumentation\n */\n",
  "name": "@here/harp-geoutils",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@here/harp-geoutils!",
      "name": "",
      "members": [
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-geoutils!Box3Like:interface",
          "docComment": "/**\n * An interface representing bounding box in world coordinates.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Box3Like "
            }
          ],
          "releaseTag": "Public",
          "name": "Box3Like",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-geoutils!Box3Like#max:member",
              "docComment": "/**\n * The maximum position in world coordinates of this bounding box.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly max: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "max",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-geoutils!Box3Like#min:member",
              "docComment": "/**\n * The minimum position in world coordinates of this bounding box.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly min: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "min",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-geoutils!EarthConstants:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class EarthConstants "
            }
          ],
          "releaseTag": "Public",
          "name": "EarthConstants",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!EarthConstants.EQUATORIAL_CIRCUMFERENCE:member",
              "docComment": "/**\n * The equatorial circumference in meters.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static EQUATORIAL_CIRCUMFERENCE: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "EQUATORIAL_CIRCUMFERENCE",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!EarthConstants.EQUATORIAL_RADIUS:member",
              "docComment": "/**\n * The equatorial radius in meters.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static EQUATORIAL_RADIUS: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "EQUATORIAL_RADIUS",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!EarthConstants.MAX_BUILDING_HEIGHT:member",
              "docComment": "/**\n * The highest artificial structure (building) on earth, Burj Khalifa tower in Dubai\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static MAX_BUILDING_HEIGHT: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "MAX_BUILDING_HEIGHT",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!EarthConstants.MAX_ELEVATION:member",
              "docComment": "/**\n * The highest point on earth (Mt. Everest) in meters.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static MAX_ELEVATION: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "MAX_ELEVATION",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!EarthConstants.MIN_ELEVATION:member",
              "docComment": "/**\n * The lowest point on earth (Dead Sea) in meters.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static MIN_ELEVATION: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "MIN_ELEVATION",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-geoutils!equirectangularProjection:var",
          "docComment": "/**\n * Equirectangular [[Projection]] used to convert geo coordinates to world coordinates and vice versa.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "equirectangularProjection: "
            },
            {
              "kind": "Reference",
              "text": "Projection",
              "canonicalReference": "@here/harp-geoutils!Projection:class"
            }
          ],
          "releaseTag": "Public",
          "name": "equirectangularProjection",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-geoutils!FlatTileBoundingBoxGenerator:class",
          "docComment": "/**\n * `FlatTileBoundingBoxGenerator` generates bounding boxes in world and geo coordinates for a given TilingScheme.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class FlatTileBoundingBoxGenerator "
            }
          ],
          "releaseTag": "Public",
          "name": "FlatTileBoundingBoxGenerator",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-geoutils!FlatTileBoundingBoxGenerator:constructor(1)",
              "docComment": "/**\n * Creates a new `FlatTileBoundingBoxGenerator` that can generate bounding boxes for the given TilingScheme.\n *\n * @param tilingScheme - The [[TilingScheme]] used to compute bounding boxes.\n *\n * @param minElevation - The minimum elevation in meters.\n *\n * @param maxElevation - The maximum elevation in meters.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(tilingScheme: "
                },
                {
                  "kind": "Reference",
                  "text": "TilingScheme",
                  "canonicalReference": "@here/harp-geoutils!TilingScheme:class"
                },
                {
                  "kind": "Content",
                  "text": ", minElevation?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", maxElevation?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tilingScheme",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "minElevation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "maxElevation",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!FlatTileBoundingBoxGenerator#getGeoBox:member(1)",
              "docComment": "/**\n * Returns the bounding box in geo coordinates for the given [[TileKey]].\n *\n * Example:\n * ```typescript\n * const geoBox = generator.getGeoBox(worldBounds);\n * console.log(geoBox.center);\n * ```\n *\n * @param tileKey - The [[TileKey]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getGeoBox(tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoBox",
                  "canonicalReference": "@here/harp-geoutils!GeoBox:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getGeoBox"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!FlatTileBoundingBoxGenerator#getWorldBox:member(1)",
              "docComment": "/**\n * Returns the bounding box in world coordinates of the given [[TileKey]].\n *\n * Example:\n * ```typescript\n * const worldBounds = new THREE.Box3();\n * generator.getWorldBox(geoBox, worldBounds);\n * console.log(worldBounds.getCenter());\n * ```\n *\n * @param tileKey - The TileKey.\n *\n * @param result - The optional object used to store the resulting bounding box in world coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getWorldBox(tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ", result?: "
                },
                {
                  "kind": "Reference",
                  "text": "Box3Like",
                  "canonicalReference": "@here/harp-geoutils!Box3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Box3Like",
                  "canonicalReference": "@here/harp-geoutils!Box3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getWorldBox"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!FlatTileBoundingBoxGenerator#maxElevation:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly maxElevation: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxElevation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!FlatTileBoundingBoxGenerator#minElevation:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly minElevation: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minElevation",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!FlatTileBoundingBoxGenerator#projection:member",
              "docComment": "/**\n * Returns the [[Projection]] of the [[TilingScheme]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get projection(): "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "projection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!FlatTileBoundingBoxGenerator#subdivisionScheme:member",
              "docComment": "/**\n * Returns the [[SubdivisionScheme]] of the [[TilingScheme]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get subdivisionScheme(): "
                },
                {
                  "kind": "Reference",
                  "text": "SubdivisionScheme",
                  "canonicalReference": "@here/harp-geoutils!SubdivisionScheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subdivisionScheme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!FlatTileBoundingBoxGenerator#tilingScheme:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly tilingScheme: "
                },
                {
                  "kind": "Reference",
                  "text": "TilingScheme",
                  "canonicalReference": "@here/harp-geoutils!TilingScheme:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tilingScheme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-geoutils!GeoBox:class",
          "docComment": "/**\n * `GeoBox` is used to represent a bounding box in geo coordinates.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class GeoBox implements "
            },
            {
              "kind": "Reference",
              "text": "GeoBoxExtentLike",
              "canonicalReference": "@here/harp-geoutils!GeoBoxExtentLike:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "GeoBox",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-geoutils!GeoBox:constructor(1)",
              "docComment": "/**\n * Constructs a new `GeoBox` with the given geo coordinates.\n *\n * @param southWest - The south west position in geo coordinates.\n *\n * @param northEast - The north east position in geo coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(southWest: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ", northEast: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "southWest",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "northEast",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoBox#altitudeSpan:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get altitudeSpan(): "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "altitudeSpan",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoBox#center:member",
              "docComment": "/**\n * Returns the center of this `GeoBox`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get center(): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "center",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!GeoBox#clone:member(1)",
              "docComment": "/**\n * Clones this `GeoBox` instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clone(): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoBox",
                  "canonicalReference": "@here/harp-geoutils!GeoBox:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clone"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!GeoBox#contains:member(1)",
              "docComment": "/**\n * Returns `true` if the given geo coordinates are contained in this `GeoBox`.\n *\n * @param point - The geo coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contains(point: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "point",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "contains"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoBox#east:member",
              "docComment": "/**\n * Returns the east longitude in degrees of this `GeoBox`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get east(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "east",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!GeoBox.fromCenterAndExtents:member(1)",
              "docComment": "/**\n * Returns a `GeoBox` with the given center and dimensions.\n *\n * @param center - The center position of geo box.\n *\n * @param extent - Box latitude and logitude span\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromCenterAndExtents(center: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ", extent: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoBoxExtentLike",
                  "canonicalReference": "@here/harp-geoutils!GeoBoxExtentLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoBox",
                  "canonicalReference": "@here/harp-geoutils!GeoBox:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "center",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "extent",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "fromCenterAndExtents"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!GeoBox.fromCoordinates:member(1)",
              "docComment": "/**\n * Returns a `GeoBox` with the given geo coordinates.\n *\n * @param southWest - The south west position in geo coordinates.\n *\n * @param northEast - The north east position in geo coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromCoordinates(southWest: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ", northEast: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoBox",
                  "canonicalReference": "@here/harp-geoutils!GeoBox:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "southWest",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "northEast",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "fromCoordinates"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!GeoBox#growToContain:member(1)",
              "docComment": "/**\n * Update the bounding box by considering a given point.\n *\n * @param point - The point that may expand the bounding box.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "growToContain(point: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "point",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "growToContain"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoBox#latitudeSpan:member",
              "docComment": "/**\n * Returns the latitude span in degrees.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get latitudeSpan(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "latitudeSpan",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoBox#latitudeSpanInDegrees:member",
              "docComment": "/**\n * Returns the latitude span in degrees.\n *\n * @deprecated\n *\n * Use [[latitudeSpan]] instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get latitudeSpanInDegrees(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "latitudeSpanInDegrees",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoBox#latitudeSpanInRadians:member",
              "docComment": "/**\n * Returns the latitude span in radians.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get latitudeSpanInRadians(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "latitudeSpanInRadians",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoBox#longitudeSpan:member",
              "docComment": "/**\n * Returns the longitude span in degrees.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get longitudeSpan(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "longitudeSpan",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoBox#longitudeSpanInDegrees:member",
              "docComment": "/**\n * Returns the longitude span in degrees.\n *\n * @deprecated\n *\n * Use [[longitudeSpan]] instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get longitudeSpanInDegrees(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "longitudeSpanInDegrees",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoBox#longitudeSpanInRadians:member",
              "docComment": "/**\n * Returns the longitude span in radians.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get longitudeSpanInRadians(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "longitudeSpanInRadians",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoBox#maxAltitude:member",
              "docComment": "/**\n * Returns the maximum altitude or `undefined`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get maxAltitude(): "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "maxAltitude",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoBox#minAltitude:member",
              "docComment": "/**\n * Returns the minimum altitude or `undefined`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get minAltitude(): "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "minAltitude",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoBox#north:member",
              "docComment": "/**\n * Returns the north altitude in degrees of this `GeoBox`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get north(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "north",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoBox#northEast:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly northEast: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "northEast",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoBox#south:member",
              "docComment": "/**\n * Returns the south latitude in degrees of this `GeoBox`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get south(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "south",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoBox#southWest:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly southWest: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "southWest",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoBox#west:member",
              "docComment": "/**\n * Returns the west longitude in degrees of this `GeoBox`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get west(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "west",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-geoutils!GeoBoxExtentLike:interface",
          "docComment": "/**\n * Represents an object that carry [[GeoBox]] extents like interface.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GeoBoxExtentLike "
            }
          ],
          "releaseTag": "Public",
          "name": "GeoBoxExtentLike",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-geoutils!GeoBoxExtentLike#latitudeSpan:member",
              "docComment": "/**\n * Latitude span in degrees.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly latitudeSpan: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "latitudeSpan",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-geoutils!GeoBoxExtentLike#longitudeSpan:member",
              "docComment": "/**\n * Longitude span in degrees\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly longitudeSpan: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "longitudeSpan",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class",
          "docComment": "/**\n * `GeoCoordinates` is used to represent geo positions.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class GeoCoordinates implements "
            },
            {
              "kind": "Reference",
              "text": "GeoCoordinatesLike",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinatesLike:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "GeoCoordinates",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates:constructor(1)",
              "docComment": "/**\n * Creates a `GeoCoordinates` from the given latitude, longitude, and optional altitude.\n *\n * @param latitude - Latitude in degrees.\n *\n * @param longitude - Longitude in degrees.\n *\n * @param altitude - Altitude in meters.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(latitude: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", longitude: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", altitude?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "latitude",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "longitude",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "altitude",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates#altitude:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "altitude?: "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "altitude",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates#clone:member(1)",
              "docComment": "/**\n * Clones this `GeoCoordinates`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clone(): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clone"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates#copy:member(1)",
              "docComment": "/**\n * Copy values from the other.\n *\n * @param other - GeoCoordinatesLike to copy all values from.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copy(other: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinatesLike",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinatesLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "copy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates#equals:member(1)",
              "docComment": "/**\n * Returns `true` if this `GeoCoordinates` is equal to the other.\n *\n * @param other - GeoCoordinatesLike to compare to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equals(other: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinatesLike",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinatesLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates.fromDegrees:member(1)",
              "docComment": "/**\n * Returns a `GeoCoordinates` from the given latitude, longitude, and optional altitude.\n *\n * @param latitude - Latitude in degrees.\n *\n * @param longitude - Longitude in degrees.\n *\n * @param altitude - Altitude in meters.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromDegrees(latitude: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", longitude: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", altitude?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "latitude",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "longitude",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "altitude",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "fromDegrees"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates.fromGeoPoint:member(1)",
              "docComment": "/**\n * Creates a [[GeoCoordinates]] from a [[GeoPointLike]] tuple.\n *\n * Example:\n * ```typescript\n * mapView.geoCenter = GeoCoordinates.fromGeoPoint([longitude, latitude]);\n *\n * let geoCoords: number[] = ...;\n *\n * if (isGeoPointLike(geoCoords)) {\n *     const p = GeoCoordinates.fromGeoPoint(geoCoords);\n * }\n * ```\n *\n * @param geoPoint - An [[Array]] of at least two elements following the order longitude, latitude, altitude.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromGeoPoint(geoPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoPointLike",
                  "canonicalReference": "@here/harp-geoutils!GeoPointLike:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "geoPoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromGeoPoint"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates.fromLatLng:member(1)",
              "docComment": "/**\n * Creates a [[GeoCoordinates]] from a [[LatLngLike]] literal.\n * ```typescript\n * const center = { lat: 53.3, lng: 13.4 };\n * mapView.geoCenter = GeoCoordinates.fromLatLng(center);\n * ```\n *\n * @param latLng - A [[LatLngLike]] object literal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromLatLng(latLng: "
                },
                {
                  "kind": "Reference",
                  "text": "LatLngLike",
                  "canonicalReference": "@here/harp-geoutils!LatLngLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "latLng",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromLatLng"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates.fromObject:member(1)",
              "docComment": "/**\n * Creates a [[GeoCoordinates]] from different types of geo coordinate objects.\n *\n * Example:\n * ```typescript\n * const fromGeoPointLike = GeoCoordinates.fromObject([longitude, latitude]);\n * const fromGeoCoordinateLike = GeoCoordinates.fromObject({ longitude, latitude });\n * const fromGeoCoordinate = GeoCoordinates.fromObject(new GeoCoordinates(latitude, longitude));\n * const fromLatLngLike = GeoCoordinates.fromObject({ lat: latitude , lng: longitude });\n * ```\n *\n * @param geoPoint - Either [[GeoPointLike]], [[GeoCoordinatesLike]] or [[LatLngLike]] object literal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromObject(geoPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordLike",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordLike:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "geoPoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromObject"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates.fromRadians:member(1)",
              "docComment": "/**\n * Returns a `GeoCoordinates` from the given latitude, longitude, and optional altitude.\n *\n * @param latitude - Latitude in radians.\n *\n * @param longitude - Longitude in radians.\n *\n * @param altitude - Altitude in meters.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromRadians(latitude: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", longitude: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", altitude?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "latitude",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "longitude",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "altitude",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "fromRadians"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates#isValid:member(1)",
              "docComment": "/**\n * Returns `true` if this `GeoCoordinates` is valid; returns `false` otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isValid(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "isValid"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates#lat:member",
              "docComment": "/**\n * The latitude in the degrees.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get lat(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lat",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates#latitude:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "latitude: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "latitude",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates#latitudeInDegrees:member",
              "docComment": "/**\n * Returns the latitude in degrees.\n *\n * @deprecated\n *\n * Use the [[latitude]] property instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get latitudeInDegrees(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "latitudeInDegrees",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates#latitudeInRadians:member",
              "docComment": "/**\n * Returns the latitude in radians.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get latitudeInRadians(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "latitudeInRadians",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates#lng:member",
              "docComment": "/**\n * The longitude in the degrees.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get lng(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lng",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates#longitude:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "longitude: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "longitude",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates#longitudeInDegrees:member",
              "docComment": "/**\n * Returns the longitude in degrees.\n *\n * @deprecated\n *\n * Use the [[longitude]] property instead.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get longitudeInDegrees(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "longitudeInDegrees",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates#longitudeInRadians:member",
              "docComment": "/**\n * Returns the longitude in radians.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get longitudeInRadians(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "longitudeInRadians",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates#normalized:member(1)",
              "docComment": "/**\n * Returns the normalized `GeoCoordinates`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "normalized(): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "normalized"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates#toGeoPoint:member(1)",
              "docComment": "/**\n * Converts this [[GeoCoordinates]] to a [[GeoPointLike]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toGeoPoint(): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoPointLike",
                  "canonicalReference": "@here/harp-geoutils!GeoPointLike:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toGeoPoint"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinates#toLatLng:member(1)",
              "docComment": "/**\n * Returns this [[GeoCoordinates]] as [[LatLngLike]] literal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toLatLng(): "
                },
                {
                  "kind": "Reference",
                  "text": "LatLngLike",
                  "canonicalReference": "@here/harp-geoutils!LatLngLike:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toLatLng"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-geoutils!GeoCoordinatesLike:interface",
          "docComment": "/**\n * Represents an object with `GeoCoordinates` like interface.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GeoCoordinatesLike "
            }
          ],
          "releaseTag": "Public",
          "name": "GeoCoordinatesLike",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinatesLike#altitude:member",
              "docComment": "/**\n * The optional altitude in meters.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "altitude?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "altitude",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinatesLike#latitude:member",
              "docComment": "/**\n * The latitude in degrees.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "latitude: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "latitude",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinatesLike#longitude:member",
              "docComment": "/**\n * The longitude in degrees.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "longitude: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "longitude",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-geoutils!GeoCoordLike:type",
          "docComment": "/**\n * Represents an object in different geo coordinate formats\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type GeoCoordLike = "
            },
            {
              "kind": "Reference",
              "text": "GeoPointLike",
              "canonicalReference": "@here/harp-geoutils!GeoPointLike:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "GeoCoordinatesLike",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinatesLike:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "LatLngLike",
              "canonicalReference": "@here/harp-geoutils!LatLngLike:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GeoCoordLike",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@here/harp-geoutils!GeoPointLike:type",
          "docComment": "/**\n * An [[Array]] following the order longitude, latitude, altitude.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type GeoPointLike = "
            },
            {
              "kind": "Content",
              "text": "[number, number, number?]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GeoPointLike",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-geoutils!halfQuadTreeSubdivisionScheme:var",
          "docComment": "/**\n * A [[SubdivisionScheme]] used to represent half quadtrees. This particular subdivision scheme is used by the HERE tiling scheme.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "halfQuadTreeSubdivisionScheme: "
            },
            {
              "kind": "Reference",
              "text": "SubdivisionScheme",
              "canonicalReference": "@here/harp-geoutils!SubdivisionScheme:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "halfQuadTreeSubdivisionScheme",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-geoutils!hereTilingScheme:var",
          "docComment": "/**\n * [[TilingScheme]] used by most of the data published by HERE.\n *\n * The `hereTilingScheme` features a half quadtree subdivision scheme and an equirectangular projection.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "hereTilingScheme: "
            },
            {
              "kind": "Reference",
              "text": "TilingScheme",
              "canonicalReference": "@here/harp-geoutils!TilingScheme:class"
            }
          ],
          "releaseTag": "Public",
          "name": "hereTilingScheme",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-geoutils!identityProjection:var",
          "docComment": "/**\n * Identity [[Projection]] used to convert geo coordinates to unit coordinates and vice versa.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "identityProjection: "
            },
            {
              "kind": "Reference",
              "text": "Projection",
              "canonicalReference": "@here/harp-geoutils!Projection:class"
            }
          ],
          "releaseTag": "Public",
          "name": "identityProjection",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-geoutils!isBox3Like:function(1)",
          "docComment": "/**\n * Returns true if the given object implements the [[Box3Like]] interface.\n *\n * @param object - A valid object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isBox3Like(object: "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "@here/harp-geoutils!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "Box3Like",
              "canonicalReference": "@here/harp-geoutils!Box3Like:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isBox3Like"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-geoutils!isGeoBoxExtentLike:function(1)",
          "docComment": "/**\n * Type guard to assert that `object` conforms to [[GeoBoxExtentLike]] interface.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isGeoBoxExtentLike(obj: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "obj",
              "canonicalReference": "@here/harp-geoutils!~obj"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "GeoBoxExtentLike",
              "canonicalReference": "@here/harp-geoutils!GeoBoxExtentLike:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isGeoBoxExtentLike"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-geoutils!isGeoCoordinatesLike:function(1)",
          "docComment": "/**\n * Type guard to assert that `object` conforms to [[GeoCoordinatesLike]] data interface.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isGeoCoordinatesLike(object: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "@here/harp-geoutils!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "GeoCoordinatesLike",
              "canonicalReference": "@here/harp-geoutils!GeoCoordinatesLike:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isGeoCoordinatesLike"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-geoutils!isGeoPointLike:function(1)",
          "docComment": "/**\n * Type guard to assert that `object` conforms to [[GeoPointLike]] interface.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isGeoPointLike(geoPoint: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "geoPoint",
              "canonicalReference": "@here/harp-geoutils!~geoPoint"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "GeoPointLike",
              "canonicalReference": "@here/harp-geoutils!GeoPointLike:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "geoPoint",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isGeoPointLike"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-geoutils!isLatLngLike:function(1)",
          "docComment": "/**\n * Type guard to assert that `object` conforms to [[LatLngLike]] interface.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isLatLngLike(object: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "@here/harp-geoutils!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "LatLngLike",
              "canonicalReference": "@here/harp-geoutils!LatLngLike:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isLatLngLike"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-geoutils!isOrientedBox3Like:function(1)",
          "docComment": "/**\n * Returns true if the given object implements the interface [[OrientedBox3Like]].\n *\n * @param object - The object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isOrientedBox3Like(object: "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "@here/harp-geoutils!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "OrientedBox3Like",
              "canonicalReference": "@here/harp-geoutils!OrientedBox3Like:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isOrientedBox3Like"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-geoutils!isTransformLike:function(1)",
          "docComment": "/**\n * Returns true if the given object implements the interface [[TransformLike]].\n *\n * @param object - The object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isTransformLike(object: "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "object",
              "canonicalReference": "@here/harp-geoutils!~object"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "TransformLike",
              "canonicalReference": "@here/harp-geoutils!TransformLike:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "object",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isTransformLike"
        },
        {
          "kind": "Function",
          "canonicalReference": "@here/harp-geoutils!isVector3Like:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isVector3Like(v: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "v",
              "canonicalReference": "@here/harp-geoutils!~v"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "Vector3Like",
              "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "v",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "isVector3Like"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-geoutils!LatLngLike:interface",
          "docComment": "/**\n * Represents an object with `LatLng` like interface.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LatLngLike "
            }
          ],
          "releaseTag": "Public",
          "name": "LatLngLike",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-geoutils!LatLngLike#lat:member",
              "docComment": "/**\n * The latitude in degrees.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lat: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lat",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-geoutils!LatLngLike#lng:member",
              "docComment": "/**\n * The longitude in degrees.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lng: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "lng",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@here/harp-geoutils!MathUtils:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace MathUtils "
            }
          ],
          "releaseTag": "Public",
          "name": "MathUtils",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-geoutils!MathUtils.angleDistanceDeg:function(1)",
              "docComment": "/**\n * Return the minimal delta between angles `a` and `b` given in degrees.\n *\n * Equivalent to `a - b` in coordinate space with exception vector direction can be reversed that if `abs(a-b) > 180` because trip is shorter in 'other' direction.\n *\n * Useful when interpolating between `b` and `a` in angle space.\n *\n * @param a - Start angle in degrees.\n *\n * @param b - End angle in degrees.\n *\n * @returns Angle that that satisfies condition `a - b - d = 0` in angle space.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function angleDistanceDeg(a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "angleDistanceDeg"
            },
            {
              "kind": "Variable",
              "canonicalReference": "@here/harp-geoutils!MathUtils.clamp:var",
              "docComment": "/**\n * Ensures that input value fits in a given range.\n *\n * @deprecated\n *\n * @param value - The value to be clamped.\n *\n * @param min - Minimum value.\n *\n * @param max - Maximum value.\n *\n * @returns Clamped value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clamp: "
                },
                {
                  "kind": "Content",
                  "text": "typeof THREE."
                },
                {
                  "kind": "Reference",
                  "text": "MathUtils.clamp",
                  "canonicalReference": "three!MathUtils.clamp:function"
                }
              ],
              "releaseTag": "Public",
              "name": "clamp",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-geoutils!MathUtils.copyVector3:function(1)",
              "docComment": "/**\n * Copies the vector across.\n *\n * @param from - The vector to copy from.\n *\n * @param to - The resulting [Vector3Like] instance, with the contents copied from from\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function copyVector3<Vector extends "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(from: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ", to: "
                },
                {
                  "kind": "Content",
                  "text": "Vector"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Vector"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "from",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "to",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Vector",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "copyVector3"
            },
            {
              "kind": "Variable",
              "canonicalReference": "@here/harp-geoutils!MathUtils.degToRad:var",
              "docComment": "/**\n * Converts an angle measured in degrees to an equivalent value in radians.\n *\n * @deprecated\n *\n * use THREE.MathUtils.degToRad instead\n *\n * @param degrees - Value in degrees.\n *\n * @returns Value in radians.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "degToRad: "
                },
                {
                  "kind": "Content",
                  "text": "typeof THREE."
                },
                {
                  "kind": "Reference",
                  "text": "MathUtils.degToRad",
                  "canonicalReference": "three!MathUtils.degToRad:function"
                }
              ],
              "releaseTag": "Public",
              "name": "degToRad",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-geoutils!MathUtils.interpolateAnglesDeg:function(1)",
              "docComment": "/**\n * Interpolate linearly between two angles given in degrees.\n *\n * @param p0 - Angle from in degrees\n *\n * @param p1 - Angle to in degrees\n *\n * @param t - Interpolation factor (alpha), in range `0-1`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function interpolateAnglesDeg(p0: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", p1: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", t: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "p0",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "p1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "t",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "interpolateAnglesDeg"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-geoutils!MathUtils.newEmptyBox3:function(1)",
              "docComment": "/**\n * Creates a new empty bounding box.\n *\n * @deprecated\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function newEmptyBox3(): "
                },
                {
                  "kind": "Reference",
                  "text": "Box3Like",
                  "canonicalReference": "@here/harp-geoutils!Box3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "newEmptyBox3"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-geoutils!MathUtils.newVector3:function(1)",
              "docComment": "/**\n * Creates a new [Vector3Like] instance.\n *\n * @param x - The x component.\n *\n * @param y - The y component.\n *\n * @param z - The z component.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function newVector3(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "newVector3"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-geoutils!MathUtils.newVector3:function(2)",
              "docComment": "/**\n * Creates a new [Vector3Like] instance.\n *\n * @param x - The x component.\n *\n * @param y - The y component.\n *\n * @param z - The z component.\n *\n * @param v - The resulting [Vector3Like] instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function newVector3<Vector extends "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", v: "
                },
                {
                  "kind": "Content",
                  "text": "Vector"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Vector"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "z",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "v",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Vector",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "newVector3"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-geoutils!MathUtils.normalizeAngleDeg:function(1)",
              "docComment": "/**\n * Normalize angle in degrees to range `[0, 360)`.\n *\n * @param a - Angle in degrees.\n *\n * @returns Angle in degrees in range `[0, 360)`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function normalizeAngleDeg(a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "normalizeAngleDeg"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-geoutils!MathUtils.normalizeLongitudeDeg:function(1)",
              "docComment": "/**\n * Normalize latitude angle in degrees to range `[-180, 180]`.\n *\n * @param a - Latitude angle in degrees.\n *\n * @returns Latitude angle in degrees in range `[-180, 180]`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function normalizeLongitudeDeg(a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "normalizeLongitudeDeg"
            },
            {
              "kind": "Variable",
              "canonicalReference": "@here/harp-geoutils!MathUtils.radToDeg:var",
              "docComment": "/**\n * Converts an angle measured in radians to an equivalent value in degrees.\n *\n * @deprecated\n *\n * @param degrees - Value in radians.\n *\n * @returns Value in degrees.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "radToDeg: "
                },
                {
                  "kind": "Content",
                  "text": "typeof THREE."
                },
                {
                  "kind": "Reference",
                  "text": "MathUtils.radToDeg",
                  "canonicalReference": "three!MathUtils.radToDeg:function"
                }
              ],
              "releaseTag": "Public",
              "name": "radToDeg",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-geoutils!MercatorConstants:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class MercatorConstants "
            }
          ],
          "releaseTag": "Public",
          "name": "MercatorConstants",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!MercatorConstants.MAXIMUM_LATITUDE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static readonly MAXIMUM_LATITUDE: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "MAXIMUM_LATITUDE",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-geoutils!mercatorProjection:var",
          "docComment": "/**\n * Mercator [[Projection]] used to convert geo coordinates to world coordinates and vice versa.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "mercatorProjection: "
            },
            {
              "kind": "Reference",
              "text": "Projection",
              "canonicalReference": "@here/harp-geoutils!Projection:class"
            }
          ],
          "releaseTag": "Public",
          "name": "mercatorProjection",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-geoutils!mercatorTilingScheme:var",
          "docComment": "/**\n * The [[TilingScheme]] used by the HERE web tiles.\n *\n * The `mercatorTilingScheme` features a quadtree subdivision scheme and a Mercator projection.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "mercatorTilingScheme: "
            },
            {
              "kind": "Reference",
              "text": "TilingScheme",
              "canonicalReference": "@here/harp-geoutils!TilingScheme:class"
            }
          ],
          "releaseTag": "Public",
          "name": "mercatorTilingScheme",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-geoutils!normalizedEquirectangularProjection:var",
          "docComment": "/**\n * Equirectangular [[Projection]] used to convert geo coordinates to unit coordinates and vice versa.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "normalizedEquirectangularProjection: "
            },
            {
              "kind": "Reference",
              "text": "Projection",
              "canonicalReference": "@here/harp-geoutils!Projection:class"
            }
          ],
          "releaseTag": "Public",
          "name": "normalizedEquirectangularProjection",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-geoutils!OrientedBox3:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class OrientedBox3 implements "
            },
            {
              "kind": "Reference",
              "text": "OrientedBox3Like",
              "canonicalReference": "@here/harp-geoutils!OrientedBox3Like:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "OrientedBox3",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-geoutils!OrientedBox3:constructor(1)",
              "docComment": "/**\n * Creates a new `OrientedBox3`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-geoutils!OrientedBox3:constructor(2)",
              "docComment": "/**\n * Creates a new `OrientedBox3` with the given position, orientation and extents.\n *\n * @param position - The position of the center of the `OrientedBox3`.\n *\n * @param rotationMatrix - The rotation of the `OrientedBox3`.\n *\n * @param extents - The extents of the `OrientedBox3`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(position: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ", rotationMatrix: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix4",
                  "canonicalReference": "three!Matrix4:class"
                },
                {
                  "kind": "Content",
                  "text": ", extents: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "position",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "rotationMatrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "extents",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!OrientedBox3#clone:member(1)",
              "docComment": "/**\n * Create a copy of this [[OrientedBoundingBox]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clone(): "
                },
                {
                  "kind": "Reference",
                  "text": "OrientedBox3",
                  "canonicalReference": "@here/harp-geoutils!OrientedBox3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clone"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!OrientedBox3#contains:member(1)",
              "docComment": "/**\n * Returns true if this [[OrientedBox3]] contains the given point.\n *\n * @param point - A valid point.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "contains(point: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "point",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "contains"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!OrientedBox3#copy:member(1)",
              "docComment": "/**\n * Copies the values of `other` to this [[OrientedBox3]].\n *\n * @param other - The other [[OrientedBox3]] to copy.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "copy(other: "
                },
                {
                  "kind": "Reference",
                  "text": "OrientedBox3",
                  "canonicalReference": "@here/harp-geoutils!OrientedBox3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "copy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!OrientedBox3#distanceToPoint:member(1)",
              "docComment": "/**\n * Returns the distance from this [[OrientedBox3]] and the given `point`.\n *\n * @param point - A point.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "distanceToPoint(point: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "point",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "distanceToPoint"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!OrientedBox3#distanceToPointSquared:member(1)",
              "docComment": "/**\n * Returns the squared distance from this [[OrientedBox3]] and the given `point`.\n *\n * @param point - A point.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "distanceToPointSquared(point: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "point",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "distanceToPointSquared"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!OrientedBox3#extents:member",
              "docComment": "/**\n * The extents of this `OrientedBox3`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly extents: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "extents",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!OrientedBox3#getCenter:member(1)",
              "docComment": "/**\n * Gets the center position of this [[OrientedBox3]].\n *\n * @param center - The returned center position.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getCenter(center?: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "center",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getCenter"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!OrientedBox3#getRotationMatrix:member(1)",
              "docComment": "/**\n * Gets the orientation matrix of this `OrientedBox3`.\n *\n * @param matrix - The output orientation matrix.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getRotationMatrix(matrix?: "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix4",
                  "canonicalReference": "three!Matrix4:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Matrix4",
                  "canonicalReference": "three!Matrix4:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "matrix",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getRotationMatrix"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!OrientedBox3#getSize:member(1)",
              "docComment": "/**\n * Gets the size of this [[OrientedBox3]].\n *\n * @param size - The returned size.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSize(size?: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "size",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getSize"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!OrientedBox3#intersects:member(1)",
              "docComment": "/**\n * Checks intersection with the given `THREE.Frustum` or array of `THREE.Plane`s.\n *\n * @param frustumOrPlanes - Frustum or array of planes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "intersects(frustumOrPlanes: "
                },
                {
                  "kind": "Reference",
                  "text": "Plane",
                  "canonicalReference": "three!Plane:class"
                },
                {
                  "kind": "Content",
                  "text": "[] | "
                },
                {
                  "kind": "Reference",
                  "text": "Frustum",
                  "canonicalReference": "three!Frustum:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "frustumOrPlanes",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "intersects"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!OrientedBox3#intersectsRay:member(1)",
              "docComment": "/**\n * Checks intersection with the given ray.\n *\n * @param ray - The ray to test.\n *\n * @returns distance from ray origin to intersection point if it exist, undefined otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "intersectsRay(ray: "
                },
                {
                  "kind": "Reference",
                  "text": "Ray",
                  "canonicalReference": "three!Ray:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "ray",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "intersectsRay"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!OrientedBox3#position:member",
              "docComment": "/**\n * The position of the center of this `OrientedBox3`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly position: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "position",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!OrientedBox3#xAxis:member",
              "docComment": "/**\n * The x-axis of this `OrientedBox3`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly xAxis: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "xAxis",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!OrientedBox3#yAxis:member",
              "docComment": "/**\n * The y-axis of this `OrientedBox3`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly yAxis: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "yAxis",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!OrientedBox3#zAxis:member",
              "docComment": "/**\n * The z-axis of this `OrientedBox3`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly zAxis: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3",
                  "canonicalReference": "three!Vector3:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "zAxis",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-geoutils!OrientedBox3Like:interface",
          "docComment": "/**\n * The interface [[OrientedBox3Like]] is used to represent oriented bounding box.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface OrientedBox3Like extends "
            },
            {
              "kind": "Reference",
              "text": "TransformLike",
              "canonicalReference": "@here/harp-geoutils!TransformLike:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "OrientedBox3Like",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-geoutils!OrientedBox3Like#extents:member",
              "docComment": "/**\n * The extents of this bounding box.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly extents: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "extents",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-geoutils!polarTilingScheme:var",
          "docComment": "/**\n * A [[TilingScheme]] featuring quadtree subdivision scheme and transverse Mercator projection.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "polarTilingScheme: "
            },
            {
              "kind": "Reference",
              "text": "TilingScheme",
              "canonicalReference": "@here/harp-geoutils!TilingScheme:class"
            }
          ],
          "releaseTag": "Public",
          "name": "polarTilingScheme",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-geoutils!Projection:class",
          "docComment": "/**\n * `Projection` is used to convert positions from geo coordinates to world coordinates and vice versa.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class Projection "
            }
          ],
          "releaseTag": "Public",
          "name": "Projection",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-geoutils!Projection:constructor(1)",
              "docComment": "/**\n * Constructs the Projection\n *\n * @param unitScale - How to transform the projected coordinates to world units.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(unitScale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "unitScale",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!Projection#getScaleFactor:member(1)",
              "docComment": "/**\n * Returns the scaling factor that must be used to convert the units used by `worldPoint` to meters.\n *\n * @param worldPoint - The position in world coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract getScaleFactor(worldPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "worldPoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getScaleFactor"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!Projection#groundDistance:member(1)",
              "docComment": "/**\n * Returns the signed distance between the given coordinates and the closest point on the surface.\n *\n * @param worldPoint - The position in world coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract groundDistance(worldPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "worldPoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "groundDistance"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!Projection#localTangentSpace:member(1)",
              "docComment": "/**\n * Gets the [[TransformLike]] of the local tangent space at the given point.\n *\n * @param point - The geo / world coordinates.\n *\n * @param result - The [[TransformLike]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "localTangentSpace(point: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinatesLike",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinatesLike:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "TransformLike",
                  "canonicalReference": "@here/harp-geoutils!TransformLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TransformLike",
                  "canonicalReference": "@here/harp-geoutils!TransformLike:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "point",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "localTangentSpace"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!Projection#projectBox:member(1)",
              "docComment": "/**\n * Projects bounds in geo coordinates to a bounding box in world coordinates.\n *\n * Example:\n * ```typescript\n * const bounds = projection.projectBox(geoBox);\n * console.log(bounds.min, bounds.max);\n * ```\n *\n * @param geoBox - The bounding box in geo coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract projectBox(geoBox: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoBox",
                  "canonicalReference": "@here/harp-geoutils!GeoBox:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Box3Like",
                  "canonicalReference": "@here/harp-geoutils!Box3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "geoBox",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "projectBox"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!Projection#projectBox:member(2)",
              "docComment": "/**\n * Projects bounds in geo coordinates to a bounding box in world coordinates.\n *\n * Example:\n * ```typescript\n * const bounds = projection.projectBox(geoBox, new THREE.Box3());\n * console.log(bounds.min, bounds.max);\n * ```\n *\n * @param geoBox - The bounding box in geo coordinates.\n *\n * @param result - The resulting [[OrientedBox3Like]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract projectBox<WorldBoundingBox extends "
                },
                {
                  "kind": "Reference",
                  "text": "Box3Like",
                  "canonicalReference": "@here/harp-geoutils!Box3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "OrientedBox3Like",
                  "canonicalReference": "@here/harp-geoutils!OrientedBox3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(geoBox: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoBox",
                  "canonicalReference": "@here/harp-geoutils!GeoBox:class"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Content",
                  "text": "WorldBoundingBox"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "WorldBoundingBox"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "geoBox",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "WorldBoundingBox",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "projectBox"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!Projection#projectPoint:member(1)",
              "docComment": "/**\n * Projects a point from geo coordinates (latitude, longitude, altitude) to world coordinates (x,y,z).\n *\n * Example:\n * ```typescript\n * const worldPos = new THREE.Vector3();\n * projection.projectPoint(geoPos, worldPos);\n * ```\n *\n * @param geoPoint - The position in geo coordinates.\n *\n * @param result - The optional object used to store the resulting world position, result must implement [[Vector3Like]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract projectPoint<WorldCoordinates extends "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(geoPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinatesLike",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinatesLike:interface"
                },
                {
                  "kind": "Content",
                  "text": ", result?: "
                },
                {
                  "kind": "Content",
                  "text": "WorldCoordinates"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "WorldCoordinates"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "geoPoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "WorldCoordinates",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "projectPoint"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!Projection#reprojectPoint:member(1)",
              "docComment": "/**\n * Reproject a world position from the given source [[Projection]].\n *\n * @param sourceProjection - The source projection.\n *\n * @param worldPos - A valid world position for the given source projection.\n *\n * @returns The world position reprojected using this [[Projection]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reprojectPoint(sourceProjection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ", worldPos: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "sourceProjection",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "worldPos",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "reprojectPoint"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!Projection#reprojectPoint:member(2)",
              "docComment": "/**\n * Reproject a world position from the given source [[Projection]].\n *\n * @param sourceProjection - The source projection.\n *\n * @param worldPos - A valid position in the world space defined by the source projection.\n *\n * @param result - The resulting position reprojected using this [[Projection]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reprojectPoint<WorldCoordinates extends "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(sourceProjection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ", worldPos: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Content",
                  "text": "WorldCoordinates"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "WorldCoordinates"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "sourceProjection",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "worldPos",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "WorldCoordinates",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "reprojectPoint"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!Projection#scalePointToSurface:member(1)",
              "docComment": "/**\n * Scales the given world coordinates to the surface.\n *\n * @param worldPoint - The position in world coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract scalePointToSurface(worldPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "worldPoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "scalePointToSurface"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!Projection#surfaceNormal:member(1)",
              "docComment": "/**\n * Returns the surface normal at the given world position.\n *\n * @param worldPoint - The position in world coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract surfaceNormal(worldPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "worldPoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "surfaceNormal"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!Projection#surfaceNormal:member(2)",
              "docComment": "/**\n * Returns the surface normal at the given world position.\n *\n * @param worldPoint - The position in world coordinates.\n *\n * @returns The resulting normal vector.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract surfaceNormal<Normal extends "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(worldPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Content",
                  "text": "Normal"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Normal"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "worldPoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Normal",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "surfaceNormal"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!Projection#type:member",
              "docComment": "/**\n * The type of this [Projection].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract get type(): "
                },
                {
                  "kind": "Reference",
                  "text": "ProjectionType",
                  "canonicalReference": "@here/harp-geoutils!ProjectionType:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!Projection#unitScale:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly unitScale: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "unitScale",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!Projection#unprojectAltitude:member(1)",
              "docComment": "/**\n * Returns the altitude at the given world position (x,y,z) in meters.\n *\n * @param worldPoint - The position in world coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract unprojectAltitude(worldPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "worldPoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "unprojectAltitude"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!Projection#unprojectBox:member(1)",
              "docComment": "/**\n * Converts a bounding box in world coordinates to a bounding box in geo coordinates.\n *\n * Example:\n * ```typescript\n * const geoPos = projection.unprojectPoint(worldPos);\n * console.log(geoPos.latitude, geoPos.longitude, geoPos.altitude);\n * ```\n *\n * @param worldBox - The bounding box in world coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract unprojectBox(worldBox: "
                },
                {
                  "kind": "Reference",
                  "text": "Box3Like",
                  "canonicalReference": "@here/harp-geoutils!Box3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoBox",
                  "canonicalReference": "@here/harp-geoutils!GeoBox:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "worldBox",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "unprojectBox"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!Projection#unprojectPoint:member(1)",
              "docComment": "/**\n * Returns the geo coordinates (latitude, longitude, altitude) from the given world position (x,y,z).\n *\n * Example:\n * ```typescript\n * const geoPos = projection.unprojectPoint(worldPos);\n * console.log(geoPos.latitude, geoPos.longitude, geoPos.altitude);\n * ```\n *\n * @param worldPoint - The position in world coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract unprojectPoint(worldPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinates",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinates:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "worldPoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "unprojectPoint"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!Projection#worldExtent:member(1)",
              "docComment": "/**\n * Returns the world extents in world coordinates.\n *\n * @param minElevation - The minimum elevation in meters.\n *\n * @param maxElevation - The maximum elevation in meters.\n *\n * @param result - The optional object that will be used to create the resulting bounding box.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract worldExtent<Bounds extends "
                },
                {
                  "kind": "Reference",
                  "text": "Box3Like",
                  "canonicalReference": "@here/harp-geoutils!Box3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(minElevation: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", maxElevation: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", result?: "
                },
                {
                  "kind": "Content",
                  "text": "Bounds"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "Bounds"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "minElevation",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "maxElevation",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Bounds",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "worldExtent"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@here/harp-geoutils!ProjectionType:enum",
          "docComment": "/**\n * The type of projection.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ProjectionType "
            }
          ],
          "releaseTag": "Public",
          "name": "ProjectionType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-geoutils!ProjectionType.Planar:member",
              "docComment": "/**\n * A type of [Projection] with zero curvature.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Planar = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Planar",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@here/harp-geoutils!ProjectionType.Spherical:member",
              "docComment": "/**\n * A spherical [Projection].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Spherical = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Spherical",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-geoutils!QuadTree:class",
          "docComment": "/**\n * A class used to represent a quadtree.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class QuadTree "
            }
          ],
          "releaseTag": "Public",
          "name": "QuadTree",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-geoutils!QuadTree:constructor(1)",
              "docComment": "/**\n * Constructs a new `QuadTree` for the given [[TilingScheme]].\n *\n * Example:\n * ```typescript\n * const quadTree = new QuadTree(hereTilingScheme);\n * const geoBox = quadTree.getGeoBox(tileKey);\n * console.log(geoBox.center);\n * ```\n *\n * @param tilingScheme - The TilingScheme used by this `QuadTree`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(tilingScheme: "
                },
                {
                  "kind": "Reference",
                  "text": "TilingScheme",
                  "canonicalReference": "@here/harp-geoutils!TilingScheme:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tilingScheme",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!QuadTree#tilingScheme:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly tilingScheme: "
                },
                {
                  "kind": "Reference",
                  "text": "TilingScheme",
                  "canonicalReference": "@here/harp-geoutils!TilingScheme:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tilingScheme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!QuadTree#visit:member(1)",
              "docComment": "/**\n * Visits this `QuadTree` and invoke the given accept method with the current [[TileKey]] and its bounding box in geo coordinates.\n *\n * Example:\n * ```typescript\n * const geoPos = new GeoCoordinates(latitude, longitude);\n * const quadTree = new QuadTree(hereTilingScheme);\n * quadTree.visit((tileKey, geoBox) => {\n *     if (geoBox.contains(geoPos)) {\n *         console.log(\"tile\", tileKey, \"contains\", geoPos);\n *         return tileKey.level < 14; // stop visiting the quadtree if the level is >= 14.\n *     }\n *     return false; // stop visiting the quadtree,\n *                   // the tile's geoBox doesn't contain the given coordinates.\n * });\n * ```\n *\n * @param accept - A function that takes a [[TileKey]] and its bounding box in geo coordinates and returns `true` if the visit of the `QuadTree` should continue; otherwise `false`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visit(accept: "
                },
                {
                  "kind": "Content",
                  "text": "(tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ", geoBox: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoBox",
                  "canonicalReference": "@here/harp-geoutils!GeoBox:class"
                },
                {
                  "kind": "Content",
                  "text": ") => boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "accept",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 6
                  }
                }
              ],
              "name": "visit"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!QuadTree#visitTileKey:member(1)",
              "docComment": "/**\n * Visits the subtree starting from the given tile.\n *\n * @param tileKey - The root of the subtree that should be visited.\n *\n * @param accept - A function that takes a [[TileKey]] and its bounding box in geo coordinates and returns `true` if the visit of the `QuadTree` should continue; otherwise `false`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "visitTileKey(tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ", accept: "
                },
                {
                  "kind": "Content",
                  "text": "(tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ", geoBox: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoBox",
                  "canonicalReference": "@here/harp-geoutils!GeoBox:class"
                },
                {
                  "kind": "Content",
                  "text": ") => boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "accept",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  }
                }
              ],
              "name": "visitTileKey"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-geoutils!quadTreeSubdivisionScheme:var",
          "docComment": "/**\n * [[SubdivisionScheme]] representing a quadtree.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "quadTreeSubdivisionScheme: "
            },
            {
              "kind": "Reference",
              "text": "SubdivisionScheme",
              "canonicalReference": "@here/harp-geoutils!SubdivisionScheme:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "quadTreeSubdivisionScheme",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-geoutils!sphereProjection:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "sphereProjection: "
            },
            {
              "kind": "Reference",
              "text": "Projection",
              "canonicalReference": "@here/harp-geoutils!Projection:class"
            }
          ],
          "releaseTag": "Public",
          "name": "sphereProjection",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-geoutils!SubdivisionScheme:interface",
          "docComment": "/**\n * Interface representing a `SubdivisionScheme`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SubdivisionScheme "
            }
          ],
          "releaseTag": "Public",
          "name": "SubdivisionScheme",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-geoutils!SubdivisionScheme#getLevelDimensionX:member(1)",
              "docComment": "/**\n * Returns the width of the partitions at the given level.\n *\n * @param level - The level.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getLevelDimensionX(level: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "level",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getLevelDimensionX"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-geoutils!SubdivisionScheme#getLevelDimensionY:member(1)",
              "docComment": "/**\n * Returns the height of the partitions at the given level.\n *\n * @param level - The level.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getLevelDimensionY(level: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "level",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getLevelDimensionY"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-geoutils!SubdivisionScheme#getSubdivisionX:member(1)",
              "docComment": "/**\n * Returns the number of columns for the given level.\n *\n * @param level - The level.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSubdivisionX(level: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "level",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getSubdivisionX"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@here/harp-geoutils!SubdivisionScheme#getSubdivisionY:member(1)",
              "docComment": "/**\n * Returns the number of rows for the given level.\n *\n * @param level - The level.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSubdivisionY(level: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "level",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getSubdivisionY"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-geoutils!SubTiles:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SubTiles implements "
            },
            {
              "kind": "Reference",
              "text": "Iterable",
              "canonicalReference": "!Iterable:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TileKey",
              "canonicalReference": "@here/harp-geoutils!TileKey:class"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "SubTiles",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!SubTiles#[Symbol.iterator]:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "Symbol.iterator",
                  "canonicalReference": "!SymbolConstructor#iterator"
                },
                {
                  "kind": "Content",
                  "text": "](): "
                },
                {
                  "kind": "Reference",
                  "text": "Iterator",
                  "canonicalReference": "!Iterator:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "[Symbol.iterator]"
            },
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-geoutils!SubTiles:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `SubTiles` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ", sizeX: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", sizeY: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "sizeX",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "sizeY",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!SubTiles#sizeX:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sizeX: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sizeX",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!SubTiles#sizeY:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sizeY: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sizeY",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!SubTiles#tileKey:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tileKey",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@here/harp-geoutils!SubTiles:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace SubTiles "
            }
          ],
          "releaseTag": "Public",
          "name": "SubTiles",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-geoutils!SubTiles.RowColumnIterator:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function RowColumnIterator(parentKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ", sizeX: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", sizeY: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Iterator",
                  "canonicalReference": "!Iterator:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "parentKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "sizeX",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "sizeY",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "RowColumnIterator"
            },
            {
              "kind": "Function",
              "canonicalReference": "@here/harp-geoutils!SubTiles.ZCurveIterator:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function ZCurveIterator(parentKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Iterator",
                  "canonicalReference": "!Iterator:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "parentKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "ZCurveIterator"
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-geoutils!TileKey:class",
          "docComment": "/**\n * The `TileKey` instances are used to address a tile in a quadtree.\n *\n * A tile key is defined by a row, a column, and a level. The tree has a root at level 0, with one single tile. On every level, each tile is divided into four children (therefore the name quadtree).\n *\n * Within each [[level]], any particular tile is addressed with [[row]] and [[column]]. The number of rows and columns in each level is 2 to the power of the level. This means: On level 0, only one tile exists, [[columnsAtLevel]]() and [[rowsAtLevel]]() are both 1. On level 1, 4 tiles exist, in 2 rows and 2 columns. On level 2 we have 16 tiles, in 4 rows and 4 columns. And so on.\n *\n * A tile key is usually created using [[fromRowColumnLevel]]() method.\n *\n * `TileKey` instances are immutable, all members return new instances of `TileKey` and do not modify the original object.\n *\n * Utility functions like [[parent]](), [[changedLevelBy]](), and [[changedLevelTo]]() allow for easy vertical navigation of the tree. The number of available rows and columns in the tile's level is given with [[rowCount]]() and [[columnCount]]().\n *\n * Tile keys can be created from and converted into various alternative formats:\n *\n * - [[toQuadKey]]() / [[fromQuadKey]]() - string representation 4-based - [[toHereTile]]() / [[fromHereTile]]() - string representation 10-based - [[mortonCode]]() / [[fromMortonCode]]() - number representation\n *\n * Note - as JavaScript's number type can hold 53 bits in its mantissa, only levels up to 26 can be represented in the number representation returned by [[mortonCode]]().\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TileKey "
            }
          ],
          "releaseTag": "Public",
          "name": "TileKey",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-geoutils!TileKey:constructor(1)",
              "docComment": "/**\n * Constructs a new immutable instance of a `TileKey`.\n *\n * For the better readability, [[TileKey.fromRowColumnLevel]] should be preferred.\n *\n * Note - row and column must not be greater than the maximum rows/columns for the given level.\n *\n * @param row - Represents the row in the quadtree.\n *\n * @param column - Represents the column in the quadtree.\n *\n * @param level - Represents the level in the quadtree.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(row: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", column: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", level: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "row",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "column",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "level",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKey#addedSubHereTile:member(1)",
              "docComment": "/**\n * Returns the absolute quadkey that is constructed from its sub HERE tile key.\n *\n * @param sub - The sub HERE key.\n *\n * @returns The absolute tile key in the quadtree.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addedSubHereTile(sub: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "sub",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addedSubHereTile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKey#addedSubKey:member(1)",
              "docComment": "/**\n * Returns the absolute quadkey that is constructed from its sub quadkey.\n *\n * @param sub - The sub key.\n *\n * @returns The absolute tile key in the quadtree.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addedSubKey(sub: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "sub",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addedSubKey"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKey.atCoords:member(1)",
              "docComment": "/**\n * Returns the closest matching `TileKey` in a cartesian coordinate system.\n *\n * @param level - The level for the tile key.\n *\n * @param coordX - The X coordinate.\n *\n * @param coordY - The Y coordinate.\n *\n * @param totalWidth - The maximum X coordinate.\n *\n * @param totalHeight - The maximum Y coordinate.\n *\n * @returns A new tile key at the given level that includes the given coordinates.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static atCoords(level: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", coordX: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", coordY: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", totalWidth: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", totalHeight: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "level",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "coordX",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "coordY",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "totalWidth",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "totalHeight",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "name": "atCoords"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKey#changedLevelBy:member(1)",
              "docComment": "/**\n * Returns a new tile key at a level that differs from this tile's level by delta.\n *\n * Equivalent to `changedLevelTo(level() + delta)`.\n *\n * Note - root key is returned if `delta` is smaller than the level of this tile key.\n *\n * @param delta - The numeric difference between the current level and the requested level.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "changedLevelBy(delta: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "delta",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "changedLevelBy"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKey#changedLevelTo:member(1)",
              "docComment": "/**\n * Returns a new tile key at the requested level.\n *\n * If the requested level is smaller than the tile's level, then the key of an ancestor of this tile is returned. If the requested level is larger than the tile's level, then the key of first child or grandchild of this tile is returned, for example, the child with the lowest row and column number. If the requested level equals this tile's level, then the tile key itself is returned. If the requested level is negative, the root tile key is returned.\n *\n * @param level - The requested level.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "changedLevelTo(level: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "level",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "changedLevelTo"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!TileKey#column:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly column: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "column",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKey#columnCount:member(1)",
              "docComment": "/**\n * Returns the number of available columns in the tile's [[level]].\n *\n * This is 2 to the power of the level.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "columnCount(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "columnCount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKey.columnsAtLevel:member(1)",
              "docComment": "/**\n * Returns the number of available columns at a given level.\n *\n * This is 2 to the power of the level.\n *\n * @param level - The level for which to return the number of columns.\n *\n * @returns The available columns at the given level.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static columnsAtLevel(level: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "level",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "columnsAtLevel"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKey#equals:member(1)",
              "docComment": "/**\n * Equality operator.\n *\n * @param qnr - The tile key to compare to.\n *\n * @returns `true` if this tile key has identical row, column and level, `false` otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equals(qnr: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "qnr",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKey.fromHereTile:member(1)",
              "docComment": "/**\n * Creates a tile key from a heretile code string.\n *\n * The string can be created with [[toHereTile]].\n *\n * @param quadkey64 - The string representation of the HERE tile key.\n *\n * @returns A new instance of `TileKey`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromHereTile(quadkey64: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "quadkey64",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromHereTile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKey.fromMortonCode:member(1)",
              "docComment": "/**\n * Creates a tile key from a numeric Morton code representation.\n *\n * You can convert a tile key into a numeric Morton code with [[mortonCode]].\n *\n * @param quadKey64 - The Morton code to be converted.\n *\n * @returns A new instance of [[TileKey]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromMortonCode(quadKey64: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "quadKey64",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromMortonCode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKey.fromQuadKey:member(1)",
              "docComment": "/**\n * Creates a tile key from a quad string.\n *\n * The quad string can be created with [[toQuadKey]].\n *\n * @param quadkey - The quadkey to convert.\n *\n * @returns A new instance of `TileKey`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromQuadKey(quadkey: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "quadkey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromQuadKey"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKey.fromRowColumnLevel:member(1)",
              "docComment": "/**\n * Creates a tile key.\n *\n * @param row - The requested row. Must be less than 2 to the power of level.\n *\n * @param column - The requested column. Must be less than 2 to the power of level.\n *\n * @param level - The requested level.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromRowColumnLevel(row: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", column: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", level: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "row",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "column",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "level",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "fromRowColumnLevel"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKey#getSubHereTile:member(1)",
              "docComment": "/**\n * Returns a sub quadkey that is relative to its parent.\n *\n * This function can be used to generate sub keys that are relative to a parent that is delta levels up in the quadtree.\n *\n * This function can be used to create shortened keys for quads on lower levels if the parent is known.\n *\n * Note - the sub quadkeys fit in a 16-bit unsigned integer if the `delta` is smaller than 8. If `delta` is smaller than 16, the sub quadkey fits into an unsigned 32-bit integer.\n *\n * Deltas larger than 16 are not supported.\n *\n * @param delta - The number of levels relative to its parent quadkey. Must be greater or equal to 0 and smaller than 16.\n *\n * @returns The quadkey relative to its parent that is `delta` levels up the tree.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSubHereTile(delta: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "delta",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getSubHereTile"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!TileKey#level:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly level: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "level",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKey#mortonCode:member(1)",
              "docComment": "/**\n * Converts the tile key to a numeric code representation.\n *\n * You can create a tile key from a numeric Morton code with [[fromMortonCode]].\n *\n * Note - only levels <= 26 are supported.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mortonCode(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "mortonCode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKey#parent:member(1)",
              "docComment": "/**\n * Returns a tile key representing the parent of the tile addressed by this tile key.\n *\n * Throws an exception is this tile is already the root.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "parent(): "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "parent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKey.parentMortonCode:member(1)",
              "docComment": "/**\n * Computes the Morton code of the parent tile key of the given Morton code.\n *\n * Note: The parent key of the root key is the root key itself.\n *\n * @param mortonCode - A Morton code, for example, obtained from [[mortonCode]].\n *\n * @returns The Morton code of the parent tile.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static parentMortonCode(mortonCode: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mortonCode",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "parentMortonCode"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!TileKey#row:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly row: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "row",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKey#rowCount:member(1)",
              "docComment": "/**\n * Returns the number of available rows in the tile's [[level]].\n *\n * This is 2 to the power of the level.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rowCount(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "rowCount"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKey.rowsAtLevel:member(1)",
              "docComment": "/**\n * Returns the number of available rows at a given level.\n *\n * This is 2 to the power of the level.\n *\n * @param level - The level for which to return the number of rows.\n *\n * @returns The available rows at the given level.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static rowsAtLevel(level: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "level",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "rowsAtLevel"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKey#toHereTile:member(1)",
              "docComment": "/**\n * Converts the tile key into a string for using in REST API calls.\n *\n * The string is a quadkey Morton code representation as a string.\n *\n * You can convert back from a quadkey string with [[fromHereTile]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toHereTile(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toHereTile"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKey#toQuadKey:member(1)",
              "docComment": "/**\n * Converts the tile key into a string for using in REST API calls.\n *\n * If the tile is the root tile, the quadkey is '-'. Otherwise the string is a number to the base of 4, but without the leading 1, with the following properties: 1. the number of digits equals the level. 2. removing the last digit gives the parent tile's quadkey string, i.e. appending 0,1,2,3 to a quadkey string gives the tiles's children.\n *\n * You can convert back from a quadkey string with [[fromQuadKey]].\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toQuadKey(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "toQuadKey"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-geoutils!TileKeyUtils:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TileKeyUtils "
            }
          ],
          "releaseTag": "Public",
          "name": "TileKeyUtils",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKeyUtils.geoCoordinatesToTileKey:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static geoCoordinatesToTileKey(tilingScheme: "
                },
                {
                  "kind": "Reference",
                  "text": "TilingScheme",
                  "canonicalReference": "@here/harp-geoutils!TilingScheme:class"
                },
                {
                  "kind": "Content",
                  "text": ", geoPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinatesLike",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinatesLike:interface"
                },
                {
                  "kind": "Content",
                  "text": ", level: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tilingScheme",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "geoPoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "level",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "geoCoordinatesToTileKey"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKeyUtils.geoRectangleToTileKeys:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static geoRectangleToTileKeys(tilingScheme: "
                },
                {
                  "kind": "Reference",
                  "text": "TilingScheme",
                  "canonicalReference": "@here/harp-geoutils!TilingScheme:class"
                },
                {
                  "kind": "Content",
                  "text": ", geoBox: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoBox",
                  "canonicalReference": "@here/harp-geoutils!GeoBox:class"
                },
                {
                  "kind": "Content",
                  "text": ", level: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tilingScheme",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "geoBox",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "level",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "geoRectangleToTileKeys"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileKeyUtils.worldCoordinatesToTileKey:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static worldCoordinatesToTileKey(tilingScheme: "
                },
                {
                  "kind": "Reference",
                  "text": "TilingScheme",
                  "canonicalReference": "@here/harp-geoutils!TilingScheme:class"
                },
                {
                  "kind": "Content",
                  "text": ", worldPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ", level: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tilingScheme",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "worldPoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "level",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "worldCoordinatesToTileKey"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-geoutils!TileTreeTraverse:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TileTreeTraverse "
            }
          ],
          "releaseTag": "Public",
          "name": "TileTreeTraverse",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-geoutils!TileTreeTraverse:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `TileTreeTraverse` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(subdivisionScheme: "
                },
                {
                  "kind": "Reference",
                  "text": "SubdivisionScheme",
                  "canonicalReference": "@here/harp-geoutils!SubdivisionScheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "subdivisionScheme",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TileTreeTraverse#subTiles:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subTiles(tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "subTiles"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-geoutils!TilingScheme:class",
          "docComment": "/**\n * The `TilingScheme` represents how the data is tiled.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TilingScheme "
            }
          ],
          "releaseTag": "Public",
          "name": "TilingScheme",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@here/harp-geoutils!TilingScheme:constructor(1)",
              "docComment": "/**\n * Constructs a new `TilingScheme` with the given subdivision scheme and projection.\n *\n * @param subdivisionScheme - The subdivision scheme used by this `TilingScheme`.\n *\n * @param projection - The projection used by this `TilingScheme`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(subdivisionScheme: "
                },
                {
                  "kind": "Reference",
                  "text": "SubdivisionScheme",
                  "canonicalReference": "@here/harp-geoutils!SubdivisionScheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ", projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "subdivisionScheme",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "projection",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!TilingScheme#boundingBoxGenerator:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly boundingBoxGenerator: "
                },
                {
                  "kind": "Reference",
                  "text": "FlatTileBoundingBoxGenerator",
                  "canonicalReference": "@here/harp-geoutils!FlatTileBoundingBoxGenerator:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "boundingBoxGenerator",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TilingScheme#getGeoBox:member(1)",
              "docComment": "/**\n * Returns the bounding box in geo coordinates for the given [[TileKey]].\n *\n * @param tileKey - The `TileKey`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getGeoBox(tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "GeoBox",
                  "canonicalReference": "@here/harp-geoutils!GeoBox:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getGeoBox"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TilingScheme#getSubTileKeys:member(1)",
              "docComment": "/**\n * Returns the sub tile keys of the given tile.\n *\n * @param tileKey - The [[TileKey]].\n *\n * @returns The list of the sub tile keys.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSubTileKeys(tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getSubTileKeys"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TilingScheme#getTileKey:member(1)",
              "docComment": "/**\n * Gets the [[TileKey]] from the given geo position and level.\n *\n * @param geoPoint - The position in geo coordinates.\n *\n * @param level - The level of the resulting `TileKey`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTileKey(geoPoint: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinatesLike",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinatesLike:interface"
                },
                {
                  "kind": "Content",
                  "text": ", level: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "geoPoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "level",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getTileKey"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TilingScheme#getTileKeys:member(1)",
              "docComment": "/**\n * Gets the list of [[TileKey]]s contained in the given [[GeoBox]].\n *\n * @param geoBox - The bounding box in geo coordinates.\n *\n * @param level - The level of the resulting `TileKey`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTileKeys(geoBox: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoBox",
                  "canonicalReference": "@here/harp-geoutils!GeoBox:class"
                },
                {
                  "kind": "Content",
                  "text": ", level: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "geoBox",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "level",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getTileKeys"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TilingScheme#getWorldBox:member(1)",
              "docComment": "/**\n * Returns the bounding box in world coordinates.\n *\n * @param tileKey - The `TileKey`.\n *\n * @param result - The optional object that will contain the resulting bounding box.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getWorldBox(tileKey: "
                },
                {
                  "kind": "Reference",
                  "text": "TileKey",
                  "canonicalReference": "@here/harp-geoutils!TileKey:class"
                },
                {
                  "kind": "Content",
                  "text": ", result?: "
                },
                {
                  "kind": "Reference",
                  "text": "Box3Like",
                  "canonicalReference": "@here/harp-geoutils!Box3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Box3Like",
                  "canonicalReference": "@here/harp-geoutils!Box3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tileKey",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "getWorldBox"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!TilingScheme#projection:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly projection: "
                },
                {
                  "kind": "Reference",
                  "text": "Projection",
                  "canonicalReference": "@here/harp-geoutils!Projection:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "projection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!TilingScheme#subdivisionScheme:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly subdivisionScheme: "
                },
                {
                  "kind": "Reference",
                  "text": "SubdivisionScheme",
                  "canonicalReference": "@here/harp-geoutils!SubdivisionScheme:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "subdivisionScheme",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!TilingScheme#tileTreeTraverse:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly tileTreeTraverse: "
                },
                {
                  "kind": "Reference",
                  "text": "TileTreeTraverse",
                  "canonicalReference": "@here/harp-geoutils!TileTreeTraverse:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "tileTreeTraverse",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-geoutils!TransformLike:interface",
          "docComment": "/**\n * The interface [[TransformLike]] is used to represent transforms with only translation and rotation.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TransformLike "
            }
          ],
          "releaseTag": "Public",
          "name": "TransformLike",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-geoutils!TransformLike#position:member",
              "docComment": "/**\n * The position of this transform.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly position: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "position",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-geoutils!TransformLike#xAxis:member",
              "docComment": "/**\n * The x-axis of this transform.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly xAxis: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "xAxis",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-geoutils!TransformLike#yAxis:member",
              "docComment": "/**\n * The y-axis of this transform.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly yAxis: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "yAxis",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-geoutils!TransformLike#zAxis:member",
              "docComment": "/**\n * The z-axis of this transform.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly zAxis: "
                },
                {
                  "kind": "Reference",
                  "text": "Vector3Like",
                  "canonicalReference": "@here/harp-geoutils!Vector3Like:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "zAxis",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-geoutils!transverseMercatorProjection:var",
          "docComment": "/**\n * Transverse Mercator [[Projection]] used to convert geo coordinates to world coordinates and vice versa.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "transverseMercatorProjection: "
            },
            {
              "kind": "Reference",
              "text": "Projection",
              "canonicalReference": "@here/harp-geoutils!Projection:class"
            }
          ],
          "releaseTag": "Public",
          "name": "transverseMercatorProjection",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@here/harp-geoutils!TransverseMercatorUtils:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TransverseMercatorUtils "
            }
          ],
          "releaseTag": "Public",
          "name": "TransverseMercatorUtils",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TransverseMercatorUtils.alignLatitude:member(1)",
              "docComment": "/**\n * There are two regions on projected space that have same geo coordinates, it's the entire lines { x: [0..1], y: 0 } and { x: [0..1], y: 1 } they both have geo coordinates of (0, [-90..+90]) and should be aligned somehow to fall into first or second region to make proper bounding boxes, tile bounds, etc.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static alignLatitude(points: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinatesLike",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinatesLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ", referencePoint: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinatesLike",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinatesLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "points",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "referencePoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "alignLatitude"
            },
            {
              "kind": "Method",
              "canonicalReference": "@here/harp-geoutils!TransverseMercatorUtils.alignLongitude:member(1)",
              "docComment": "/**\n * There are two regions on projected plane, { x: 0.5, y: [0..0.25] } and { x: 0.5, y: [0.75..1] } that represent longitude edge where -180 and +180 met. Points falling in this regions should be aligned to get proper boxes etc.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static alignLongitude(points: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinatesLike",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinatesLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ", referencePoint: "
                },
                {
                  "kind": "Reference",
                  "text": "GeoCoordinatesLike",
                  "canonicalReference": "@here/harp-geoutils!GeoCoordinatesLike:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "points",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "referencePoint",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "alignLongitude"
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!TransverseMercatorUtils.POLE_EDGE_DEG:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static POLE_EDGE_DEG: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "POLE_EDGE_DEG",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!TransverseMercatorUtils.POLE_EDGE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static POLE_EDGE: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "POLE_EDGE",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!TransverseMercatorUtils.POLE_RADIUS_SQ:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static POLE_RADIUS_SQ: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "POLE_RADIUS_SQ",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Property",
              "canonicalReference": "@here/harp-geoutils!TransverseMercatorUtils.POLE_RADIUS:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static POLE_RADIUS: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "POLE_RADIUS",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@here/harp-geoutils!Vector3Like:interface",
          "docComment": "/**\n * Interface representing a Vector3.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Vector3Like "
            }
          ],
          "releaseTag": "Public",
          "name": "Vector3Like",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-geoutils!Vector3Like#x:member",
              "docComment": "/**\n * The X position.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "x",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-geoutils!Vector3Like#y:member",
              "docComment": "/**\n * The Y position.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "y",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@here/harp-geoutils!Vector3Like#z:member",
              "docComment": "/**\n * The Z position.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "z: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "z",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-geoutils!webMercatorProjection:var",
          "docComment": "/**\n * Web Mercator [[Projection]] used to convert geo coordinates to world coordinates and vice versa.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "webMercatorProjection: "
            },
            {
              "kind": "Reference",
              "text": "Projection",
              "canonicalReference": "@here/harp-geoutils!Projection:class"
            }
          ],
          "releaseTag": "Public",
          "name": "webMercatorProjection",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@here/harp-geoutils!webMercatorTilingScheme:var",
          "docComment": "/**\n * A [[TilingScheme]] featuring quadtree subdivision scheme and web Mercator projection.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "webMercatorTilingScheme: "
            },
            {
              "kind": "Reference",
              "text": "TilingScheme",
              "canonicalReference": "@here/harp-geoutils!TilingScheme:class"
            }
          ],
          "releaseTag": "Public",
          "name": "webMercatorTilingScheme",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        }
      ]
    }
  ]
}
